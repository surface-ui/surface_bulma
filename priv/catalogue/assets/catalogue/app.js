(()=>{var si=Object.create;var tt=Object.defineProperty;var ri=Object.getOwnPropertyDescriptor;var ai=Object.getOwnPropertyNames,Ie=Object.getOwnPropertySymbols,oi=Object.getPrototypeOf,it=Object.prototype.hasOwnProperty,kt=Object.prototype.propertyIsEnumerable;var St=(e,t,i)=>t in e?tt(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i,ye=(e,t)=>{for(var i in t||(t={}))it.call(t,i)&&St(e,i,t[i]);if(Ie)for(var i of Ie(t))kt.call(t,i)&&St(e,i,t[i]);return e};var At=(e,t)=>{var i={};for(var n in e)it.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(e!=null&&Ie)for(var n of Ie(e))t.indexOf(n)<0&&kt.call(e,n)&&(i[n]=e[n]);return i};var li=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var hi=(e,t,i,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of ai(t))!it.call(e,s)&&s!==i&&tt(e,s,{get:()=>t[s],enumerable:!(n=ri(t,s))||n.enumerable});return e};var di=(e,t,i)=>(i=e!=null?si(oi(e)):{},hi(t||!e||!e.__esModule?tt(i,"default",{value:e,enumerable:!0}):i,e));var Qt=li((Un,Ye)=>{var dn=typeof window!="undefined"?window:typeof WorkerGlobalScope!="undefined"&&self instanceof WorkerGlobalScope?self:{},S=function(e){var t=/\blang(?:uage)?-([\w-]+)\b/i,i=0,n={},s={manual:e.Prism&&e.Prism.manual,disableWorkerMessageHandler:e.Prism&&e.Prism.disableWorkerMessageHandler,util:{encode:function c(f){return f instanceof r?new r(f.type,c(f.content),f.alias):Array.isArray(f)?f.map(c):f.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(c){return Object.prototype.toString.call(c).slice(8,-1)},objId:function(c){return c.__id||Object.defineProperty(c,"__id",{value:++i}),c.__id},clone:function c(f,m){var v,h;switch(m=m||{},s.util.type(f)){case"Object":if(h=s.util.objId(f),m[h])return m[h];for(var y in v={},m[h]=v,f)f.hasOwnProperty(y)&&(v[y]=c(f[y],m));return v;case"Array":return h=s.util.objId(f),m[h]?m[h]:(v=[],m[h]=v,f.forEach(function(w,k){v[k]=c(w,m)}),v);default:return f}},getLanguage:function(c){for(;c&&!t.test(c.className);)c=c.parentElement;return c?(c.className.match(t)||[,"none"])[1].toLowerCase():"none"},currentScript:function(){if(typeof document=="undefined")return null;if("currentScript"in document)return document.currentScript;try{throw new Error}catch(v){var c=(/at [^(\r\n]*\((.*):.+:.+\)$/i.exec(v.stack)||[])[1];if(c){var f=document.getElementsByTagName("script");for(var m in f)if(f[m].src==c)return f[m]}return null}},isActive:function(c,f,m){for(var v="no-"+f;c;){var h=c.classList;if(h.contains(f))return!0;if(h.contains(v))return!1;c=c.parentElement}return!!m}},languages:{plain:n,plaintext:n,text:n,txt:n,extend:function(c,f){var m=s.util.clone(s.languages[c]);for(var v in f)m[v]=f[v];return m},insertBefore:function(c,f,m,v){var h=(v=v||s.languages)[c],y={};for(var w in h)if(h.hasOwnProperty(w)){if(w==f)for(var k in m)m.hasOwnProperty(k)&&(y[k]=m[k]);m.hasOwnProperty(w)||(y[w]=h[w])}var P=v[c];return v[c]=y,s.languages.DFS(s.languages,function(N,K){K===P&&N!=c&&(this[N]=y)}),y},DFS:function c(f,m,v,h){h=h||{};var y=s.util.objId;for(var w in f)if(f.hasOwnProperty(w)){m.call(f,w,f[w],v||w);var k=f[w],P=s.util.type(k);P!=="Object"||h[y(k)]?P!=="Array"||h[y(k)]||(h[y(k)]=!0,c(k,m,w,h)):(h[y(k)]=!0,c(k,m,null,h))}}},plugins:{},highlightAll:function(c,f){s.highlightAllUnder(document,c,f)},highlightAllUnder:function(c,f,m){var v={callback:m,container:c,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};s.hooks.run("before-highlightall",v),v.elements=Array.prototype.slice.apply(v.container.querySelectorAll(v.selector)),s.hooks.run("before-all-elements-highlight",v);for(var h,y=0;h=v.elements[y++];)s.highlightElement(h,f===!0,v.callback)},highlightElement:function(c,f,m){var v=s.util.getLanguage(c),h=s.languages[v];c.className=c.className.replace(t,"").replace(/\s+/g," ")+" language-"+v;var y=c.parentElement;y&&y.nodeName.toLowerCase()==="pre"&&(y.className=y.className.replace(t,"").replace(/\s+/g," ")+" language-"+v);var w={element:c,language:v,grammar:h,code:c.textContent};function k(N){w.highlightedCode=N,s.hooks.run("before-insert",w),w.element.innerHTML=w.highlightedCode,s.hooks.run("after-highlight",w),s.hooks.run("complete",w),m&&m.call(w.element)}if(s.hooks.run("before-sanity-check",w),!w.code)return s.hooks.run("complete",w),void(m&&m.call(w.element));if(s.hooks.run("before-highlight",w),w.grammar)if(f&&e.Worker){var P=new Worker(s.filename);P.onmessage=function(N){k(N.data)},P.postMessage(JSON.stringify({language:w.language,code:w.code,immediateClose:!0}))}else k(s.highlight(w.code,w.grammar,w.language));else k(s.util.encode(w.code))},highlight:function(c,f,m){var v={code:c,grammar:f,language:m};return s.hooks.run("before-tokenize",v),v.tokens=s.tokenize(v.code,v.grammar),s.hooks.run("after-tokenize",v),r.stringify(s.util.encode(v.tokens),v.language)},tokenize:function(c,f){var m=f.rest;if(m){for(var v in m)f[v]=m[v];delete f.rest}var h=new o;return l(h,h.head,c),function y(w,k,P,N,K,$){for(var I in P)if(P.hasOwnProperty(I)&&P[I]){var D=P[I];D=Array.isArray(D)?D:[D];for(var _=0;_<D.length;++_){if($&&$.cause==I+","+_)return;var L=D[_],R=L.inside,B=!!L.lookbehind,se=!!L.greedy,de=L.alias;if(se&&!L.pattern.global){var A=L.pattern.toString().match(/[imsuy]*$/)[0];L.pattern=RegExp(L.pattern.source,A+"g")}for(var E=L.pattern||L,T=N.next,C=K;T!==k.tail&&!($&&C>=$.reach);C+=T.value.length,T=T.next){var x=T.value;if(k.length>w.length)return;if(!(x instanceof r)){var H,U=1;if(se){if(!(H=a(E,C,w,B)))break;var ie=H.index,re=H.index+H[0].length,J=C;for(J+=T.value.length;J<=ie;)T=T.next,J+=T.value.length;if(J-=T.value.length,C=J,T.value instanceof r)continue;for(var M=T;M!==k.tail&&(J<re||typeof M.value=="string");M=M.next)U++,J+=M.value.length;U--,x=w.slice(C,J),H.index-=C}else if(!(H=a(E,0,x,B)))continue;var ie=H.index,V=H[0],ce=x.slice(0,ie),be=x.slice(ie+V.length),Qe=C+x.length;$&&Qe>$.reach&&($.reach=Qe);var Re=T.prev;ce&&(Re=l(k,Re,ce),C+=ce.length),d(k,Re,U);var ni=new r(I,R?s.tokenize(V,R):V,de,V);if(T=l(k,Re,ni),be&&l(k,T,be),1<U){var et={cause:I+","+_,reach:Qe};y(w,k,P,T.prev,C,et),$&&et.reach>$.reach&&($.reach=et.reach)}}}}}}(c,h,f,h.head,0),function(y){for(var w=[],k=y.head.next;k!==y.tail;)w.push(k.value),k=k.next;return w}(h)},hooks:{all:{},add:function(c,f){var m=s.hooks.all;m[c]=m[c]||[],m[c].push(f)},run:function(c,f){var m=s.hooks.all[c];if(m&&m.length)for(var v,h=0;v=m[h++];)v(f)}},Token:r};function r(c,f,m,v){this.type=c,this.content=f,this.alias=m,this.length=0|(v||"").length}function a(c,f,m,v){c.lastIndex=f;var h=c.exec(m);if(h&&v&&h[1]){var y=h[1].length;h.index+=y,h[0]=h[0].slice(y)}return h}function o(){var c={value:null,prev:null,next:null},f={value:null,prev:c,next:null};c.next=f,this.head=c,this.tail=f,this.length=0}function l(c,f,m){var v=f.next,h={value:m,prev:f,next:v};return f.next=h,v.prev=h,c.length++,h}function d(c,f,m){for(var v=f.next,h=0;h<m&&v!==c.tail;h++)v=v.next;(f.next=v).prev=f,c.length-=h}if(e.Prism=s,r.stringify=function c(f,m){if(typeof f=="string")return f;if(Array.isArray(f)){var v="";return f.forEach(function(P){v+=c(P,m)}),v}var h={type:f.type,content:c(f.content,m),tag:"span",classes:["token",f.type],attributes:{},language:m},y=f.alias;y&&(Array.isArray(y)?Array.prototype.push.apply(h.classes,y):h.classes.push(y)),s.hooks.run("wrap",h);var w="";for(var k in h.attributes)w+=" "+k+'="'+(h.attributes[k]||"").replace(/"/g,"&quot;")+'"';return"<"+h.tag+' class="'+h.classes.join(" ")+'"'+w+">"+h.content+"</"+h.tag+">"},!e.document)return e.addEventListener&&(s.disableWorkerMessageHandler||e.addEventListener("message",function(c){var f=JSON.parse(c.data),m=f.language,v=f.code,h=f.immediateClose;e.postMessage(s.highlight(v,s.languages[m],m)),h&&e.close()},!1)),s;var u=s.util.currentScript();function b(){s.manual||s.highlightAll()}if(u&&(s.filename=u.src,u.hasAttribute("data-manual")&&(s.manual=!0)),!s.manual){var g=document.readyState;g==="loading"||g==="interactive"&&u&&u.defer?document.addEventListener("DOMContentLoaded",b):window.requestAnimationFrame?window.requestAnimationFrame(b):window.setTimeout(b,16)}return s}(dn);typeof Ye!="undefined"&&Ye.exports&&(Ye.exports=S),typeof global!="undefined"&&(global.Prism=S);S.languages.markup={comment:/<!--[\s\S]*?-->/,prolog:/<\?[\s\S]+?\?>/,doctype:{pattern:/<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,greedy:!0,inside:{"internal-subset":{pattern:/(\[)[\s\S]+(?=\]>$)/,lookbehind:!0,greedy:!0,inside:null},string:{pattern:/"[^"]*"|'[^']*'/,greedy:!0},punctuation:/^<!|>$|[[\]]/,"doctype-tag":/^DOCTYPE/,name:/[^\s<>'"]+/}},cdata:/<!\[CDATA\[[\s\S]*?]]>/i,tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"special-attr":[],"attr-value":{pattern:/=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,inside:{punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:[{pattern:/&[\da-z]{1,8};/i,alias:"named-entity"},/&#x?[\da-f]{1,8};/i]},S.languages.markup.tag.inside["attr-value"].inside.entity=S.languages.markup.entity,S.languages.markup.doctype.inside["internal-subset"].inside=S.languages.markup,S.hooks.add("wrap",function(e){e.type==="entity"&&(e.attributes.title=e.content.replace(/&amp;/,"&"))}),Object.defineProperty(S.languages.markup.tag,"addInlined",{value:function(e,t){var i={};i["language-"+t]={pattern:/(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,lookbehind:!0,inside:S.languages[t]},i.cdata=/^<!\[CDATA\[|\]\]>$/i;var n={"included-cdata":{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,inside:i}};n["language-"+t]={pattern:/[\s\S]+/,inside:S.languages[t]};var s={};s[e]={pattern:RegExp("(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[^])*?(?=</__>)".replace(/__/g,function(){return e}),"i"),lookbehind:!0,greedy:!0,inside:n},S.languages.insertBefore("markup","cdata",s)}}),Object.defineProperty(S.languages.markup.tag,"addAttribute",{value:function(e,t){S.languages.markup.tag.inside["special-attr"].push({pattern:RegExp(`(^|["'\\s])(?:`+e+`)\\s*=\\s*(?:"[^"]*"|'[^']*'|[^\\s'">=]+(?=[\\s>]))`,"i"),lookbehind:!0,inside:{"attr-name":/^[^\s=]+/,"attr-value":{pattern:/=[\s\S]+/,inside:{value:{pattern:/(=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,lookbehind:!0,alias:[t,"language-"+t],inside:S.languages[t]},punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}}}})}}),S.languages.html=S.languages.markup,S.languages.mathml=S.languages.markup,S.languages.svg=S.languages.markup,S.languages.xml=S.languages.extend("markup",{}),S.languages.ssml=S.languages.xml,S.languages.atom=S.languages.xml,S.languages.rss=S.languages.xml;(function(e){var t=/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/;e.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:/@[\w-](?:[^;{\s]|\s+(?![\s{]))*(?:;|(?=\s*\{))/,inside:{rule:/^@[\w-]+/,"selector-function-argument":{pattern:/(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,lookbehind:!0,alias:"selector"},keyword:{pattern:/(^|[^\w-])(?:and|not|only|or)(?![\w-])/,lookbehind:!0}}},url:{pattern:RegExp("\\burl\\((?:"+t.source+`|(?:[^\\\\\r
()"']|\\\\[^])*)\\)`,"i"),greedy:!0,inside:{function:/^url/i,punctuation:/^\(|\)$/,string:{pattern:RegExp("^"+t.source+"$"),alias:"url"}}},selector:RegExp(`[^{}\\s](?:[^{};"'\\s]|\\s+(?![\\s{])|`+t.source+")*(?=\\s*\\{)"),string:{pattern:t,greedy:!0},property:/(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,important:/!important\b/i,function:/[-a-z0-9]+(?=\()/i,punctuation:/[(){};:,]/},e.languages.css.atrule.inside.rest=e.languages.css;var i=e.languages.markup;i&&(i.tag.addInlined("style","css"),i.tag.addAttribute("style","css"))})(S);S.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0,greedy:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/(\b(?:class|interface|extends|implements|trait|instanceof|new)\s+|\bcatch\s+\()[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,boolean:/\b(?:true|false)\b/,function:/\w+(?=\()/,number:/\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,punctuation:/[{}[\];(),.:]/};S.languages.javascript=S.languages.extend("clike",{"class-name":[S.languages.clike["class-name"],{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:prototype|constructor))/,lookbehind:!0}],keyword:[{pattern:/((?:^|})\s*)catch\b/,lookbehind:!0},{pattern:/(^|[^.]|\.\.\.\s*)\b(?:as|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,lookbehind:!0}],function:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,number:/\b(?:(?:0[xX](?:[\dA-Fa-f](?:_[\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\d(?:_\d)?)+n|NaN|Infinity)\b|(?:\b(?:\d(?:_\d)?)+\.?(?:\d(?:_\d)?)*|\B\.(?:\d(?:_\d)?)+)(?:[Ee][+-]?(?:\d(?:_\d)?)+)?/,operator:/--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/}),S.languages.javascript["class-name"][0].pattern=/(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/,S.languages.insertBefore("javascript","keyword",{regex:{pattern:/((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)\/(?:\[(?:[^\]\\\r\n]|\\.)*]|\\.|[^/\\\[\r\n])+\/[gimyus]{0,6}(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/,lookbehind:!0,greedy:!0,inside:{"regex-source":{pattern:/^(\/)[\s\S]+(?=\/[a-z]*$)/,lookbehind:!0,alias:"language-regex",inside:S.languages.regex},"regex-flags":/[a-z]+$/,"regex-delimiter":/^\/|\/$/}},"function-variable":{pattern:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,alias:"function"},parameter:[{pattern:/(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,lookbehind:!0,inside:S.languages.javascript},{pattern:/(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,inside:S.languages.javascript},{pattern:/(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,lookbehind:!0,inside:S.languages.javascript},{pattern:/((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,lookbehind:!0,inside:S.languages.javascript}],constant:/\b[A-Z](?:[A-Z_]|\dx?)*\b/}),S.languages.insertBefore("javascript","string",{"template-string":{pattern:/`(?:\\[\s\S]|\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|(?!\${)[^\\`])*`/,greedy:!0,inside:{"template-punctuation":{pattern:/^`|`$/,alias:"string"},interpolation:{pattern:/((?:^|[^\\])(?:\\{2})*)\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,lookbehind:!0,inside:{"interpolation-punctuation":{pattern:/^\${|}$/,alias:"punctuation"},rest:S.languages.javascript}},string:/[\s\S]+/}}}),S.languages.markup&&(S.languages.markup.tag.addInlined("script","javascript"),S.languages.markup.tag.addAttribute("on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)","javascript")),S.languages.js=S.languages.javascript;S.languages.elixir={doc:{pattern:/@(?:doc|moduledoc)\s+(?:("""|''')[\s\S]*?\1|("|')(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2)/,inside:{attribute:/^@\w+/,string:/['"][\s\S]+/}},comment:{pattern:/#.*/m,greedy:!0},regex:{pattern:/~[rR](?:("""|''')(?:\\[\s\S]|(?!\1)[^\\])+\1|([\/|"'])(?:\\.|(?!\2)[^\\\r\n])+\2|\((?:\\.|[^\\)\r\n])+\)|\[(?:\\.|[^\\\]\r\n])+\]|\{(?:\\.|[^\\}\r\n])+\}|<(?:\\.|[^\\>\r\n])+>)[uismxfr]*/,greedy:!0},string:[{pattern:/~[cCsSwW](?:("""|''')(?:\\[\s\S]|(?!\1)[^\\])+\1|([\/|"'])(?:\\.|(?!\2)[^\\\r\n])+\2|\((?:\\.|[^\\)\r\n])+\)|\[(?:\\.|[^\\\]\r\n])+\]|\{(?:\\.|#\{[^}]+\}|#(?!\{)|[^#\\}\r\n])+\}|<(?:\\.|[^\\>\r\n])+>)[csa]?/,greedy:!0,inside:{}},{pattern:/("""|''')[\s\S]*?\1/,greedy:!0,inside:{}},{pattern:/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0,inside:{}}],atom:{pattern:/(^|[^:]):\w+/,lookbehind:!0,alias:"symbol"},module:{pattern:/\b[A-Z]\w*\b/,alias:"class-name"},"attr-name":/\w+\??:(?!:)/,argument:{pattern:/(^|[^&])&\d+/,lookbehind:!0,alias:"variable"},attribute:{pattern:/@\w+/,alias:"variable"},function:/\b[_a-zA-Z]\w*[?!]?(?:(?=\s*(?:\.\s*)?\()|(?=\/\d+))/,number:/\b(?:0[box][a-f\d_]+|\d[\d_]*)(?:\.[\d_]+)?(?:e[+-]?[\d_]+)?\b/i,keyword:/\b(?:after|alias|and|case|catch|cond|def(?:callback|exception|impl|module|p|protocol|struct|delegate)?|do|else|end|fn|for|if|import|not|or|raise|require|rescue|try|unless|use|when)\b/,boolean:/\b(?:true|false|nil)\b/,operator:[/\bin\b|&&?|\|[|>]?|\\\\|::|\.\.\.?|\+\+?|-[->]?|<[-=>]|>=|!==?|\B!|=(?:==?|[>~])?|[*\/^]/,{pattern:/([^<])<(?!<)/,lookbehind:!0},{pattern:/([^>])>(?!>)/,lookbehind:!0}],punctuation:/<<|>>|[.,%\[\]{}()]/},S.languages.elixir.string.forEach(function(e){e.inside={interpolation:{pattern:/#\{[^}]+\}/,inside:{delimiter:{pattern:/^#\{|\}$/,alias:"punctuation"},rest:S.languages.elixir}}}});(function(e){var t=e.util.clone(e.languages.elixir),i="(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})";function n(a,o){return a=a.replace(/<S>/g,function(){return"(?:\\s|//.*(?!.)|/\\*(?:[^*]|\\*(?!/))\\*/)"}).replace(/<BRACES>/g,function(){return"(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})"}).replace(/<SPREAD>/g,function(){return i}),RegExp(a,o)}i=n(i).source,e.languages.surface=e.languages.extend("markup",t),e.languages.surface.tag.pattern=n(`</?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:"(?:\\\\[^]|[^\\\\"])*"|'(?:\\\\[^]|[^\\\\'])*'|[^\\s{'"/>=]+|<BRACES>))?|<SPREAD>))*<S>*/?)?>`),e.languages.surface.tag.inside.tag.pattern=/^<\/?[^\s>\/]*/i,e.languages.surface.tag.inside["attr-value"].pattern=/=(?!\{)(?:"(?:\\[^]|[^\\"])*"|'(?:\\[^]|[^\\'])*'|[^\s'">]+)/i,e.languages.surface.tag.inside.tag.inside["class-name"]=/^[A-Z]\w*(?:\.[A-Z]\w*)*$/,e.languages.surface.tag.inside.tag.inside["tag-name"]=/^[a-z]\w*(?:\.[a-z]\w*)*$/,e.languages.surface.tag.inside.comment=t.comment,e.languages.insertBefore("inside","attr-name",{spread:{pattern:n("<SPREAD>"),inside:e.languages.surface}},e.languages.surface.tag),e.languages.insertBefore("inside","special-attr",{script:{pattern:n("=<BRACES>"),inside:{"script-punctuation":{pattern:/^=(?={)/,alias:"punctuation"},rest:e.languages.surface},alias:"language-elixir"}},e.languages.surface.tag),e.languages.insertBefore("elixir","atom",{"embedded-surface":{pattern:/~H(""")[\s\S]*?\1/,greedy:!0,inside:{"embedded-surface-open":{pattern:/^~H"""/,alias:"punctuation"},"embedded-surface-close":{pattern:/"""$/,alias:"punctuation"},surface:{pattern:/[\s\S]+/,inside:e.languages.surface}}},"surface-api":{pattern:/^\s+\b(?:prop|data|slot)\b\s+/,alias:"class-name"}});var s=function(a){return a?typeof a=="string"?a:typeof a.content=="string"?a.content:a.content.map(s).join(""):""},r=function(a,o){o==="surface"&&a.unshift(new e.Token("tag",[new e.Token("tag",[new e.Token("punctuation","<")]),new e.Token("punctuation",">")]));for(var l=[],d=0;d<a.length;d++){var u=a[d],b=!1;if(typeof u!="string"&&(u.type==="tag"&&u.content[0]&&u.content[0].type==="tag"?u.content[0].content[0].content==="</"?0<l.length&&l[l.length-1].tagName===s(u.content[0].content[1])&&l.pop():u.content[u.content.length-1].content==="/>"||l.push({tagName:s(u.content[0].content[1]),openedBraces:0}):0<l.length&&u.type==="punctuation"&&u.content==="{"?l[l.length-1].openedBraces++:0<l.length&&0<l[l.length-1].openedBraces&&u.type==="punctuation"&&u.content==="}"?l[l.length-1].openedBraces--:b=!0),(b||typeof u=="string")&&0<l.length&&l[l.length-1].openedBraces===0){var g=s(u);d<a.length-1&&(typeof a[d+1]=="string"||a[d+1].type==="plain-text")&&(g+=s(a[d+1]),a.splice(d+1,1)),0<d&&(typeof a[d-1]=="string"||a[d-1].type==="plain-text")&&(g=s(a[d-1])+g,a.splice(d-1,1),d--),a[d]=new e.Token("plain-text",g,null,g)}u.content&&typeof u.content!="string"&&r(u.content,u.type)}o==="surface"&&a.shift()};e.hooks.add("after-tokenize",function(a){a.language!=="surface"&&a.language!=="elixir"||r(a.tokens,a.language)})})(S);(function(){if(typeof self!="undefined"&&self.Prism&&self.document&&document.querySelector){var e,t="line-numbers",i="linkable-line-numbers",n=function(){if(e===void 0){var g=document.createElement("div");g.style.fontSize="13px",g.style.lineHeight="1.5",g.style.padding="0",g.style.border="0",g.innerHTML="&nbsp;<br />&nbsp;",document.body.appendChild(g),e=g.offsetHeight===38,document.body.removeChild(g)}return e},s=!0,r=0;S.hooks.add("before-sanity-check",function(g){var c=g.element.parentElement;if(d(c)){var f=0;a(".line-highlight",c).forEach(function(m){f+=m.textContent.length,m.parentNode.removeChild(m)}),f&&/^( \n)+$/.test(g.code.slice(-f))&&(g.code=g.code.slice(0,-f))}}),S.hooks.add("complete",function g(c){var f=c.element.parentElement;if(d(f)){clearTimeout(r);var m=S.plugins.lineNumbers,v=c.plugins&&c.plugins.lineNumbers;o(f,t)&&m&&!v?S.hooks.add("line-numbers",g):(u(f)(),r=setTimeout(b,1))}}),window.addEventListener("hashchange",b),window.addEventListener("resize",function(){a("pre").filter(d).map(function(g){return u(g)}).forEach(l)})}function a(g,c){return Array.prototype.slice.call((c||document).querySelectorAll(g))}function o(g,c){return g.classList.contains(c)}function l(g){g()}function d(g){return!(!g||!/pre/i.test(g.nodeName))&&(!!g.hasAttribute("data-line")||!(!g.id||!S.util.isActive(g,i)))}function u(g,c,f){var m=(c=typeof c=="string"?c:g.getAttribute("data-line")||"").replace(/\s+/g,"").split(",").filter(Boolean),v=+g.getAttribute("data-line-offset")||0,h=(n()?parseInt:parseFloat)(getComputedStyle(g).lineHeight),y=S.util.isActive(g,t),w=g.querySelector("code"),k=y?g:w||g,P=[],N=w&&k!=w?function(I,D){var _=getComputedStyle(I),L=getComputedStyle(D);function R(B){return+B.substr(0,B.length-2)}return D.offsetTop+R(L.borderTopWidth)+R(L.paddingTop)-R(_.paddingTop)}(g,w):0;m.forEach(function(I){var D=I.split("-"),_=+D[0],L=+D[1]||_,R=g.querySelector('.line-highlight[data-range="'+I+'"]')||document.createElement("div");if(P.push(function(){R.setAttribute("aria-hidden","true"),R.setAttribute("data-range",I),R.className=(f||"")+" line-highlight"}),y&&S.plugins.lineNumbers){var B=S.plugins.lineNumbers.getLine(g,_),se=S.plugins.lineNumbers.getLine(g,L);if(B){var de=B.offsetTop+N+"px";P.push(function(){R.style.top=de})}if(se){var A=se.offsetTop-B.offsetTop+se.offsetHeight+"px";P.push(function(){R.style.height=A})}}else P.push(function(){R.setAttribute("data-start",String(_)),_<L&&R.setAttribute("data-end",String(L)),R.style.top=(_-v-1)*h+N+"px",R.textContent=new Array(L-_+2).join(` 
`)});P.push(function(){k.appendChild(R)})});var K=g.id;if(y&&S.util.isActive(g,i)&&K){o(g,i)||P.push(function(){g.classList.add(i)});var $=parseInt(g.getAttribute("data-start")||"1");a(".line-numbers-rows > span",g).forEach(function(I,D){var _=D+$;I.onclick=function(){var L=K+"."+_;s=!1,location.hash=L,setTimeout(function(){s=!0},1)}})}return function(){P.forEach(l)}}function b(){var g=location.hash.slice(1);a(".temporary.line-highlight").forEach(function(v){v.parentNode.removeChild(v)});var c=(g.match(/\.([\d,-]+)$/)||[,""])[1];if(c&&!document.getElementById(g)){var f=g.slice(0,g.lastIndexOf(".")),m=document.getElementById(f);m&&(m.hasAttribute("data-line")||m.setAttribute("data-line",""),u(m,c,"temporary ")(),s&&document.querySelector(".temporary.line-highlight").scrollIntoView())}}})();(function(){if(typeof self!="undefined"&&self.Prism&&self.document){var e="line-numbers",t=/\n(?!$)/g,i=S.plugins.lineNumbers={getLine:function(a,o){if(a.tagName==="PRE"&&a.classList.contains(e)){var l=a.querySelector(".line-numbers-rows");if(l){var d=parseInt(a.getAttribute("data-start"),10)||1,u=d+(l.children.length-1);o<d&&(o=d),u<o&&(o=u);var b=o-d;return l.children[b]}}},resize:function(a){r([a])},assumeViewportIndependence:!0},n=function(a){return a?window.getComputedStyle?getComputedStyle(a):a.currentStyle||null:null},s=void 0;window.addEventListener("resize",function(){i.assumeViewportIndependence&&s===window.innerWidth||(s=window.innerWidth,r(Array.prototype.slice.call(document.querySelectorAll("pre."+e))))}),S.hooks.add("complete",function(a){if(a.code){var o=a.element,l=o.parentNode;if(l&&/pre/i.test(l.nodeName)&&!o.querySelector(".line-numbers-rows")&&S.util.isActive(o,e)){o.classList.remove(e),l.classList.add(e);var d,u=a.code.match(t),b=u?u.length+1:1,g=new Array(b+1).join("<span></span>");(d=document.createElement("span")).setAttribute("aria-hidden","true"),d.className="line-numbers-rows",d.innerHTML=g,l.hasAttribute("data-start")&&(l.style.counterReset="linenumber "+(parseInt(l.getAttribute("data-start"),10)-1)),a.element.appendChild(d),r([l]),S.hooks.run("line-numbers",a)}}}),S.hooks.add("line-numbers",function(a){a.plugins=a.plugins||{},a.plugins.lineNumbers=!0})}function r(a){if((a=a.filter(function(l){var d=n(l)["white-space"];return d==="pre-wrap"||d==="pre-line"})).length!=0){var o=a.map(function(l){var d=l.querySelector("code"),u=l.querySelector(".line-numbers-rows");if(d&&u){var b=l.querySelector(".line-numbers-sizer"),g=d.textContent.split(t);b||((b=document.createElement("span")).className="line-numbers-sizer",d.appendChild(b)),b.innerHTML="0",b.style.display="block";var c=b.getBoundingClientRect().height;return b.innerHTML="",{element:l,lines:g,lineHeights:[],oneLinerHeight:c,sizer:b}}}).filter(Boolean);o.forEach(function(l){var d=l.sizer,u=l.lines,b=l.lineHeights,g=l.oneLinerHeight;b[u.length-1]=void 0,u.forEach(function(c,f){if(c&&1<c.length){var m=d.appendChild(document.createElement("span"));m.style.display="block",m.textContent=c}else b[f]=g})}),o.forEach(function(l){for(var d=l.sizer,u=l.lineHeights,b=0,g=0;g<u.length;g++)u[g]===void 0&&(u[g]=d.children[b++].getBoundingClientRect().height)}),o.forEach(function(l){var d=l.sizer,u=l.element.querySelector(".line-numbers-rows");d.style.display="none",d.innerHTML="",l.lineHeights.forEach(function(b,g){u.children[g].style.height=b+"px"})})}}})()});(function(){var e=t();function t(){if(typeof window.CustomEvent=="function")return window.CustomEvent;function s(r,a){a=a||{bubbles:!1,cancelable:!1,detail:void 0};var o=document.createEvent("CustomEvent");return o.initCustomEvent(r,a.bubbles,a.cancelable,a.detail),o}return s.prototype=window.Event.prototype,s}function i(s,r){var a=document.createElement("input");return a.type="hidden",a.name=s,a.value=r,a}function n(s,r){var a=s.getAttribute("data-to"),o=i("_method",s.getAttribute("data-method")),l=i("_csrf_token",s.getAttribute("data-csrf")),d=document.createElement("form"),u=document.createElement("input"),b=s.getAttribute("target");d.method=s.getAttribute("data-method")==="get"?"get":"post",d.action=a,d.style.display="none",b?d.target=b:r&&(d.target="_blank"),d.appendChild(l),d.appendChild(o),document.body.appendChild(d),u.type="submit",d.appendChild(u),u.click()}window.addEventListener("click",function(s){var r=s.target;if(!s.defaultPrevented)for(;r&&r.getAttribute;){var a=new e("phoenix.link.click",{bubbles:!0,cancelable:!0});if(!r.dispatchEvent(a))return s.preventDefault(),s.stopImmediatePropagation(),!1;if(r.getAttribute("data-method"))return n(r,s.metaKey||s.shiftKey),s.preventDefault(),!1;r=r.parentNode}},!1),window.addEventListener("phoenix.link.click",function(s){var r=s.target.getAttribute("data-confirm");r&&!window.confirm(r)&&s.preventDefault()},!1)})();var Se=e=>typeof e=="function"?e:function(){return e},ci=typeof self!="undefined"?self:null,we=typeof window!="undefined"?window:null,ke=ci||we||ke,ui="2.0.0",G={connecting:0,open:1,closing:2,closed:3},fi=1e4,pi=1e3,z={closed:"closed",errored:"errored",joined:"joined",joining:"joining",leaving:"leaving"},ne={close:"phx_close",error:"phx_error",join:"phx_join",reply:"phx_reply",leave:"phx_leave"},st={longpoll:"longpoll",websocket:"websocket"},gi={complete:4},De=class{constructor(e,t,i,n){this.channel=e,this.event=t,this.payload=i||function(){return{}},this.receivedResp=null,this.timeout=n,this.timeoutTimer=null,this.recHooks=[],this.sent=!1}resend(e){this.timeout=e,this.reset(),this.send()}send(){this.hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload(),ref:this.ref,join_ref:this.channel.joinRef()}))}receive(e,t){return this.hasReceived(e)&&t(this.receivedResp.response),this.recHooks.push({status:e,callback:t}),this}reset(){this.cancelRefEvent(),this.ref=null,this.refEvent=null,this.receivedResp=null,this.sent=!1}matchReceive({status:e,response:t,_ref:i}){this.recHooks.filter(n=>n.status===e).forEach(n=>n.callback(t))}cancelRefEvent(){!this.refEvent||this.channel.off(this.refEvent)}cancelTimeout(){clearTimeout(this.timeoutTimer),this.timeoutTimer=null}startTimeout(){this.timeoutTimer&&this.cancelTimeout(),this.ref=this.channel.socket.makeRef(),this.refEvent=this.channel.replyEventName(this.ref),this.channel.on(this.refEvent,e=>{this.cancelRefEvent(),this.cancelTimeout(),this.receivedResp=e,this.matchReceive(e)}),this.timeoutTimer=setTimeout(()=>{this.trigger("timeout",{})},this.timeout)}hasReceived(e){return this.receivedResp&&this.receivedResp.status===e}trigger(e,t){this.channel.trigger(this.refEvent,{status:e,response:t})}},Et=class{constructor(e,t){this.callback=e,this.timerCalc=t,this.timer=null,this.tries=0}reset(){this.tries=0,clearTimeout(this.timer)}scheduleTimeout(){clearTimeout(this.timer),this.timer=setTimeout(()=>{this.tries=this.tries+1,this.callback()},this.timerCalc(this.tries+1))}},mi=class{constructor(e,t,i){this.state=z.closed,this.topic=e,this.params=Se(t||{}),this.socket=i,this.bindings=[],this.bindingRef=0,this.timeout=this.socket.timeout,this.joinedOnce=!1,this.joinPush=new De(this,ne.join,this.params,this.timeout),this.pushBuffer=[],this.stateChangeRefs=[],this.rejoinTimer=new Et(()=>{this.socket.isConnected()&&this.rejoin()},this.socket.rejoinAfterMs),this.stateChangeRefs.push(this.socket.onError(()=>this.rejoinTimer.reset())),this.stateChangeRefs.push(this.socket.onOpen(()=>{this.rejoinTimer.reset(),this.isErrored()&&this.rejoin()})),this.joinPush.receive("ok",()=>{this.state=z.joined,this.rejoinTimer.reset(),this.pushBuffer.forEach(n=>n.send()),this.pushBuffer=[]}),this.joinPush.receive("error",()=>{this.state=z.errored,this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.onClose(()=>{this.rejoinTimer.reset(),this.socket.hasLogger()&&this.socket.log("channel",`close ${this.topic} ${this.joinRef()}`),this.state=z.closed,this.socket.remove(this)}),this.onError(n=>{this.socket.hasLogger()&&this.socket.log("channel",`error ${this.topic}`,n),this.isJoining()&&this.joinPush.reset(),this.state=z.errored,this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.joinPush.receive("timeout",()=>{this.socket.hasLogger()&&this.socket.log("channel",`timeout ${this.topic} (${this.joinRef()})`,this.joinPush.timeout),new De(this,ne.leave,Se({}),this.timeout).send(),this.state=z.errored,this.joinPush.reset(),this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.on(ne.reply,(n,s)=>{this.trigger(this.replyEventName(s),n)})}join(e=this.timeout){if(this.joinedOnce)throw new Error("tried to join multiple times. 'join' can only be called a single time per channel instance");return this.timeout=e,this.joinedOnce=!0,this.rejoin(),this.joinPush}onClose(e){this.on(ne.close,e)}onError(e){return this.on(ne.error,t=>e(t))}on(e,t){let i=this.bindingRef++;return this.bindings.push({event:e,ref:i,callback:t}),i}off(e,t){this.bindings=this.bindings.filter(i=>!(i.event===e&&(typeof t=="undefined"||t===i.ref)))}canPush(){return this.socket.isConnected()&&this.isJoined()}push(e,t,i=this.timeout){if(t=t||{},!this.joinedOnce)throw new Error(`tried to push '${e}' to '${this.topic}' before joining. Use channel.join() before pushing events`);let n=new De(this,e,function(){return t},i);return this.canPush()?n.send():(n.startTimeout(),this.pushBuffer.push(n)),n}leave(e=this.timeout){this.rejoinTimer.reset(),this.joinPush.cancelTimeout(),this.state=z.leaving;let t=()=>{this.socket.hasLogger()&&this.socket.log("channel",`leave ${this.topic}`),this.trigger(ne.close,"leave")},i=new De(this,ne.leave,Se({}),e);return i.receive("ok",()=>t()).receive("timeout",()=>t()),i.send(),this.canPush()||i.trigger("ok",{}),i}onMessage(e,t,i){return t}isMember(e,t,i,n){return this.topic!==e?!1:n&&n!==this.joinRef()?(this.socket.hasLogger()&&this.socket.log("channel","dropping outdated message",{topic:e,event:t,payload:i,joinRef:n}),!1):!0}joinRef(){return this.joinPush.ref}rejoin(e=this.timeout){this.isLeaving()||(this.socket.leaveOpenTopic(this.topic),this.state=z.joining,this.joinPush.resend(e))}trigger(e,t,i,n){let s=this.onMessage(e,t,i,n);if(t&&!s)throw new Error("channel onMessage callbacks must return the payload, modified or unmodified");let r=this.bindings.filter(a=>a.event===e);for(let a=0;a<r.length;a++)r[a].callback(s,i,n||this.joinRef())}replyEventName(e){return`chan_reply_${e}`}isClosed(){return this.state===z.closed}isErrored(){return this.state===z.errored}isJoined(){return this.state===z.joined}isJoining(){return this.state===z.joining}isLeaving(){return this.state===z.leaving}},Fe=class{static request(e,t,i,n,s,r,a){if(ke.XDomainRequest){let o=new ke.XDomainRequest;return this.xdomainRequest(o,e,t,n,s,r,a)}else{let o=new ke.XMLHttpRequest;return this.xhrRequest(o,e,t,i,n,s,r,a)}}static xdomainRequest(e,t,i,n,s,r,a){return e.timeout=s,e.open(t,i),e.onload=()=>{let o=this.parseJSON(e.responseText);a&&a(o)},r&&(e.ontimeout=r),e.onprogress=()=>{},e.send(n),e}static xhrRequest(e,t,i,n,s,r,a,o){return e.open(t,i,!0),e.timeout=r,e.setRequestHeader("Content-Type",n),e.onerror=()=>o&&o(null),e.onreadystatechange=()=>{if(e.readyState===gi.complete&&o){let l=this.parseJSON(e.responseText);o(l)}},a&&(e.ontimeout=a),e.send(s),e}static parseJSON(e){if(!e||e==="")return null;try{return JSON.parse(e)}catch(t){return console&&console.log("failed to parse JSON response",e),null}}static serialize(e,t){let i=[];for(var n in e){if(!Object.prototype.hasOwnProperty.call(e,n))continue;let s=t?`${t}[${n}]`:n,r=e[n];typeof r=="object"?i.push(this.serialize(r,s)):i.push(encodeURIComponent(s)+"="+encodeURIComponent(r))}return i.join("&")}static appendParams(e,t){if(Object.keys(t).length===0)return e;let i=e.match(/\?/)?"&":"?";return`${e}${i}${this.serialize(t)}`}},nt=class{constructor(e){this.endPoint=null,this.token=null,this.skipHeartbeat=!0,this.reqs=new Set,this.awaitingBatchAck=!1,this.currentBatch=null,this.currentBatchTimer=null,this.batchBuffer=[],this.onopen=function(){},this.onerror=function(){},this.onmessage=function(){},this.onclose=function(){},this.pollEndpoint=this.normalizeEndpoint(e),this.readyState=G.connecting,this.poll()}normalizeEndpoint(e){return e.replace("ws://","http://").replace("wss://","https://").replace(new RegExp("(.*)/"+st.websocket),"$1/"+st.longpoll)}endpointURL(){return Fe.appendParams(this.pollEndpoint,{token:this.token})}closeAndRetry(e,t,i){this.close(e,t,i),this.readyState=G.connecting}ontimeout(){this.onerror("timeout"),this.closeAndRetry(1005,"timeout",!1)}isActive(){return this.readyState===G.open||this.readyState===G.connecting}poll(){this.ajax("GET","application/json",null,()=>this.ontimeout(),e=>{if(e){var{status:t,token:i,messages:n}=e;this.token=i}else t=0;switch(t){case 200:n.forEach(s=>{setTimeout(()=>this.onmessage({data:s}),0)}),this.poll();break;case 204:this.poll();break;case 410:this.readyState=G.open,this.onopen({}),this.poll();break;case 403:this.onerror(403),this.close(1008,"forbidden",!1);break;case 0:case 500:this.onerror(500),this.closeAndRetry(1011,"internal server error",500);break;default:throw new Error(`unhandled poll status ${t}`)}})}send(e){this.currentBatch?this.currentBatch.push(e):this.awaitingBatchAck?this.batchBuffer.push(e):(this.currentBatch=[e],this.currentBatchTimer=setTimeout(()=>{this.batchSend(this.currentBatch),this.currentBatch=null},0))}batchSend(e){this.awaitingBatchAck=!0,this.ajax("POST","application/x-ndjson",e.join(`
`),()=>this.onerror("timeout"),t=>{this.awaitingBatchAck=!1,!t||t.status!==200?(this.onerror(t&&t.status),this.closeAndRetry(1011,"internal server error",!1)):this.batchBuffer.length>0&&(this.batchSend(this.batchBuffer),this.batchBuffer=[])})}close(e,t,i){for(let s of this.reqs)s.abort();this.readyState=G.closed;let n=Object.assign({code:1e3,reason:void 0,wasClean:!0},{code:e,reason:t,wasClean:i});this.batchBuffer=[],clearTimeout(this.currentBatchTimer),this.currentBatchTimer=null,typeof CloseEvent!="undefined"?this.onclose(new CloseEvent("close",n)):this.onclose(n)}ajax(e,t,i,n,s){let r,a=()=>{this.reqs.delete(r),n()};r=Fe.request(e,this.endpointURL(),t,i,this.timeout,a,o=>{this.reqs.delete(r),this.isActive()&&s(o)}),this.reqs.add(r)}};var Oe={HEADER_LENGTH:1,META_LENGTH:4,KINDS:{push:0,reply:1,broadcast:2},encode(e,t){if(e.payload.constructor===ArrayBuffer)return t(this.binaryEncode(e));{let i=[e.join_ref,e.ref,e.topic,e.event,e.payload];return t(JSON.stringify(i))}},decode(e,t){if(e.constructor===ArrayBuffer)return t(this.binaryDecode(e));{let[i,n,s,r,a]=JSON.parse(e);return t({join_ref:i,ref:n,topic:s,event:r,payload:a})}},binaryEncode(e){let{join_ref:t,ref:i,event:n,topic:s,payload:r}=e,a=this.META_LENGTH+t.length+i.length+s.length+n.length,o=new ArrayBuffer(this.HEADER_LENGTH+a),l=new DataView(o),d=0;l.setUint8(d++,this.KINDS.push),l.setUint8(d++,t.length),l.setUint8(d++,i.length),l.setUint8(d++,s.length),l.setUint8(d++,n.length),Array.from(t,b=>l.setUint8(d++,b.charCodeAt(0))),Array.from(i,b=>l.setUint8(d++,b.charCodeAt(0))),Array.from(s,b=>l.setUint8(d++,b.charCodeAt(0))),Array.from(n,b=>l.setUint8(d++,b.charCodeAt(0)));var u=new Uint8Array(o.byteLength+r.byteLength);return u.set(new Uint8Array(o),0),u.set(new Uint8Array(r),o.byteLength),u.buffer},binaryDecode(e){let t=new DataView(e),i=t.getUint8(0),n=new TextDecoder;switch(i){case this.KINDS.push:return this.decodePush(e,t,n);case this.KINDS.reply:return this.decodeReply(e,t,n);case this.KINDS.broadcast:return this.decodeBroadcast(e,t,n)}},decodePush(e,t,i){let n=t.getUint8(1),s=t.getUint8(2),r=t.getUint8(3),a=this.HEADER_LENGTH+this.META_LENGTH-1,o=i.decode(e.slice(a,a+n));a=a+n;let l=i.decode(e.slice(a,a+s));a=a+s;let d=i.decode(e.slice(a,a+r));a=a+r;let u=e.slice(a,e.byteLength);return{join_ref:o,ref:null,topic:l,event:d,payload:u}},decodeReply(e,t,i){let n=t.getUint8(1),s=t.getUint8(2),r=t.getUint8(3),a=t.getUint8(4),o=this.HEADER_LENGTH+this.META_LENGTH,l=i.decode(e.slice(o,o+n));o=o+n;let d=i.decode(e.slice(o,o+s));o=o+s;let u=i.decode(e.slice(o,o+r));o=o+r;let b=i.decode(e.slice(o,o+a));o=o+a;let g=e.slice(o,e.byteLength),c={status:b,response:g};return{join_ref:l,ref:d,topic:u,event:ne.reply,payload:c}},decodeBroadcast(e,t,i){let n=t.getUint8(1),s=t.getUint8(2),r=this.HEADER_LENGTH+2,a=i.decode(e.slice(r,r+n));r=r+n;let o=i.decode(e.slice(r,r+s));r=r+s;let l=e.slice(r,e.byteLength);return{join_ref:null,ref:null,topic:a,event:o,payload:l}}},Ct=class{constructor(e,t={}){this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.channels=[],this.sendBuffer=[],this.ref=0,this.timeout=t.timeout||fi,this.transport=t.transport||ke.WebSocket||nt,this.establishedConnections=0,this.defaultEncoder=Oe.encode.bind(Oe),this.defaultDecoder=Oe.decode.bind(Oe),this.closeWasClean=!1,this.binaryType=t.binaryType||"arraybuffer",this.connectClock=1,this.transport!==nt?(this.encode=t.encode||this.defaultEncoder,this.decode=t.decode||this.defaultDecoder):(this.encode=this.defaultEncoder,this.decode=this.defaultDecoder);let i=null;we&&we.addEventListener&&(we.addEventListener("pagehide",n=>{this.conn&&(this.disconnect(),i=this.connectClock)}),we.addEventListener("pageshow",n=>{i===this.connectClock&&(i=null,this.connect())})),this.heartbeatIntervalMs=t.heartbeatIntervalMs||3e4,this.rejoinAfterMs=n=>t.rejoinAfterMs?t.rejoinAfterMs(n):[1e3,2e3,5e3][n-1]||1e4,this.reconnectAfterMs=n=>t.reconnectAfterMs?t.reconnectAfterMs(n):[10,50,100,150,200,250,500,1e3,2e3][n-1]||5e3,this.logger=t.logger||null,this.longpollerTimeout=t.longpollerTimeout||2e4,this.params=Se(t.params||{}),this.endPoint=`${e}/${st.websocket}`,this.vsn=t.vsn||ui,this.heartbeatTimeoutTimer=null,this.heartbeatTimer=null,this.pendingHeartbeatRef=null,this.reconnectTimer=new Et(()=>{this.teardown(()=>this.connect())},this.reconnectAfterMs)}getLongPollTransport(){return nt}replaceTransport(e){this.connectClock++,this.closeWasClean=!0,this.reconnectTimer.reset(),this.sendBuffer=[],this.conn&&(this.conn.close(),this.conn=null),this.transport=e}protocol(){return location.protocol.match(/^https/)?"wss":"ws"}endPointURL(){let e=Fe.appendParams(Fe.appendParams(this.endPoint,this.params()),{vsn:this.vsn});return e.charAt(0)!=="/"?e:e.charAt(1)==="/"?`${this.protocol()}:${e}`:`${this.protocol()}://${location.host}${e}`}disconnect(e,t,i){this.connectClock++,this.closeWasClean=!0,this.reconnectTimer.reset(),this.teardown(e,t,i)}connect(e){e&&(console&&console.log("passing params to connect is deprecated. Instead pass :params to the Socket constructor"),this.params=Se(e)),!this.conn&&(this.connectClock++,this.closeWasClean=!1,this.conn=new this.transport(this.endPointURL()),this.conn.binaryType=this.binaryType,this.conn.timeout=this.longpollerTimeout,this.conn.onopen=()=>this.onConnOpen(),this.conn.onerror=t=>this.onConnError(t),this.conn.onmessage=t=>this.onConnMessage(t),this.conn.onclose=t=>this.onConnClose(t))}log(e,t,i){this.logger(e,t,i)}hasLogger(){return this.logger!==null}onOpen(e){let t=this.makeRef();return this.stateChangeCallbacks.open.push([t,e]),t}onClose(e){let t=this.makeRef();return this.stateChangeCallbacks.close.push([t,e]),t}onError(e){let t=this.makeRef();return this.stateChangeCallbacks.error.push([t,e]),t}onMessage(e){let t=this.makeRef();return this.stateChangeCallbacks.message.push([t,e]),t}ping(e){if(!this.isConnected())return!1;let t=this.makeRef(),i=Date.now();this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:t});let n=this.onMessage(s=>{s.ref===t&&(this.off([n]),e(Date.now()-i))});return!0}clearHeartbeats(){clearTimeout(this.heartbeatTimer),clearTimeout(this.heartbeatTimeoutTimer)}onConnOpen(){this.hasLogger()&&this.log("transport",`connected to ${this.endPointURL()}`),this.closeWasClean=!1,this.establishedConnections++,this.flushSendBuffer(),this.reconnectTimer.reset(),this.resetHeartbeat(),this.stateChangeCallbacks.open.forEach(([,e])=>e())}heartbeatTimeout(){this.pendingHeartbeatRef&&(this.pendingHeartbeatRef=null,this.hasLogger()&&this.log("transport","heartbeat timeout. Attempting to re-establish connection"),this.triggerChanError(),this.closeWasClean=!1,this.teardown(()=>this.reconnectTimer.scheduleTimeout(),pi,"heartbeat timeout"))}resetHeartbeat(){this.conn&&this.conn.skipHeartbeat||(this.pendingHeartbeatRef=null,this.clearHeartbeats(),this.heartbeatTimer=setTimeout(()=>this.sendHeartbeat(),this.heartbeatIntervalMs))}teardown(e,t,i){if(!this.conn)return e&&e();this.waitForBufferDone(()=>{this.conn&&(t?this.conn.close(t,i||""):this.conn.close()),this.waitForSocketClosed(()=>{this.conn&&(this.conn.onopen=function(){},this.conn.onerror=function(){},this.conn.onmessage=function(){},this.conn.onclose=function(){},this.conn=null),e&&e()})})}waitForBufferDone(e,t=1){if(t===5||!this.conn||!this.conn.bufferedAmount){e();return}setTimeout(()=>{this.waitForBufferDone(e,t+1)},150*t)}waitForSocketClosed(e,t=1){if(t===5||!this.conn||this.conn.readyState===G.closed){e();return}setTimeout(()=>{this.waitForSocketClosed(e,t+1)},150*t)}onConnClose(e){let t=e&&e.code;this.hasLogger()&&this.log("transport","close",e),this.triggerChanError(),this.clearHeartbeats(),!this.closeWasClean&&t!==1e3&&this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach(([,i])=>i(e))}onConnError(e){this.hasLogger()&&this.log("transport",e);let t=this.transport,i=this.establishedConnections;this.stateChangeCallbacks.error.forEach(([,n])=>{n(e,t,i)}),(t===this.transport||i>0)&&this.triggerChanError()}triggerChanError(){this.channels.forEach(e=>{e.isErrored()||e.isLeaving()||e.isClosed()||e.trigger(ne.error)})}connectionState(){switch(this.conn&&this.conn.readyState){case G.connecting:return"connecting";case G.open:return"open";case G.closing:return"closing";default:return"closed"}}isConnected(){return this.connectionState()==="open"}remove(e){this.off(e.stateChangeRefs),this.channels=this.channels.filter(t=>t.joinRef()!==e.joinRef())}off(e){for(let t in this.stateChangeCallbacks)this.stateChangeCallbacks[t]=this.stateChangeCallbacks[t].filter(([i])=>e.indexOf(i)===-1)}channel(e,t={}){let i=new mi(e,t,this);return this.channels.push(i),i}push(e){if(this.hasLogger()){let{topic:t,event:i,payload:n,ref:s,join_ref:r}=e;this.log("push",`${t} ${i} (${r}, ${s})`,n)}this.isConnected()?this.encode(e,t=>this.conn.send(t)):this.sendBuffer.push(()=>this.encode(e,t=>this.conn.send(t)))}makeRef(){let e=this.ref+1;return e===this.ref?this.ref=0:this.ref=e,this.ref.toString()}sendHeartbeat(){this.pendingHeartbeatRef&&!this.isConnected()||(this.pendingHeartbeatRef=this.makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef}),this.heartbeatTimeoutTimer=setTimeout(()=>this.heartbeatTimeout(),this.heartbeatIntervalMs))}flushSendBuffer(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach(e=>e()),this.sendBuffer=[])}onConnMessage(e){this.decode(e.data,t=>{let{topic:i,event:n,payload:s,ref:r,join_ref:a}=t;r&&r===this.pendingHeartbeatRef&&(this.clearHeartbeats(),this.pendingHeartbeatRef=null,this.heartbeatTimer=setTimeout(()=>this.sendHeartbeat(),this.heartbeatIntervalMs)),this.hasLogger()&&this.log("receive",`${s.status||""} ${i} ${n} ${r&&"("+r+")"||""}`,s);for(let o=0;o<this.channels.length;o++){let l=this.channels[o];!l.isMember(i,n,s,a)||l.trigger(n,s,r,a)}for(let o=0;o<this.stateChangeCallbacks.message.length;o++){let[,l]=this.stateChangeCallbacks.message[o];l(t)}})}leaveOpenTopic(e){let t=this.channels.find(i=>i.topic===e&&(i.isJoined()||i.isJoining()));t&&(this.hasLogger()&&this.log("transport",`leaving duplicate topic "${e}"`),t.leave())}};var qt="consecutive-reloads",vi=10,bi=5e3,yi=1e4,wi=3e4,Wt=["phx-click-loading","phx-change-loading","phx-submit-loading","phx-keydown-loading","phx-keyup-loading","phx-blur-loading","phx-focus-loading"],W="data-phx-component",rt="data-phx-link",Si="track-static",ki="data-phx-link-state",te="data-phx-ref",ue="data-phx-ref-src",Xt="track-uploads",fe="data-phx-upload-ref",yt="data-phx-preflighted-refs",Ai="data-phx-done-refs",Tt="drop-target",gt="data-phx-active-refs",qe="phx:live-file:updated",mt="data-phx-skip",_t="data-phx-prune",xt="page-loading",Pt="phx-connected",at="phx-loading",ot="phx-no-feedback",Lt="phx-error",pe="data-phx-parent-id",wt="data-phx-main",Le="data-phx-root-id",Ei="trigger-action",Xe="feedback-for",vt="phx-has-focused",Ci=["text","textarea","number","email","password","search","tel","url","date","time","datetime-local","color","range"],Kt=["checkbox","radio"],Ke="phx-has-submitted",he="data-phx-session",me=`[${he}]`,Rt="data-phx-sticky",xe="data-phx-static",lt="data-phx-readonly",He="data-phx-disabled",bt="disable-with",Ne="data-phx-disable-with-restore",Ae="hook",Ti="debounce",_i="throttle",Ge="update",ht="stream",xi="key",Y="phxPrivate",It="auto-recover",$e="phx:live-socket:debug",dt="phx:live-socket:profiling",ct="phx:live-socket:latency-sim",Pi="progress",Dt="mounted",Li=1,Ri=200,Ii="phx-",Di=3e4,Ee="debounce-trigger",Me="throttled",Ot="debounce-prev-key",Oi={debounce:300,throttle:300},je="d",Z="s",q="c",Ft="e",Ht="r",Nt="t",Fi="p",Hi="stream",Ni=class{constructor(e,t,i){this.liveSocket=i,this.entry=e,this.offset=0,this.chunkSize=t,this.chunkTimer=null,this.uploadChannel=i.channel(`lvu:${e.ref}`,{token:e.metadata()})}error(e){clearTimeout(this.chunkTimer),this.uploadChannel.leave(),this.entry.error(e)}upload(){this.uploadChannel.onError(e=>this.error(e)),this.uploadChannel.join().receive("ok",e=>this.readNextChunk()).receive("error",e=>this.error(e))}isDone(){return this.offset>=this.entry.file.size}readNextChunk(){let e=new window.FileReader,t=this.entry.file.slice(this.offset,this.chunkSize+this.offset);e.onload=i=>{if(i.target.error===null)this.offset+=i.target.result.byteLength,this.pushChunk(i.target.result);else return F("Read error: "+i.target.error)},e.readAsArrayBuffer(t)}pushChunk(e){!this.uploadChannel.isJoined()||this.uploadChannel.push("chunk",e).receive("ok",()=>{this.entry.progress(this.offset/this.entry.file.size*100),this.isDone()||(this.chunkTimer=setTimeout(()=>this.readNextChunk(),this.liveSocket.getLatencySim()||0))})}},F=(e,t)=>console.error&&console.error(e,t),oe=e=>{let t=typeof e;return t==="number"||t==="string"&&/^(0|[1-9]\d*)$/.test(e)};function $i(){let e=new Set,t=document.querySelectorAll("*[id]");for(let i=0,n=t.length;i<n;i++)e.has(t[i].id)?console.error(`Multiple IDs detected: ${t[i].id}. Ensure unique element ids.`):e.add(t[i].id)}var Mi=(e,t,i,n)=>{e.liveSocket.isDebugEnabled()&&console.log(`${e.id} ${t}: ${i} - `,n)},ut=e=>typeof e=="function"?e:function(){return e},We=e=>JSON.parse(JSON.stringify(e)),Pe=(e,t,i)=>{do{if(e.matches(`[${t}]`)&&!e.disabled)return e;e=e.parentElement||e.parentNode}while(e!==null&&e.nodeType===1&&!(i&&i.isSameNode(e)||e.matches(me)));return null},Ce=e=>e!==null&&typeof e=="object"&&!(e instanceof Array),ji=(e,t)=>JSON.stringify(e)===JSON.stringify(t),$t=e=>{for(let t in e)return!1;return!0},le=(e,t)=>e&&t(e),Bi=function(e,t,i,n){e.forEach(s=>{new Ni(s,i.config.chunk_size,n).upload()})},Gt={canPushState(){return typeof history.pushState!="undefined"},dropLocal(e,t,i){return e.removeItem(this.localKey(t,i))},updateLocal(e,t,i,n,s){let r=this.getLocal(e,t,i),a=this.localKey(t,i),o=r===null?n:s(r);return e.setItem(a,JSON.stringify(o)),o},getLocal(e,t,i){return JSON.parse(e.getItem(this.localKey(t,i)))},updateCurrentState(e){!this.canPushState()||history.replaceState(e(history.state||{}),"",window.location.href)},pushState(e,t,i){if(this.canPushState()){if(i!==window.location.href){if(t.type=="redirect"&&t.scroll){let s=history.state||{};s.scroll=t.scroll,history.replaceState(s,"",window.location.href)}delete t.scroll,history[e+"State"](t,"",i||null);let n=this.getHashTargetEl(window.location.hash);n?n.scrollIntoView():t.type==="redirect"&&window.scroll(0,0)}}else this.redirect(i)},setCookie(e,t){document.cookie=`${e}=${t}`},getCookie(e){return document.cookie.replace(new RegExp(`(?:(?:^|.*;s*)${e}s*=s*([^;]*).*$)|^.*$`),"$1")},redirect(e,t){t&&Gt.setCookie("__phoenix_flash__",t+"; max-age=60000; path=/"),window.location=e},localKey(e,t){return`${e}-${t}`},getHashTargetEl(e){let t=e.toString().substring(1);if(t!=="")return document.getElementById(t)||document.querySelector(`a[name="${t}"]`)}},Q=Gt,X={byId(e){return document.getElementById(e)||F(`no id found for ${e}`)},removeClass(e,t){e.classList.remove(t),e.classList.length===0&&e.removeAttribute("class")},all(e,t,i){if(!e)return[];let n=Array.from(e.querySelectorAll(t));return i?n.forEach(i):n},childNodeLength(e){let t=document.createElement("template");return t.innerHTML=e,t.content.childElementCount},isUploadInput(e){return e.type==="file"&&e.getAttribute(fe)!==null},findUploadInputs(e){return this.all(e,`input[type="file"][${fe}]`)},findComponentNodeList(e,t){return this.filterWithinSameLiveView(this.all(e,`[${W}="${t}"]`),e)},isPhxDestroyed(e){return!!(e.id&&X.private(e,"destroyed"))},wantsNewTab(e){return e.ctrlKey||e.shiftKey||e.metaKey||e.button&&e.button===1||e.target.getAttribute("target")==="_blank"},isUnloadableFormSubmit(e){return!e.defaultPrevented&&!this.wantsNewTab(e)},isNewPageHref(e,t){let i;try{i=new URL(e)}catch(n){try{i=new URL(e,t)}catch(s){return!0}}return i.host===t.host&&i.protocol===t.protocol&&i.pathname===t.pathname&&i.search===t.search?i.hash===""&&!i.href.endsWith("#"):!0},markPhxChildDestroyed(e){this.isPhxChild(e)&&e.setAttribute(he,""),this.putPrivate(e,"destroyed",!0)},findPhxChildrenInFragment(e,t){let i=document.createElement("template");return i.innerHTML=e,this.findPhxChildren(i.content,t)},isIgnored(e,t){return(e.getAttribute(t)||e.getAttribute("data-phx-update"))==="ignore"},isPhxUpdate(e,t,i){return e.getAttribute&&i.indexOf(e.getAttribute(t))>=0},findPhxSticky(e){return this.all(e,`[${Rt}]`)},findPhxChildren(e,t){return this.all(e,`${me}[${pe}="${t}"]`)},findParentCIDs(e,t){let i=new Set(t),n=t.reduce((s,r)=>{let a=`[${W}="${r}"] [${W}]`;return this.filterWithinSameLiveView(this.all(e,a),e).map(o=>parseInt(o.getAttribute(W))).forEach(o=>s.delete(o)),s},i);return n.size===0?new Set(t):n},filterWithinSameLiveView(e,t){return t.querySelector(me)?e.filter(i=>this.withinSameLiveView(i,t)):e},withinSameLiveView(e,t){for(;e=e.parentNode;){if(e.isSameNode(t))return!0;if(e.getAttribute(he)!==null)return!1}},private(e,t){return e[Y]&&e[Y][t]},deletePrivate(e,t){e[Y]&&delete e[Y][t]},putPrivate(e,t,i){e[Y]||(e[Y]={}),e[Y][t]=i},updatePrivate(e,t,i,n){let s=this.private(e,t);s===void 0?this.putPrivate(e,t,n(i)):this.putPrivate(e,t,n(s))},copyPrivates(e,t){t[Y]&&(e[Y]=t[Y])},putTitle(e){let t=document.querySelector("title");if(t){let{prefix:i,suffix:n}=t.dataset;document.title=`${i||""}${e}${n||""}`}else document.title=e},debounce(e,t,i,n,s,r,a,o){let l=e.getAttribute(i),d=e.getAttribute(s);l===""&&(l=n),d===""&&(d=r);let u=l||d;switch(u){case null:return o();case"blur":this.once(e,"debounce-blur")&&e.addEventListener("blur",()=>o());return;default:let b=parseInt(u),g=()=>d?this.deletePrivate(e,Me):o(),c=this.incCycle(e,Ee,g);if(isNaN(b))return F(`invalid throttle/debounce value: ${u}`);if(d){let m=!1;if(t.type==="keydown"){let v=this.private(e,Ot);this.putPrivate(e,Ot,t.key),m=v!==t.key}if(!m&&this.private(e,Me))return!1;o(),this.putPrivate(e,Me,!0),setTimeout(()=>{a()&&this.triggerCycle(e,Ee)},b)}else setTimeout(()=>{a()&&this.triggerCycle(e,Ee,c)},b);let f=e.form;f&&this.once(f,"bind-debounce")&&f.addEventListener("submit",()=>{Array.from(new FormData(f).entries(),([m])=>{let v=f.querySelector(`[name="${m}"]`);this.incCycle(v,Ee),this.deletePrivate(v,Me)})}),this.once(e,"bind-debounce")&&e.addEventListener("blur",()=>this.triggerCycle(e,Ee))}},triggerCycle(e,t,i){let[n,s]=this.private(e,t);i||(i=n),i===n&&(this.incCycle(e,t),s())},once(e,t){return this.private(e,t)===!0?!1:(this.putPrivate(e,t,!0),!0)},incCycle(e,t,i=function(){}){let[n]=this.private(e,t)||[0,i];return n++,this.putPrivate(e,t,[n,i]),n},discardError(e,t,i){let n=t.getAttribute&&t.getAttribute(i),s=n&&e.querySelector(`[id="${n}"], [name="${n}"], [name="${n}[]"]`);!s||this.private(s,vt)||this.private(s,Ke)||t.classList.add(ot)},resetForm(e,t){Array.from(e.elements).forEach(i=>{let n=`[${t}="${i.id}"],
                   [${t}="${i.name}"],
                   [${t}="${i.name.replace(/\[\]$/,"")}"]`;this.deletePrivate(i,vt),this.deletePrivate(i,Ke),this.all(document,n,s=>{s.classList.add(ot)})})},showError(e,t){(e.id||e.name)&&this.all(e.form,`[${t}="${e.id}"], [${t}="${e.name}"]`,i=>{this.removeClass(i,ot)})},isPhxChild(e){return e.getAttribute&&e.getAttribute(pe)},isPhxSticky(e){return e.getAttribute&&e.getAttribute(Rt)!==null},firstPhxChild(e){return this.isPhxChild(e)?e:this.all(e,`[${pe}]`)[0]},dispatchEvent(e,t,i={}){let s={bubbles:i.bubbles===void 0?!0:!!i.bubbles,cancelable:!0,detail:i.detail||{}},r=t==="click"?new MouseEvent("click",s):new CustomEvent(t,s);e.dispatchEvent(r)},cloneNode(e,t){if(typeof t=="undefined")return e.cloneNode(!0);{let i=e.cloneNode(!1);return i.innerHTML=t,i}},mergeAttrs(e,t,i={}){let n=i.exclude||[],s=i.isIgnored,r=t.attributes;for(let o=r.length-1;o>=0;o--){let l=r[o].name;n.indexOf(l)<0&&e.setAttribute(l,t.getAttribute(l))}let a=e.attributes;for(let o=a.length-1;o>=0;o--){let l=a[o].name;s?l.startsWith("data-")&&!t.hasAttribute(l)&&e.removeAttribute(l):t.hasAttribute(l)||e.removeAttribute(l)}},mergeFocusedInput(e,t){e instanceof HTMLSelectElement||X.mergeAttrs(e,t,{exclude:["value"]}),t.readOnly?e.setAttribute("readonly",!0):e.removeAttribute("readonly")},hasSelectionRange(e){return e.setSelectionRange&&(e.type==="text"||e.type==="textarea")},restoreFocus(e,t,i){if(!X.isTextualInput(e))return;let n=e.matches(":focus");e.readOnly&&e.blur(),n||e.focus(),this.hasSelectionRange(e)&&e.setSelectionRange(t,i)},isFormInput(e){return/^(?:input|select|textarea)$/i.test(e.tagName)&&e.type!=="button"},syncAttrsToProps(e){e instanceof HTMLInputElement&&Kt.indexOf(e.type.toLocaleLowerCase())>=0&&(e.checked=e.getAttribute("checked")!==null)},isTextualInput(e){return Ci.indexOf(e.type)>=0},isNowTriggerFormExternal(e,t){return e.getAttribute&&e.getAttribute(t)!==null},syncPendingRef(e,t,i){let n=e.getAttribute(te);if(n===null)return!0;let s=e.getAttribute(ue);return X.isFormInput(e)||e.getAttribute(i)!==null?(X.isUploadInput(e)&&X.mergeAttrs(e,t,{isIgnored:!0}),X.putPrivate(e,te,t),!1):(Wt.forEach(r=>{e.classList.contains(r)&&t.classList.add(r)}),t.setAttribute(te,n),t.setAttribute(ue,s),!0)},cleanChildNodes(e,t){if(X.isPhxUpdate(e,t,["append","prepend"])){let i=[];e.childNodes.forEach(n=>{n.id||(n.nodeType===Node.TEXT_NODE&&n.nodeValue.trim()===""||F(`only HTML element tags with an id are allowed inside containers with phx-update.

removing illegal node: "${(n.outerHTML||n.nodeValue).trim()}"

`),i.push(n))}),i.forEach(n=>n.remove())}},replaceRootContainer(e,t,i){let n=new Set(["id",he,xe,wt,Le]);if(e.tagName.toLowerCase()===t.toLowerCase())return Array.from(e.attributes).filter(s=>!n.has(s.name.toLowerCase())).forEach(s=>e.removeAttribute(s.name)),Object.keys(i).filter(s=>!n.has(s.toLowerCase())).forEach(s=>e.setAttribute(s,i[s])),e;{let s=document.createElement(t);return Object.keys(i).forEach(r=>s.setAttribute(r,i[r])),n.forEach(r=>s.setAttribute(r,e.getAttribute(r))),s.innerHTML=e.innerHTML,e.replaceWith(s),s}},getSticky(e,t,i){let n=(X.private(e,"sticky")||[]).find(([s])=>t===s);if(n){let[s,r,a]=n;return a}else return typeof i=="function"?i():i},deleteSticky(e,t){this.updatePrivate(e,"sticky",[],i=>i.filter(([n,s])=>n!==t))},putSticky(e,t,i){let n=i(e);this.updatePrivate(e,"sticky",[],s=>{let r=s.findIndex(([a])=>t===a);return r>=0?s[r]=[t,i,n]:s.push([t,i,n]),s})},applyStickyOperations(e){let t=X.private(e,"sticky");!t||t.forEach(([i,n,s])=>this.putSticky(e,i,n))}},p=X,ft=class{static isActive(e,t){let i=t._phxRef===void 0,s=e.getAttribute(gt).split(",").indexOf(O.genFileRef(t))>=0;return t.size>0&&(i||s)}static isPreflighted(e,t){return e.getAttribute(yt).split(",").indexOf(O.genFileRef(t))>=0&&this.isActive(e,t)}constructor(e,t,i){this.ref=O.genFileRef(t),this.fileEl=e,this.file=t,this.view=i,this.meta=null,this._isCancelled=!1,this._isDone=!1,this._progress=0,this._lastProgressSent=-1,this._onDone=function(){},this._onElUpdated=this.onElUpdated.bind(this),this.fileEl.addEventListener(qe,this._onElUpdated)}metadata(){return this.meta}progress(e){this._progress=Math.floor(e),this._progress>this._lastProgressSent&&(this._progress>=100?(this._progress=100,this._lastProgressSent=100,this._isDone=!0,this.view.pushFileProgress(this.fileEl,this.ref,100,()=>{O.untrackFile(this.fileEl,this.file),this._onDone()})):(this._lastProgressSent=this._progress,this.view.pushFileProgress(this.fileEl,this.ref,this._progress)))}cancel(){this._isCancelled=!0,this._isDone=!0,this._onDone()}isDone(){return this._isDone}error(e="failed"){this.fileEl.removeEventListener(qe,this._onElUpdated),this.view.pushFileProgress(this.fileEl,this.ref,{error:e}),O.clearFiles(this.fileEl)}onDone(e){this._onDone=()=>{this.fileEl.removeEventListener(qe,this._onElUpdated),e()}}onElUpdated(){this.fileEl.getAttribute(gt).split(",").indexOf(this.ref)===-1&&this.cancel()}toPreflightPayload(){return{last_modified:this.file.lastModified,name:this.file.name,relative_path:this.file.webkitRelativePath,size:this.file.size,type:this.file.type,ref:this.ref}}uploader(e){if(this.meta.uploader){let t=e[this.meta.uploader]||F(`no uploader configured for ${this.meta.uploader}`);return{name:this.meta.uploader,callback:t}}else return{name:"channel",callback:Bi}}zipPostFlight(e){this.meta=e.entries[this.ref],this.meta||F(`no preflight upload response returned with ref ${this.ref}`,{input:this.fileEl,response:e})}},Ui=0,O=class{static genFileRef(e){let t=e._phxRef;return t!==void 0?t:(e._phxRef=(Ui++).toString(),e._phxRef)}static getEntryDataURL(e,t,i){let n=this.activeFiles(e).find(s=>this.genFileRef(s)===t);i(URL.createObjectURL(n))}static hasUploadsInProgress(e){let t=0;return p.findUploadInputs(e).forEach(i=>{i.getAttribute(yt)!==i.getAttribute(Ai)&&t++}),t>0}static serializeUploads(e){let t=this.activeFiles(e),i={};return t.forEach(n=>{let s={path:e.name},r=e.getAttribute(fe);i[r]=i[r]||[],s.ref=this.genFileRef(n),s.last_modified=n.lastModified,s.name=n.name||s.ref,s.relative_path=n.webkitRelativePath,s.type=n.type,s.size=n.size,i[r].push(s)}),i}static clearFiles(e){e.value=null,e.removeAttribute(fe),p.putPrivate(e,"files",[])}static untrackFile(e,t){p.putPrivate(e,"files",p.private(e,"files").filter(i=>!Object.is(i,t)))}static trackFiles(e,t,i){if(e.getAttribute("multiple")!==null){let n=t.filter(s=>!this.activeFiles(e).find(r=>Object.is(r,s)));p.putPrivate(e,"files",this.activeFiles(e).concat(n)),e.value=null}else i&&i.files.length>0&&(e.files=i.files),p.putPrivate(e,"files",t)}static activeFileInputs(e){let t=p.findUploadInputs(e);return Array.from(t).filter(i=>i.files&&this.activeFiles(i).length>0)}static activeFiles(e){return(p.private(e,"files")||[]).filter(t=>ft.isActive(e,t))}static inputsAwaitingPreflight(e){let t=p.findUploadInputs(e);return Array.from(t).filter(i=>this.filesAwaitingPreflight(i).length>0)}static filesAwaitingPreflight(e){return this.activeFiles(e).filter(t=>!ft.isPreflighted(e,t))}constructor(e,t,i){this.view=t,this.onComplete=i,this._entries=Array.from(O.filesAwaitingPreflight(e)||[]).map(n=>new ft(e,n,t)),this.numEntriesInProgress=this._entries.length}entries(){return this._entries}initAdapterUpload(e,t,i){this._entries=this._entries.map(s=>(s.zipPostFlight(e),s.onDone(()=>{this.numEntriesInProgress--,this.numEntriesInProgress===0&&this.onComplete()}),s));let n=this._entries.reduce((s,r)=>{let{name:a,callback:o}=r.uploader(i.uploaders);return s[a]=s[a]||{callback:o,entries:[]},s[a].entries.push(r),s},{});for(let s in n){let{callback:r,entries:a}=n[s];r(a,t,e,i)}}},Ji={focusMain(){let e=document.querySelector("main h1, main, h1");if(e){let t=e.tabIndex;e.tabIndex=-1,e.focus(),e.tabIndex=t}},anyOf(e,t){return t.find(i=>e instanceof i)},isFocusable(e,t){return e instanceof HTMLAnchorElement&&e.rel!=="ignore"||e instanceof HTMLAreaElement&&e.href!==void 0||!e.disabled&&this.anyOf(e,[HTMLInputElement,HTMLSelectElement,HTMLTextAreaElement,HTMLButtonElement])||e instanceof HTMLIFrameElement||e.tabIndex>0||!t&&e.tabIndex===0&&e.getAttribute("tabindex")!==null&&e.getAttribute("aria-hidden")!=="true"},attemptFocus(e,t){if(this.isFocusable(e,t))try{e.focus()}catch(i){}return!!document.activeElement&&document.activeElement.isSameNode(e)},focusFirstInteractive(e){let t=e.firstElementChild;for(;t;){if(this.attemptFocus(t,!0)||this.focusFirstInteractive(t,!0))return!0;t=t.nextElementSibling}},focusFirst(e){let t=e.firstElementChild;for(;t;){if(this.attemptFocus(t)||this.focusFirst(t))return!0;t=t.nextElementSibling}},focusLast(e){let t=e.lastElementChild;for(;t;){if(this.attemptFocus(t)||this.focusLast(t))return!0;t=t.previousElementSibling}}},ge=Ji,Vi={LiveFileUpload:{activeRefs(){return this.el.getAttribute(gt)},preflightedRefs(){return this.el.getAttribute(yt)},mounted(){this.preflightedWas=this.preflightedRefs()},updated(){let e=this.preflightedRefs();this.preflightedWas!==e&&(this.preflightedWas=e,e===""&&this.__view.cancelSubmit(this.el.form)),this.activeRefs()===""&&(this.el.value=null),this.el.dispatchEvent(new CustomEvent(qe))}},LiveImgPreview:{mounted(){this.ref=this.el.getAttribute("data-phx-entry-ref"),this.inputEl=document.getElementById(this.el.getAttribute(fe)),O.getEntryDataURL(this.inputEl,this.ref,e=>{this.url=e,this.el.src=e})},destroyed(){URL.revokeObjectURL(this.url)}},FocusWrap:{mounted(){this.focusStart=this.el.firstElementChild,this.focusEnd=this.el.lastElementChild,this.focusStart.addEventListener("focus",()=>ge.focusLast(this.el)),this.focusEnd.addEventListener("focus",()=>ge.focusFirst(this.el)),this.el.addEventListener("phx:show-end",()=>this.el.focus()),window.getComputedStyle(this.el).display!=="none"&&ge.focusFirst(this.el)}}},zi=Vi,qi=class{constructor(e,t,i){let n=new Set,s=new Set([...t.children].map(a=>a.id)),r=[];Array.from(e.children).forEach(a=>{if(a.id&&(n.add(a.id),s.has(a.id))){let o=a.previousElementSibling&&a.previousElementSibling.id;r.push({elementId:a.id,previousElementId:o})}}),this.containerId=t.id,this.updateType=i,this.elementsToModify=r,this.elementIdsToAdd=[...s].filter(a=>!n.has(a))}perform(){let e=p.byId(this.containerId);this.elementsToModify.forEach(t=>{t.previousElementId?le(document.getElementById(t.previousElementId),i=>{le(document.getElementById(t.elementId),n=>{n.previousElementSibling&&n.previousElementSibling.id==i.id||i.insertAdjacentElement("afterend",n)})}):le(document.getElementById(t.elementId),i=>{i.previousElementSibling==null||e.insertAdjacentElement("afterbegin",i)})}),this.updateType=="prepend"&&this.elementIdsToAdd.reverse().forEach(t=>{le(document.getElementById(t),i=>e.insertAdjacentElement("afterbegin",i))})}},Mt=11;function Wi(e,t){var i=t.attributes,n,s,r,a,o;if(!(t.nodeType===Mt||e.nodeType===Mt)){for(var l=i.length-1;l>=0;l--)n=i[l],s=n.name,r=n.namespaceURI,a=n.value,r?(s=n.localName||s,o=e.getAttributeNS(r,s),o!==a&&(n.prefix==="xmlns"&&(s=n.name),e.setAttributeNS(r,s,a))):(o=e.getAttribute(s),o!==a&&e.setAttribute(s,a));for(var d=e.attributes,u=d.length-1;u>=0;u--)n=d[u],s=n.name,r=n.namespaceURI,r?(s=n.localName||s,t.hasAttributeNS(r,s)||e.removeAttributeNS(r,s)):t.hasAttribute(s)||e.removeAttribute(s)}}var Be,Xi="http://www.w3.org/1999/xhtml",j=typeof document=="undefined"?void 0:document,Ki=!!j&&"content"in j.createElement("template"),Gi=!!j&&j.createRange&&"createContextualFragment"in j.createRange();function Yi(e){var t=j.createElement("template");return t.innerHTML=e,t.content.childNodes[0]}function Zi(e){Be||(Be=j.createRange(),Be.selectNode(j.body));var t=Be.createContextualFragment(e);return t.childNodes[0]}function Qi(e){var t=j.createElement("body");return t.innerHTML=e,t.childNodes[0]}function en(e){return e=e.trim(),Ki?Yi(e):Gi?Zi(e):Qi(e)}function Ue(e,t){var i=e.nodeName,n=t.nodeName,s,r;return i===n?!0:(s=i.charCodeAt(0),r=n.charCodeAt(0),s<=90&&r>=97?i===n.toUpperCase():r<=90&&s>=97?n===i.toUpperCase():!1)}function tn(e,t){return!t||t===Xi?j.createElement(e):j.createElementNS(t,e)}function nn(e,t){for(var i=e.firstChild;i;){var n=i.nextSibling;t.appendChild(i),i=n}return t}function pt(e,t,i){e[i]!==t[i]&&(e[i]=t[i],e[i]?e.setAttribute(i,""):e.removeAttribute(i))}var jt={OPTION:function(e,t){var i=e.parentNode;if(i){var n=i.nodeName.toUpperCase();n==="OPTGROUP"&&(i=i.parentNode,n=i&&i.nodeName.toUpperCase()),n==="SELECT"&&!i.hasAttribute("multiple")&&(e.hasAttribute("selected")&&!t.selected&&(e.setAttribute("selected","selected"),e.removeAttribute("selected")),i.selectedIndex=-1)}pt(e,t,"selected")},INPUT:function(e,t){pt(e,t,"checked"),pt(e,t,"disabled"),e.value!==t.value&&(e.value=t.value),t.hasAttribute("value")||e.removeAttribute("value")},TEXTAREA:function(e,t){var i=t.value;e.value!==i&&(e.value=i);var n=e.firstChild;if(n){var s=n.nodeValue;if(s==i||!i&&s==e.placeholder)return;n.nodeValue=i}},SELECT:function(e,t){if(!t.hasAttribute("multiple")){for(var i=-1,n=0,s=e.firstChild,r,a;s;)if(a=s.nodeName&&s.nodeName.toUpperCase(),a==="OPTGROUP")r=s,s=r.firstChild;else{if(a==="OPTION"){if(s.hasAttribute("selected")){i=n;break}n++}s=s.nextSibling,!s&&r&&(s=r.nextSibling,r=null)}e.selectedIndex=i}}},Te=1,Bt=11,Ut=3,Jt=8;function ae(){}function sn(e){if(e)return e.getAttribute&&e.getAttribute("id")||e.id}function rn(e){return function(i,n,s){if(s||(s={}),typeof n=="string")if(i.nodeName==="#document"||i.nodeName==="HTML"||i.nodeName==="BODY"){var r=n;n=j.createElement("html"),n.innerHTML=r}else n=en(n);else n.nodeType===Bt&&(n=n.firstElementChild);var a=s.getNodeKey||sn,o=s.onBeforeNodeAdded||ae,l=s.onNodeAdded||ae,d=s.onBeforeElUpdated||ae,u=s.onElUpdated||ae,b=s.onBeforeNodeDiscarded||ae,g=s.onNodeDiscarded||ae,c=s.onBeforeElChildrenUpdated||ae,f=s.skipFromChildren||ae,m=s.addChild||function(A,E){return A.appendChild(E)},v=s.childrenOnly===!0,h=Object.create(null),y=[];function w(A){y.push(A)}function k(A,E){if(A.nodeType===Te)for(var T=A.firstChild;T;){var C=void 0;E&&(C=a(T))?w(C):(g(T),T.firstChild&&k(T,E)),T=T.nextSibling}}function P(A,E,T){b(A)!==!1&&(E&&E.removeChild(A),g(A),k(A,T))}function N(A){if(A.nodeType===Te||A.nodeType===Bt)for(var E=A.firstChild;E;){var T=a(E);T&&(h[T]=E),N(E),E=E.nextSibling}}N(i);function K(A){l(A);for(var E=A.firstChild;E;){var T=E.nextSibling,C=a(E);if(C){var x=h[C];x&&Ue(E,x)?(E.parentNode.replaceChild(x,E),I(x,E)):K(E)}else K(E);E=T}}function $(A,E,T){for(;E;){var C=E.nextSibling;(T=a(E))?w(T):P(E,A,!0),E=C}}function I(A,E,T){var C=a(E);C&&delete h[C],!(!T&&(d(A,E)===!1||(e(A,E),u(A),c(A,E)===!1)))&&(A.nodeName!=="TEXTAREA"?D(A,E):jt.TEXTAREA(A,E))}function D(A,E){var T=f(A),C=E.firstChild,x=A.firstChild,H,U,re,J,M;e:for(;C;){for(J=C.nextSibling,H=a(C);!T&&x;){if(re=x.nextSibling,C.isSameNode&&C.isSameNode(x)){C=J,x=re;continue e}U=a(x);var ie=x.nodeType,V=void 0;if(ie===C.nodeType&&(ie===Te?(H?H!==U&&((M=h[H])?re===M?V=!1:(A.insertBefore(M,x),U?w(U):P(x,A,!0),x=M):V=!1):U&&(V=!1),V=V!==!1&&Ue(x,C),V&&I(x,C)):(ie===Ut||ie==Jt)&&(V=!0,x.nodeValue!==C.nodeValue&&(x.nodeValue=C.nodeValue))),V){C=J,x=re;continue e}U?w(U):P(x,A,!0),x=re}if(H&&(M=h[H])&&Ue(M,C))T||m(A,M),I(M,C);else{var ce=o(C);ce!==!1&&(ce&&(C=ce),C.actualize&&(C=C.actualize(A.ownerDocument||j)),m(A,C),K(C))}C=J,x=re}$(A,x,U);var be=jt[A.nodeName];be&&be(A,E)}var _=i,L=_.nodeType,R=n.nodeType;if(!v){if(L===Te)R===Te?Ue(i,n)||(g(i),_=nn(i,tn(n.nodeName,n.namespaceURI))):_=n;else if(L===Ut||L===Jt){if(R===L)return _.nodeValue!==n.nodeValue&&(_.nodeValue=n.nodeValue),_;_=n}}if(_===n)g(i);else{if(n.isSameNode&&n.isSameNode(_))return;if(I(_,n,v),y)for(var B=0,se=y.length;B<se;B++){var de=h[y[B]];de&&P(de,de.parentNode,!1)}}return!v&&_!==i&&i.parentNode&&(_.actualize&&(_=_.actualize(i.ownerDocument||j)),i.parentNode.replaceChild(_,i)),_}}var an=rn(Wi),Vt=an,Je=class{static patchEl(e,t,i){Vt(e,t,{childrenOnly:!1,onBeforeElUpdated:(n,s)=>{if(i&&i.isSameNode(n)&&p.isFormInput(n))return p.mergeFocusedInput(n,s),!1}})}constructor(e,t,i,n,s,r){this.view=e,this.liveSocket=e.liveSocket,this.container=t,this.id=i,this.rootID=e.root.id,this.html=n,this.streams=s,this.streamInserts={},this.targetCID=r,this.cidPatch=oe(this.targetCID),this.pendingRemoves=[],this.phxRemove=this.liveSocket.binding("remove"),this.callbacks={beforeadded:[],beforeupdated:[],beforephxChildAdded:[],afteradded:[],afterupdated:[],afterdiscarded:[],afterphxChildAdded:[],aftertransitionsDiscarded:[]}}before(e,t){this.callbacks[`before${e}`].push(t)}after(e,t){this.callbacks[`after${e}`].push(t)}trackBefore(e,...t){this.callbacks[`before${e}`].forEach(i=>i(...t))}trackAfter(e,...t){this.callbacks[`after${e}`].forEach(i=>i(...t))}markPrunableContentForRemoval(){let e=this.liveSocket.binding(Ge);p.all(this.container,`[${e}=${ht}]`,t=>t.innerHTML=""),p.all(this.container,`[${e}=append] > *, [${e}=prepend] > *`,t=>{t.setAttribute(_t,"")})}perform(){let{view:e,liveSocket:t,container:i,html:n}=this,s=this.isCIDPatch()?this.targetCIDContainer(n):i;if(this.isCIDPatch()&&!s)return;let r=t.getActiveElement(),{selectionStart:a,selectionEnd:o}=r&&p.hasSelectionRange(r)?r:{},l=t.binding(Ge),d=t.binding(Xe),u=t.binding(bt),b=t.binding(Ei),g=[],c=[],f=[],m=null,v=t.time("premorph container prep",()=>this.buildDiffHTML(i,n,l,s));return this.trackBefore("added",i),this.trackBefore("updated",i,i),t.time("morphdom",()=>{this.streams.forEach(([h,y])=>{this.streamInserts=Object.assign(this.streamInserts,h),y.forEach(w=>{let k=i.querySelector(`[id="${w}"]`);k&&(this.maybePendingRemove(k)||(k.remove(),this.onNodeDiscarded(k)))})}),Vt(s,v,{childrenOnly:s.getAttribute(W)===null,getNodeKey:h=>p.isPhxDestroyed(h)?null:h.id,skipFromChildren:h=>h.getAttribute(l)===ht,addChild:(h,y)=>{let w=y.id?this.streamInserts[y.id]:void 0;if(w===void 0)return h.appendChild(y);if(w===0)h.insertAdjacentElement("afterbegin",y);else if(w===-1)h.appendChild(y);else if(w>0){let k=Array.from(h.children)[w];h.insertBefore(y,k)}},onBeforeNodeAdded:h=>(this.trackBefore("added",h),h),onNodeAdded:h=>{h instanceof HTMLImageElement&&h.srcset?h.srcset=h.srcset:h instanceof HTMLVideoElement&&h.autoplay&&h.play(),p.isNowTriggerFormExternal(h,b)&&(m=h),p.discardError(s,h,d),(p.isPhxChild(h)&&e.ownsElement(h)||p.isPhxSticky(h)&&e.ownsElement(h.parentNode))&&this.trackAfter("phxChildAdded",h),g.push(h)},onNodeDiscarded:h=>this.onNodeDiscarded(h),onBeforeNodeDiscarded:h=>h.getAttribute&&h.getAttribute(_t)!==null?!0:!(h.parentElement!==null&&h.id&&p.isPhxUpdate(h.parentElement,l,[ht,"append","prepend"])||this.maybePendingRemove(h)||this.skipCIDSibling(h)),onElUpdated:h=>{p.isNowTriggerFormExternal(h,b)&&(m=h),c.push(h),this.maybeReOrderStream(h)},onBeforeElUpdated:(h,y)=>{if(p.cleanChildNodes(y,l),this.skipCIDSibling(y)||p.isPhxSticky(h))return!1;if(p.isIgnored(h,l)||h.form&&h.form.isSameNode(m))return this.trackBefore("updated",h,y),p.mergeAttrs(h,y,{isIgnored:!0}),c.push(h),p.applyStickyOperations(h),!1;if(h.type==="number"&&h.validity&&h.validity.badInput)return!1;if(!p.syncPendingRef(h,y,u))return p.isUploadInput(h)&&(this.trackBefore("updated",h,y),c.push(h)),p.applyStickyOperations(h),!1;if(p.isPhxChild(y)){let k=h.getAttribute(he);return p.mergeAttrs(h,y,{exclude:[xe]}),k!==""&&h.setAttribute(he,k),h.setAttribute(Le,this.rootID),p.applyStickyOperations(h),!1}return p.copyPrivates(y,h),p.discardError(s,y,d),r&&h.isSameNode(r)&&p.isFormInput(h)&&h.type!=="hidden"?(this.trackBefore("updated",h,y),p.mergeFocusedInput(h,y),p.syncAttrsToProps(h),c.push(h),p.applyStickyOperations(h),!1):(p.isPhxUpdate(y,l,["append","prepend"])&&f.push(new qi(h,y,y.getAttribute(l))),p.syncAttrsToProps(y),p.applyStickyOperations(y),this.trackBefore("updated",h,y),!0)}})}),t.isDebugEnabled()&&$i(),f.length>0&&t.time("post-morph append/prepend restoration",()=>{f.forEach(h=>h.perform())}),t.silenceEvents(()=>p.restoreFocus(r,a,o)),p.dispatchEvent(document,"phx:update"),g.forEach(h=>this.trackAfter("added",h)),c.forEach(h=>this.trackAfter("updated",h)),this.transitionPendingRemoves(),m&&(t.unload(),m.submit()),!0}onNodeDiscarded(e){(p.isPhxChild(e)||p.isPhxSticky(e))&&this.liveSocket.destroyViewByEl(e),this.trackAfter("discarded",e)}maybePendingRemove(e){return e.getAttribute&&e.getAttribute(this.phxRemove)!==null?(this.pendingRemoves.push(e),!0):!1}maybeReOrderStream(e){let t=e.id?this.streamInserts[e.id]:void 0;if(t!==void 0){if(t===0)e.parentElement.insertBefore(e,e.parentElement.firstElementChild);else if(t>0){let i=Array.from(e.parentElement.children),n=i.indexOf(e);if(t>=i.length-1)e.parentElement.appendChild(e);else{let s=i[t];n>t?e.parentElement.insertBefore(e,s):e.parentElement.insertBefore(e,s.nextElementSibling)}}}}transitionPendingRemoves(){let{pendingRemoves:e,liveSocket:t}=this;e.length>0&&(t.transitionRemoves(e),t.requestDOMUpdate(()=>{e.forEach(i=>{let n=p.firstPhxChild(i);n&&t.destroyViewByEl(n),i.remove()}),this.trackAfter("transitionsDiscarded",e)}))}isCIDPatch(){return this.cidPatch}skipCIDSibling(e){return e.nodeType===Node.ELEMENT_NODE&&e.getAttribute(mt)!==null}targetCIDContainer(e){if(!this.isCIDPatch())return;let[t,...i]=p.findComponentNodeList(this.container,this.targetCID);return i.length===0&&p.childNodeLength(e)===1?t:t&&t.parentNode}buildDiffHTML(e,t,i,n){let s=this.isCIDPatch(),r=s&&n.getAttribute(W)===this.targetCID.toString();if(!s||r)return t;{let a=null,o=document.createElement("template");a=p.cloneNode(n);let[l,...d]=p.findComponentNodeList(a,this.targetCID);return o.innerHTML=t,d.forEach(u=>u.remove()),Array.from(a.childNodes).forEach(u=>{u.id&&u.nodeType===Node.ELEMENT_NODE&&u.getAttribute(W)!==this.targetCID.toString()&&(u.setAttribute(mt,""),u.innerHTML="")}),Array.from(o.content.childNodes).forEach(u=>a.insertBefore(u,l)),l.remove(),a.outerHTML}}indexOf(e,t){return Array.from(e.children).indexOf(t)}},zt=class{static extract(e){let{[Ht]:t,[Ft]:i,[Nt]:n}=e;return delete e[Ht],delete e[Ft],delete e[Nt],{diff:e,title:n,reply:t||null,events:i||[]}}constructor(e,t){this.viewId=e,this.rendered={},this.mergeDiff(t)}parentViewId(){return this.viewId}toString(e){let[t,i]=this.recursiveToString(this.rendered,this.rendered[q],e);return[t,i]}recursiveToString(e,t=e[q],i){i=i?new Set(i):null;let n={buffer:"",components:t,onlyCids:i,streams:new Set};return this.toOutputBuffer(e,null,n),[n.buffer,n.streams]}componentCIDs(e){return Object.keys(e[q]||{}).map(t=>parseInt(t))}isComponentOnlyDiff(e){return e[q]?Object.keys(e).length===1:!1}getComponent(e,t){return e[q][t]}mergeDiff(e){let t=e[q],i={};if(delete e[q],this.rendered=this.mutableMerge(this.rendered,e),this.rendered[q]=this.rendered[q]||{},t){let n=this.rendered[q];for(let s in t)t[s]=this.cachedFindComponent(s,t[s],n,t,i);for(let s in t)n[s]=t[s];e[q]=t}}cachedFindComponent(e,t,i,n,s){if(s[e])return s[e];{let r,a,o=t[Z];if(oe(o)){let l;o>0?l=this.cachedFindComponent(o,n[o],i,n,s):l=i[-o],a=l[Z],r=this.cloneMerge(l,t),r[Z]=a}else r=t[Z]!==void 0?t:this.cloneMerge(i[e]||{},t);return s[e]=r,r}}mutableMerge(e,t){return t[Z]!==void 0?t:(this.doMutableMerge(e,t),e)}doMutableMerge(e,t){for(let i in t){let n=t[i],s=e[i];Ce(n)&&n[Z]===void 0&&Ce(s)?this.doMutableMerge(s,n):e[i]=n}}cloneMerge(e,t){let i=ye(ye({},e),t);for(let n in i){let s=t[n],r=e[n];Ce(s)&&s[Z]===void 0&&Ce(r)&&(i[n]=this.cloneMerge(r,s))}return i}componentToString(e){let[t,i]=this.recursiveCIDToString(this.rendered[q],e);return[t,i]}pruneCIDs(e){e.forEach(t=>delete this.rendered[q][t])}get(){return this.rendered}isNewFingerprint(e={}){return!!e[Z]}templateStatic(e,t){return typeof e=="number"?t[e]:e}toOutputBuffer(e,t,i){if(e[je])return this.comprehensionToBuffer(e,t,i);let{[Z]:n}=e;n=this.templateStatic(n,t),i.buffer+=n[0];for(let s=1;s<n.length;s++)this.dynamicToBuffer(e[s-1],t,i),i.buffer+=n[s]}comprehensionToBuffer(e,t,i){let{[je]:n,[Z]:s,[Hi]:r}=e,[a,o]=r||[{},[]];s=this.templateStatic(s,t);let l=t||e[Fi];for(let d=0;d<n.length;d++){let u=n[d];i.buffer+=s[0];for(let b=1;b<s.length;b++)this.dynamicToBuffer(u[b-1],l,i),i.buffer+=s[b]}r!==void 0&&(e[je].length>0||o.length>0)&&(e[je]=[],i.streams.add(r))}dynamicToBuffer(e,t,i){if(typeof e=="number"){let[n,s]=this.recursiveCIDToString(i.components,e,i.onlyCids);i.buffer+=n,i.streams=new Set([...i.streams,...s])}else Ce(e)?this.toOutputBuffer(e,t,i):i.buffer+=e}recursiveCIDToString(e,t,i){let n=e[t]||F(`no component for CID ${t}`,e),s=document.createElement("template"),[r,a]=this.recursiveToString(n,e,i);s.innerHTML=r;let o=s.content,l=i&&!i.has(t),[d,u]=Array.from(o.childNodes).reduce(([b,g],c,f)=>c.nodeType===Node.ELEMENT_NODE?c.getAttribute(W)?[b,!0]:(c.setAttribute(W,t),c.id||(c.id=`${this.parentViewId()}-${t}-${f}`),l&&(c.setAttribute(mt,""),c.innerHTML=""),[!0,g]):c.nodeValue.trim()!==""?(F(`only HTML element tags are allowed at the root of components.

got: "${c.nodeValue.trim()}"

within:
`,s.innerHTML.trim()),c.replaceWith(this.createSpan(c.nodeValue,t)),[!0,g]):(c.remove(),[b,g]),[!1,!1]);return!d&&!u?(F(`expected at least one HTML element tag inside a component, but the component is empty:
`,s.innerHTML.trim()),[this.createSpan("",t).outerHTML,a]):!d&&u?(F("expected at least one HTML element tag directly inside a component, but only subcomponents were found. A component must render at least one HTML tag directly inside itself.",s.innerHTML.trim()),[s.innerHTML,a]):[s.innerHTML,a]}createSpan(e,t){let i=document.createElement("span");return i.innerText=e,i.setAttribute(W,t),i}},on=1,_e=class{static makeID(){return on++}static elementID(e){return e.phxHookId}constructor(e,t,i){this.__view=e,this.liveSocket=e.liveSocket,this.__callbacks=i,this.__listeners=new Set,this.__isDisconnected=!1,this.el=t,this.el.phxHookId=this.constructor.makeID();for(let n in this.__callbacks)this[n]=this.__callbacks[n]}__mounted(){this.mounted&&this.mounted()}__updated(){this.updated&&this.updated()}__beforeUpdate(){this.beforeUpdate&&this.beforeUpdate()}__destroyed(){this.destroyed&&this.destroyed()}__reconnected(){this.__isDisconnected&&(this.__isDisconnected=!1,this.reconnected&&this.reconnected())}__disconnected(){this.__isDisconnected=!0,this.disconnected&&this.disconnected()}pushEvent(e,t={},i=function(){}){return this.__view.pushHookEvent(null,e,t,i)}pushEventTo(e,t,i={},n=function(){}){return this.__view.withinTargets(e,(s,r)=>s.pushHookEvent(r,t,i,n))}handleEvent(e,t){let i=(n,s)=>s?e:t(n.detail);return window.addEventListener(`phx:${e}`,i),this.__listeners.add(i),i}removeHandleEvent(e){let t=e(null,!0);window.removeEventListener(`phx:${t}`,e),this.__listeners.delete(e)}upload(e,t){return this.__view.dispatchUploads(e,t)}uploadTo(e,t,i){return this.__view.withinTargets(e,n=>n.dispatchUploads(t,i))}__cleanup__(){this.__listeners.forEach(e=>this.removeHandleEvent(e))}},Ve=null,ln={exec(e,t,i,n,s){let[r,a]=s||[null,{}];(t.charAt(0)==="["?JSON.parse(t):[[r,a]]).forEach(([l,d])=>{l===r&&a.data&&(d.data=Object.assign(d.data||{},a.data)),this.filterToEls(n,d).forEach(u=>{this[`exec_${l}`](e,t,i,n,u,d)})})},isVisible(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length>0)},exec_exec(e,t,i,n,s,[r,a]){(a?p.all(document,a):[n]).forEach(l=>{let d=l.getAttribute(r);if(!d)throw new Error(`expected ${r} to contain JS command on "${a}"`);i.liveSocket.execJS(l,d,e)})},exec_dispatch(e,t,i,n,s,{to:r,event:a,detail:o,bubbles:l}){o=o||{},o.dispatcher=n,p.dispatchEvent(s,a,{detail:o,bubbles:l})},exec_push(e,t,i,n,s,r){if(!i.isConnected())return;let{event:a,data:o,target:l,page_loading:d,loading:u,value:b,dispatcher:g}=r,c={loading:u,value:b,target:l,page_loading:!!d},f=e==="change"&&g?g:n,m=l||f.getAttribute(i.binding("target"))||f;i.withinTargets(m,(v,h)=>{if(e==="change"){let{newCid:y,_target:w,callback:k}=r;w=w||(p.isFormInput(n)?n.name:void 0),w&&(c._target=w),v.pushInput(n,h,y,a||t,c,k)}else if(e==="submit"){let{submitter:y}=r;v.submitForm(n,h,a||t,y,c)}else v.pushEvent(e,n,h,a||t,o,c)})},exec_navigate(e,t,i,n,s,{href:r,replace:a}){i.liveSocket.historyRedirect(r,a?"replace":"push")},exec_patch(e,t,i,n,s,{href:r,replace:a}){i.liveSocket.pushHistoryPatch(r,a?"replace":"push",n)},exec_focus(e,t,i,n,s){window.requestAnimationFrame(()=>ge.attemptFocus(s))},exec_focus_first(e,t,i,n,s){window.requestAnimationFrame(()=>ge.focusFirstInteractive(s)||ge.focusFirst(s))},exec_push_focus(e,t,i,n,s){window.requestAnimationFrame(()=>Ve=s||n)},exec_pop_focus(e,t,i,n,s){window.requestAnimationFrame(()=>{Ve&&Ve.focus(),Ve=null})},exec_add_class(e,t,i,n,s,{names:r,transition:a,time:o}){this.addOrRemoveClasses(s,r,[],a,o,i)},exec_remove_class(e,t,i,n,s,{names:r,transition:a,time:o}){this.addOrRemoveClasses(s,[],r,a,o,i)},exec_transition(e,t,i,n,s,{time:r,transition:a}){this.addOrRemoveClasses(s,[],[],a,r,i)},exec_toggle(e,t,i,n,s,{display:r,ins:a,outs:o,time:l}){this.toggle(e,i,s,r,a,o,l)},exec_show(e,t,i,n,s,{display:r,transition:a,time:o}){this.show(e,i,s,r,a,o)},exec_hide(e,t,i,n,s,{display:r,transition:a,time:o}){this.hide(e,i,s,r,a,o)},exec_set_attr(e,t,i,n,s,{attr:[r,a]}){this.setOrRemoveAttrs(s,[[r,a]],[])},exec_remove_attr(e,t,i,n,s,{attr:r}){this.setOrRemoveAttrs(s,[],[r])},show(e,t,i,n,s,r){this.isVisible(i)||this.toggle(e,t,i,n,s,null,r)},hide(e,t,i,n,s,r){this.isVisible(i)&&this.toggle(e,t,i,n,null,s,r)},toggle(e,t,i,n,s,r,a){let[o,l,d]=s||[[],[],[]],[u,b,g]=r||[[],[],[]];if(o.length>0||u.length>0)if(this.isVisible(i)){let c=()=>{this.addOrRemoveClasses(i,b,o.concat(l).concat(d)),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(i,u,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(i,g,b))})};i.dispatchEvent(new Event("phx:hide-start")),t.transition(a,c,()=>{this.addOrRemoveClasses(i,[],u.concat(g)),p.putSticky(i,"toggle",f=>f.style.display="none"),i.dispatchEvent(new Event("phx:hide-end"))})}else{if(e==="remove")return;let c=()=>{this.addOrRemoveClasses(i,l,u.concat(b).concat(g));let f=n||this.defaultDisplay(i);p.putSticky(i,"toggle",m=>m.style.display=f),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(i,o,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(i,d,l))})};i.dispatchEvent(new Event("phx:show-start")),t.transition(a,c,()=>{this.addOrRemoveClasses(i,[],o.concat(d)),i.dispatchEvent(new Event("phx:show-end"))})}else this.isVisible(i)?window.requestAnimationFrame(()=>{i.dispatchEvent(new Event("phx:hide-start")),p.putSticky(i,"toggle",c=>c.style.display="none"),i.dispatchEvent(new Event("phx:hide-end"))}):window.requestAnimationFrame(()=>{i.dispatchEvent(new Event("phx:show-start"));let c=n||this.defaultDisplay(i);p.putSticky(i,"toggle",f=>f.style.display=c),i.dispatchEvent(new Event("phx:show-end"))})},addOrRemoveClasses(e,t,i,n,s,r){let[a,o,l]=n||[[],[],[]];if(a.length>0){let d=()=>this.addOrRemoveClasses(e,o.concat(a),[]),u=()=>this.addOrRemoveClasses(e,t.concat(l),i.concat(a).concat(o));return r.transition(s,d,u)}window.requestAnimationFrame(()=>{let[d,u]=p.getSticky(e,"classes",[[],[]]),b=t.filter(m=>d.indexOf(m)<0&&!e.classList.contains(m)),g=i.filter(m=>u.indexOf(m)<0&&e.classList.contains(m)),c=d.filter(m=>i.indexOf(m)<0).concat(b),f=u.filter(m=>t.indexOf(m)<0).concat(g);p.putSticky(e,"classes",m=>(m.classList.remove(...f),m.classList.add(...c),[c,f]))})},setOrRemoveAttrs(e,t,i){let[n,s]=p.getSticky(e,"attrs",[[],[]]),r=t.map(([l,d])=>l).concat(i),a=n.filter(([l,d])=>!r.includes(l)).concat(t),o=s.filter(l=>!r.includes(l)).concat(i);p.putSticky(e,"attrs",l=>(o.forEach(d=>l.removeAttribute(d)),a.forEach(([d,u])=>l.setAttribute(d,u)),[a,o]))},hasAllClasses(e,t){return t.every(i=>e.classList.contains(i))},isToggledOut(e,t){return!this.isVisible(e)||this.hasAllClasses(e,t)},filterToEls(e,{to:t}){return t?p.all(document,t):[e]},defaultDisplay(e){return{tr:"table-row",td:"table-cell"}[e.tagName.toLowerCase()]||"block"}},ee=ln,ze=(e,t,i=[])=>{let l=t,{submitter:n}=l,s=At(l,["submitter"]),r=new FormData(e);n&&n.hasAttribute("name")&&n.form&&n.form===e&&r.append(n.name,n.value);let a=[];r.forEach((d,u,b)=>{d instanceof File&&a.push(u)}),a.forEach(d=>r.delete(d));let o=new URLSearchParams;for(let[d,u]of r.entries())(i.length===0||i.indexOf(d)>=0)&&o.append(d,u);for(let d in s)o.append(d,s[d]);return o.toString()},Yt=class{constructor(e,t,i,n,s){this.isDead=!1,this.liveSocket=t,this.flash=n,this.parent=i,this.root=i?i.root:this,this.el=e,this.id=this.el.id,this.ref=0,this.childJoins=0,this.loaderTimer=null,this.pendingDiffs=[],this.pruningCIDs=[],this.redirect=!1,this.href=null,this.joinCount=this.parent?this.parent.joinCount-1:0,this.joinPending=!0,this.destroyed=!1,this.joinCallback=function(r){r&&r()},this.stopCallback=function(){},this.pendingJoinOps=this.parent?null:[],this.viewHooks={},this.uploaders={},this.formSubmits=[],this.children=this.parent?null:{},this.root.children[this.id]={},this.channel=this.liveSocket.channel(`lv:${this.id}`,()=>({redirect:this.redirect?this.href:void 0,url:this.redirect?void 0:this.href||void 0,params:this.connectParams(s),session:this.getSession(),static:this.getStatic(),flash:this.flash}))}setHref(e){this.href=e}setRedirect(e){this.redirect=!0,this.href=e}isMain(){return this.el.hasAttribute(wt)}connectParams(e){let t=this.liveSocket.params(this.el),i=p.all(document,`[${this.binding(Si)}]`).map(n=>n.src||n.href).filter(n=>typeof n=="string");return i.length>0&&(t._track_static=i),t._mounts=this.joinCount,t._live_referer=e,t}isConnected(){return this.channel.canPush()}getSession(){return this.el.getAttribute(he)}getStatic(){let e=this.el.getAttribute(xe);return e===""?null:e}destroy(e=function(){}){this.destroyAllChildren(),this.destroyed=!0,delete this.root.children[this.id],this.parent&&delete this.root.children[this.parent.id][this.id],clearTimeout(this.loaderTimer);let t=()=>{e();for(let i in this.viewHooks)this.destroyHook(this.viewHooks[i])};p.markPhxChildDestroyed(this.el),this.log("destroyed",()=>["the child has been removed from the parent"]),this.channel.leave().receive("ok",t).receive("error",t).receive("timeout",t)}setContainerClasses(...e){this.el.classList.remove(Pt,at,Lt),this.el.classList.add(...e)}showLoader(e){if(clearTimeout(this.loaderTimer),e)this.loaderTimer=setTimeout(()=>this.showLoader(),e);else{for(let t in this.viewHooks)this.viewHooks[t].__disconnected();this.setContainerClasses(at)}}execAll(e){p.all(this.el,`[${e}]`,t=>this.liveSocket.execJS(t,t.getAttribute(e)))}hideLoader(){clearTimeout(this.loaderTimer),this.setContainerClasses(Pt),this.execAll(this.binding("connected"))}triggerReconnected(){for(let e in this.viewHooks)this.viewHooks[e].__reconnected()}log(e,t){this.liveSocket.log(this,e,t)}transition(e,t,i=function(){}){this.liveSocket.transition(e,t,i)}withinTargets(e,t){if(e instanceof HTMLElement||e instanceof SVGElement)return this.liveSocket.owner(e,i=>t(i,e));if(oe(e))p.findComponentNodeList(this.el,e).length===0?F(`no component found matching phx-target of ${e}`):t(this,parseInt(e));else{let i=Array.from(document.querySelectorAll(e));i.length===0&&F(`nothing found matching the phx-target selector "${e}"`),i.forEach(n=>this.liveSocket.owner(n,s=>t(s,n)))}}applyDiff(e,t,i){this.log(e,()=>["",We(t)]);let{diff:n,reply:s,events:r,title:a}=zt.extract(t);i({diff:n,reply:s,events:r}),a&&window.requestAnimationFrame(()=>p.putTitle(a))}onJoin(e){let{rendered:t,container:i}=e;if(i){let[n,s]=i;this.el=p.replaceRootContainer(this.el,n,s)}this.childJoins=0,this.joinPending=!0,this.flash=null,Q.dropLocal(this.liveSocket.localStorage,window.location.pathname,qt),this.applyDiff("mount",t,({diff:n,events:s})=>{this.rendered=new zt(this.id,n);let[r,a]=this.renderContainer(null,"join");this.dropPendingRefs();let o=this.formsForRecovery(r);this.joinCount++,o.length>0?o.forEach(([l,d,u],b)=>{this.pushFormRecovery(l,u,g=>{b===o.length-1&&this.onJoinComplete(g,r,a,s)})}):this.onJoinComplete(e,r,a,s)})}dropPendingRefs(){p.all(document,`[${ue}="${this.id}"][${te}]`,e=>{e.removeAttribute(te),e.removeAttribute(ue)})}onJoinComplete({live_patch:e},t,i,n){if(this.joinCount>1||this.parent&&!this.parent.isJoinPending())return this.applyJoinPatch(e,t,i,n);p.findPhxChildrenInFragment(t,this.id).filter(r=>{let a=r.id&&this.el.querySelector(`[id="${r.id}"]`),o=a&&a.getAttribute(xe);return o&&r.setAttribute(xe,o),this.joinChild(r)}).length===0?this.parent?(this.root.pendingJoinOps.push([this,()=>this.applyJoinPatch(e,t,i,n)]),this.parent.ackJoin(this)):(this.onAllChildJoinsComplete(),this.applyJoinPatch(e,t,i,n)):this.root.pendingJoinOps.push([this,()=>this.applyJoinPatch(e,t,i,n)])}attachTrueDocEl(){this.el=p.byId(this.id),this.el.setAttribute(Le,this.root.id)}execNewMounted(){p.all(this.el,`[${this.binding(Ae)}], [data-phx-${Ae}]`,e=>{this.maybeAddNewHook(e)}),p.all(this.el,`[${this.binding(Dt)}]`,e=>this.maybeMounted(e))}applyJoinPatch(e,t,i,n){this.attachTrueDocEl();let s=new Je(this,this.el,this.id,t,i,null);if(s.markPrunableContentForRemoval(),this.performPatch(s,!1),this.joinNewChildren(),this.execNewMounted(),this.joinPending=!1,this.liveSocket.dispatchEvents(n),this.applyPendingUpdates(),e){let{kind:r,to:a}=e;this.liveSocket.historyPatch(a,r)}this.hideLoader(),this.joinCount>1&&this.triggerReconnected(),this.stopCallback()}triggerBeforeUpdateHook(e,t){this.liveSocket.triggerDOM("onBeforeElUpdated",[e,t]);let i=this.getHook(e),n=i&&p.isIgnored(e,this.binding(Ge));if(i&&!e.isEqualNode(t)&&!(n&&ji(e.dataset,t.dataset)))return i.__beforeUpdate(),i}maybeMounted(e){let t=e.getAttribute(this.binding(Dt)),i=t&&p.private(e,"mounted");t&&!i&&(this.liveSocket.execJS(e,t),p.putPrivate(e,"mounted",!0))}maybeAddNewHook(e,t){let i=this.addHook(e);i&&i.__mounted()}performPatch(e,t){let i=[],n=!1,s=new Set;return e.after("added",r=>{this.liveSocket.triggerDOM("onNodeAdded",[r]),this.maybeAddNewHook(r),r.getAttribute&&this.maybeMounted(r)}),e.after("phxChildAdded",r=>{p.isPhxSticky(r)?this.liveSocket.joinRootViews():n=!0}),e.before("updated",(r,a)=>{this.triggerBeforeUpdateHook(r,a)&&s.add(r.id)}),e.after("updated",r=>{s.has(r.id)&&this.getHook(r).__updated()}),e.after("discarded",r=>{r.nodeType===Node.ELEMENT_NODE&&i.push(r)}),e.after("transitionsDiscarded",r=>this.afterElementsRemoved(r,t)),e.perform(),this.afterElementsRemoved(i,t),n}afterElementsRemoved(e,t){let i=[];e.forEach(n=>{let s=p.all(n,`[${W}]`),r=p.all(n,`[${this.binding(Ae)}]`);s.concat(n).forEach(a=>{let o=this.componentID(a);oe(o)&&i.indexOf(o)===-1&&i.push(o)}),r.concat(n).forEach(a=>{let o=this.getHook(a);o&&this.destroyHook(o)})}),t&&this.maybePushComponentsDestroyed(i)}joinNewChildren(){p.findPhxChildren(this.el,this.id).forEach(e=>this.joinChild(e))}getChildById(e){return this.root.children[this.id][e]}getDescendentByEl(e){return e.id===this.id?this:this.children[e.getAttribute(pe)][e.id]}destroyDescendent(e){for(let t in this.root.children)for(let i in this.root.children[t])if(i===e)return this.root.children[t][i].destroy()}joinChild(e){if(!this.getChildById(e.id)){let i=new Yt(e,this.liveSocket,this);return this.root.children[this.id][i.id]=i,i.join(),this.childJoins++,!0}}isJoinPending(){return this.joinPending}ackJoin(e){this.childJoins--,this.childJoins===0&&(this.parent?this.parent.ackJoin(this):this.onAllChildJoinsComplete())}onAllChildJoinsComplete(){this.joinCallback(()=>{this.pendingJoinOps.forEach(([e,t])=>{e.isDestroyed()||t()}),this.pendingJoinOps=[]})}update(e,t){if(this.isJoinPending()||this.liveSocket.hasPendingLink()&&this.root.isMain())return this.pendingDiffs.push({diff:e,events:t});this.rendered.mergeDiff(e);let i=!1;this.rendered.isComponentOnlyDiff(e)?this.liveSocket.time("component patch complete",()=>{p.findParentCIDs(this.el,this.rendered.componentCIDs(e)).forEach(s=>{this.componentPatch(this.rendered.getComponent(e,s),s)&&(i=!0)})}):$t(e)||this.liveSocket.time("full patch complete",()=>{let[n,s]=this.renderContainer(e,"update"),r=new Je(this,this.el,this.id,n,s,null);i=this.performPatch(r,!0)}),this.liveSocket.dispatchEvents(t),i&&this.joinNewChildren()}renderContainer(e,t){return this.liveSocket.time(`toString diff (${t})`,()=>{let i=this.el.tagName,n=e?this.rendered.componentCIDs(e).concat(this.pruningCIDs):null,[s,r]=this.rendered.toString(n);return[`<${i}>${s}</${i}>`,r]})}componentPatch(e,t){if($t(e))return!1;let[i,n]=this.rendered.componentToString(t),s=new Je(this,this.el,this.id,i,n,t);return this.performPatch(s,!0)}getHook(e){return this.viewHooks[_e.elementID(e)]}addHook(e){if(_e.elementID(e)||!e.getAttribute)return;let t=e.getAttribute(`data-phx-${Ae}`)||e.getAttribute(this.binding(Ae));if(t&&!this.ownsElement(e))return;let i=this.liveSocket.getHookCallbacks(t);if(i){e.id||F(`no DOM ID for hook "${t}". Hooks require a unique ID on each element.`,e);let n=new _e(this,e,i);return this.viewHooks[_e.elementID(n.el)]=n,n}else t!==null&&F(`unknown hook found for "${t}"`,e)}destroyHook(e){e.__destroyed(),e.__cleanup__(),delete this.viewHooks[_e.elementID(e.el)]}applyPendingUpdates(){this.pendingDiffs.forEach(({diff:e,events:t})=>this.update(e,t)),this.pendingDiffs=[],this.eachChild(e=>e.applyPendingUpdates())}eachChild(e){let t=this.root.children[this.id]||{};for(let i in t)e(this.getChildById(i))}onChannel(e,t){this.liveSocket.onChannel(this.channel,e,i=>{this.isJoinPending()?this.root.pendingJoinOps.push([this,()=>t(i)]):this.liveSocket.requestDOMUpdate(()=>t(i))})}bindChannel(){this.liveSocket.onChannel(this.channel,"diff",e=>{this.liveSocket.requestDOMUpdate(()=>{this.applyDiff("update",e,({diff:t,events:i})=>this.update(t,i))})}),this.onChannel("redirect",({to:e,flash:t})=>this.onRedirect({to:e,flash:t})),this.onChannel("live_patch",e=>this.onLivePatch(e)),this.onChannel("live_redirect",e=>this.onLiveRedirect(e)),this.channel.onError(e=>this.onError(e)),this.channel.onClose(e=>this.onClose(e))}destroyAllChildren(){this.eachChild(e=>e.destroy())}onLiveRedirect(e){let{to:t,kind:i,flash:n}=e,s=this.expandURL(t);this.liveSocket.historyRedirect(s,i,n)}onLivePatch(e){let{to:t,kind:i}=e;this.href=this.expandURL(t),this.liveSocket.historyPatch(t,i)}expandURL(e){return e.startsWith("/")?`${window.location.protocol}//${window.location.host}${e}`:e}onRedirect({to:e,flash:t}){this.liveSocket.redirect(e,t)}isDestroyed(){return this.destroyed}joinDead(){this.isDead=!0}join(e){this.showLoader(this.liveSocket.loaderTimeout),this.bindChannel(),this.isMain()&&(this.stopCallback=this.liveSocket.withPageLoading({to:this.href,kind:"initial"})),this.joinCallback=t=>{t=t||function(){},e?e(this.joinCount,t):t()},this.liveSocket.wrapPush(this,{timeout:!1},()=>this.channel.join().receive("ok",t=>{this.isDestroyed()||this.liveSocket.requestDOMUpdate(()=>this.onJoin(t))}).receive("error",t=>!this.isDestroyed()&&this.onJoinError(t)).receive("timeout",()=>!this.isDestroyed()&&this.onJoinError({reason:"timeout"})))}onJoinError(e){if(e.reason==="reload")return this.log("error",()=>[`failed mount with ${e.status}. Falling back to page request`,e]),this.onRedirect({to:this.href});if(e.reason==="unauthorized"||e.reason==="stale")return this.log("error",()=>["unauthorized live_redirect. Falling back to page request",e]),this.onRedirect({to:this.href});if((e.redirect||e.live_redirect)&&(this.joinPending=!1,this.channel.leave()),e.redirect)return this.onRedirect(e.redirect);if(e.live_redirect)return this.onLiveRedirect(e.live_redirect);this.log("error",()=>["unable to join",e]),this.liveSocket.isConnected()&&this.liveSocket.reloadWithJitter(this)}onClose(e){if(!this.isDestroyed()){if(this.liveSocket.hasPendingLink()&&e!=="leave")return this.liveSocket.reloadWithJitter(this);this.destroyAllChildren(),this.liveSocket.dropActiveElement(this),document.activeElement&&document.activeElement.blur(),this.liveSocket.isUnloaded()&&this.showLoader(Ri)}}onError(e){this.onClose(e),this.liveSocket.isConnected()&&this.log("error",()=>["view crashed",e]),this.liveSocket.isUnloaded()||this.displayError()}displayError(){this.isMain()&&p.dispatchEvent(window,"phx:page-loading-start",{detail:{to:this.href,kind:"error"}}),this.showLoader(),this.setContainerClasses(at,Lt),this.execAll(this.binding("disconnected"))}pushWithReply(e,t,i,n=function(){}){if(!this.isConnected())return;let[s,[r],a]=e?e():[null,[],{}],o=function(){};return(a.page_loading||r&&r.getAttribute(this.binding(xt))!==null)&&(o=this.liveSocket.withPageLoading({kind:"element",target:r})),typeof i.cid!="number"&&delete i.cid,this.liveSocket.wrapPush(this,{timeout:!0},()=>this.channel.push(t,i,Di).receive("ok",l=>{let d=u=>{l.redirect&&this.onRedirect(l.redirect),l.live_patch&&this.onLivePatch(l.live_patch),l.live_redirect&&this.onLiveRedirect(l.live_redirect),s!==null&&this.undoRefs(s),o(),n(l,u)};l.diff?this.liveSocket.requestDOMUpdate(()=>{this.applyDiff("update",l.diff,({diff:u,reply:b,events:g})=>{this.update(u,g),d(b)})}):d(null)}))}undoRefs(e){!this.isConnected()||p.all(document,`[${ue}="${this.id}"][${te}="${e}"]`,t=>{let i=t.getAttribute(He);t.removeAttribute(te),t.removeAttribute(ue),t.getAttribute(lt)!==null&&(t.readOnly=!1,t.removeAttribute(lt)),i!==null&&(t.disabled=i==="true",t.removeAttribute(He)),Wt.forEach(r=>p.removeClass(t,r));let n=t.getAttribute(Ne);n!==null&&(t.innerText=n,t.removeAttribute(Ne));let s=p.private(t,te);if(s){let r=this.triggerBeforeUpdateHook(t,s);Je.patchEl(t,s,this.liveSocket.getActiveElement()),r&&r.__updated(),p.deletePrivate(t,te)}})}putRef(e,t,i={}){let n=this.ref++,s=this.binding(bt);return i.loading&&(e=e.concat(p.all(document,i.loading))),e.forEach(r=>{r.classList.add(`phx-${t}-loading`),r.setAttribute(te,n),r.setAttribute(ue,this.el.id);let a=r.getAttribute(s);a!==null&&(r.getAttribute(Ne)||r.setAttribute(Ne,r.innerText),a!==""&&(r.innerText=a),r.setAttribute("disabled",""))}),[n,e,i]}componentID(e){let t=e.getAttribute&&e.getAttribute(W);return t?parseInt(t):null}targetComponentID(e,t,i={}){if(oe(t))return t;let n=e.getAttribute(this.binding("target"));return oe(n)?parseInt(n):t&&(n!==null||i.target)?this.closestComponentID(t):null}closestComponentID(e){return oe(e)?e:e?le(e.closest(`[${W}]`),t=>this.ownsElement(t)&&this.componentID(t)):null}pushHookEvent(e,t,i,n){if(!this.isConnected())return this.log("hook",()=>["unable to push hook event. LiveView not connected",t,i]),!1;let[s,r,a]=this.putRef([],"hook");return this.pushWithReply(()=>[s,r,a],"event",{type:"hook",event:t,value:i,cid:this.closestComponentID(e)},(o,l)=>n(l,s)),s}extractMeta(e,t,i){let n=this.binding("value-");for(let s=0;s<e.attributes.length;s++){t||(t={});let r=e.attributes[s].name;r.startsWith(n)&&(t[r.replace(n,"")]=e.getAttribute(r))}if(e.value!==void 0&&(t||(t={}),t.value=e.value,e.tagName==="INPUT"&&Kt.indexOf(e.type)>=0&&!e.checked&&delete t.value),i){t||(t={});for(let s in i)t[s]=i[s]}return t}pushEvent(e,t,i,n,s,r={}){this.pushWithReply(()=>this.putRef([t],e,r),"event",{type:e,event:n,value:this.extractMeta(t,s,r.value),cid:this.targetComponentID(t,i,r)})}pushFileProgress(e,t,i,n=function(){}){this.liveSocket.withinOwners(e.form,(s,r)=>{s.pushWithReply(null,"progress",{event:e.getAttribute(s.binding(Pi)),ref:e.getAttribute(fe),entry_ref:t,progress:i,cid:s.targetComponentID(e.form,r)},n)})}pushInput(e,t,i,n,s,r){let a,o=oe(i)?i:this.targetComponentID(e.form,t),l=()=>this.putRef([e,e.form],"change",s),d;e.getAttribute(this.binding("change"))?d=ze(e.form,{_target:s._target},[e.name]):d=ze(e.form,{_target:s._target}),p.isUploadInput(e)&&e.files&&e.files.length>0&&O.trackFiles(e,Array.from(e.files)),a=O.serializeUploads(e);let u={type:"form",event:n,value:d,uploads:a,cid:o};this.pushWithReply(l,"event",u,b=>{if(p.showError(e,this.liveSocket.binding(Xe)),p.isUploadInput(e)&&e.getAttribute("data-phx-auto-upload")!==null){if(O.filesAwaitingPreflight(e).length>0){let[g,c]=l();this.uploadFiles(e.form,t,g,o,f=>{r&&r(b),this.triggerAwaitingSubmit(e.form)})}}else r&&r(b)})}triggerAwaitingSubmit(e){let t=this.getScheduledSubmit(e);if(t){let[i,n,s,r]=t;this.cancelSubmit(e),r()}}getScheduledSubmit(e){return this.formSubmits.find(([t,i,n,s])=>t.isSameNode(e))}scheduleSubmit(e,t,i,n){if(this.getScheduledSubmit(e))return!0;this.formSubmits.push([e,t,i,n])}cancelSubmit(e){this.formSubmits=this.formSubmits.filter(([t,i,n])=>t.isSameNode(e)?(this.undoRefs(i),!1):!0)}disableForm(e,t={}){let i=u=>!(Pe(u,`${this.binding(Ge)}=ignore`,u.form)||Pe(u,"data-phx-update=ignore",u.form)),n=u=>u.hasAttribute(this.binding(bt)),s=u=>u.tagName=="BUTTON",r=u=>["INPUT","TEXTAREA","SELECT"].includes(u.tagName),a=Array.from(e.elements),o=a.filter(n),l=a.filter(s).filter(i),d=a.filter(r).filter(i);return l.forEach(u=>{u.setAttribute(He,u.disabled),u.disabled=!0}),d.forEach(u=>{u.setAttribute(lt,u.readOnly),u.readOnly=!0,u.files&&(u.setAttribute(He,u.disabled),u.disabled=!0)}),e.setAttribute(this.binding(xt),""),this.putRef([e].concat(o).concat(l).concat(d),"submit",t)}pushFormSubmit(e,t,i,n,s,r){let a=()=>this.disableForm(e,s),o=this.targetComponentID(e,t);if(O.hasUploadsInProgress(e)){let[l,d]=a(),u=()=>this.pushFormSubmit(e,n,t,i,s,r);return this.scheduleSubmit(e,l,s,u)}else if(O.inputsAwaitingPreflight(e).length>0){let[l,d]=a(),u=()=>[l,d,s];this.uploadFiles(e,t,l,o,b=>{let g=ze(e,{submitter:n});this.pushWithReply(u,"event",{type:"form",event:i,value:g,cid:o},r)})}else{let l=ze(e,{submitter:n});this.pushWithReply(a,"event",{type:"form",event:i,value:l,cid:o},r)}}uploadFiles(e,t,i,n,s){let r=this.joinCount,a=O.activeFileInputs(e),o=a.length;a.forEach(l=>{let d=new O(l,this,()=>{o--,o===0&&s()});this.uploaders[l]=d;let u=d.entries().map(g=>g.toPreflightPayload()),b={ref:l.getAttribute(fe),entries:u,cid:this.targetComponentID(l.form,t)};this.log("upload",()=>["sending preflight request",b]),this.pushWithReply(null,"allow_upload",b,g=>{if(this.log("upload",()=>["got preflight response",g]),g.error){this.undoRefs(i);let[c,f]=g.error;this.log("upload",()=>[`error for entry ${c}`,f])}else{let c=f=>{this.channel.onError(()=>{this.joinCount===r&&f()})};d.initAdapterUpload(g,c,this.liveSocket)}})})}dispatchUploads(e,t){let i=p.findUploadInputs(this.el).filter(n=>n.name===e);i.length===0?F(`no live file inputs found matching the name "${e}"`):i.length>1?F(`duplicate live file inputs found matching the name "${e}"`):p.dispatchEvent(i[0],Xt,{detail:{files:t}})}pushFormRecovery(e,t,i){this.liveSocket.withinOwners(e,(n,s)=>{let r=Array.from(e.elements).find(o=>p.isFormInput(o)&&o.type!=="hidden"&&!o.hasAttribute(this.binding("change"))),a=e.getAttribute(this.binding(It))||e.getAttribute(this.binding("change"));ee.exec("change",a,n,r,["push",{_target:r.name,newCid:t,callback:i}])})}pushLinkPatch(e,t,i){let n=this.liveSocket.setPendingLink(e),s=t?()=>this.putRef([t],"click"):null,r=()=>this.liveSocket.redirect(window.location.href),a=this.pushWithReply(s,"live_patch",{url:e},o=>{this.liveSocket.requestDOMUpdate(()=>{o.link_redirect?this.liveSocket.replaceMain(e,null,i,n):(this.liveSocket.commitPendingLink(n)&&(this.href=e),this.applyPendingUpdates(),i&&i(n))})});a?a.receive("timeout",r):r()}formsForRecovery(e){if(this.joinCount===0)return[];let t=this.binding("change"),i=document.createElement("template");return i.innerHTML=e,p.all(this.el,`form[${t}]`).filter(n=>n.id&&this.ownsElement(n)).filter(n=>n.elements.length>0).filter(n=>n.getAttribute(this.binding(It))!=="ignore").map(n=>{let s=i.content.querySelector(`form[id="${n.id}"][${t}="${n.getAttribute(t)}"]`);return s?[n,s,this.targetComponentID(s)]:[n,null,null]}).filter(([n,s,r])=>s)}maybePushComponentsDestroyed(e){let t=e.filter(i=>p.findComponentNodeList(this.el,i).length===0);t.length>0&&(this.pruningCIDs.push(...t),this.pushWithReply(null,"cids_will_destroy",{cids:t},()=>{this.pruningCIDs=this.pruningCIDs.filter(n=>t.indexOf(n)!==-1);let i=t.filter(n=>p.findComponentNodeList(this.el,n).length===0);i.length>0&&this.pushWithReply(null,"cids_destroyed",{cids:i},n=>{this.rendered.pruneCIDs(n.cids)})}))}ownsElement(e){let t=e.closest(me);return e.getAttribute(pe)===this.id||t&&t.id===this.id||!t&&this.isDead}submitForm(e,t,i,n,s={}){p.putPrivate(e,Ke,!0);let r=this.liveSocket.binding(Xe),a=Array.from(e.elements);a.forEach(o=>p.putPrivate(o,Ke,!0)),this.liveSocket.blurActiveElement(this),this.pushFormSubmit(e,t,i,n,s,()=>{a.forEach(o=>p.showError(o,r)),this.liveSocket.restorePreviouslyActiveFocus()})}binding(e){return this.liveSocket.binding(e)}},Zt=class{constructor(e,t,i={}){if(this.unloaded=!1,!t||t.constructor.name==="Object")throw new Error(`
      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:

          import {Socket} from "phoenix"
          import {LiveSocket} from "phoenix_live_view"
          let liveSocket = new LiveSocket("/live", Socket, {...})
      `);this.socket=new t(e,i),this.bindingPrefix=i.bindingPrefix||Ii,this.opts=i,this.params=ut(i.params||{}),this.viewLogger=i.viewLogger,this.metadataCallbacks=i.metadata||{},this.defaults=Object.assign(We(Oi),i.defaults||{}),this.activeElement=null,this.prevActive=null,this.silenced=!1,this.main=null,this.outgoingMainEl=null,this.clickStartedAtTarget=null,this.linkRef=1,this.roots={},this.href=window.location.href,this.pendingLink=null,this.currentLocation=We(window.location),this.hooks=i.hooks||{},this.uploaders=i.uploaders||{},this.loaderTimeout=i.loaderTimeout||Li,this.reloadWithJitterTimer=null,this.maxReloads=i.maxReloads||vi,this.reloadJitterMin=i.reloadJitterMin||bi,this.reloadJitterMax=i.reloadJitterMax||yi,this.failsafeJitter=i.failsafeJitter||wi,this.localStorage=i.localStorage||window.localStorage,this.sessionStorage=i.sessionStorage||window.sessionStorage,this.boundTopLevelEvents=!1,this.domCallbacks=Object.assign({onNodeAdded:ut(),onBeforeElUpdated:ut()},i.dom||{}),this.transitions=new hn,window.addEventListener("pagehide",n=>{this.unloaded=!0}),this.socket.onOpen(()=>{this.isUnloaded()&&window.location.reload()})}isProfileEnabled(){return this.sessionStorage.getItem(dt)==="true"}isDebugEnabled(){return this.sessionStorage.getItem($e)==="true"}isDebugDisabled(){return this.sessionStorage.getItem($e)==="false"}enableDebug(){this.sessionStorage.setItem($e,"true")}enableProfiling(){this.sessionStorage.setItem(dt,"true")}disableDebug(){this.sessionStorage.setItem($e,"false")}disableProfiling(){this.sessionStorage.removeItem(dt)}enableLatencySim(e){this.enableDebug(),console.log("latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable"),this.sessionStorage.setItem(ct,e)}disableLatencySim(){this.sessionStorage.removeItem(ct)}getLatencySim(){let e=this.sessionStorage.getItem(ct);return e?parseInt(e):null}getSocket(){return this.socket}connect(){window.location.hostname==="localhost"&&!this.isDebugDisabled()&&this.enableDebug();let e=()=>{this.joinRootViews()?(this.bindTopLevelEvents(),this.socket.connect()):this.main?this.socket.connect():this.bindTopLevelEvents({dead:!0}),this.joinDeadView()};["complete","loaded","interactive"].indexOf(document.readyState)>=0?e():document.addEventListener("DOMContentLoaded",()=>e())}disconnect(e){clearTimeout(this.reloadWithJitterTimer),this.socket.disconnect(e)}replaceTransport(e){clearTimeout(this.reloadWithJitterTimer),this.socket.replaceTransport(e),this.connect()}execJS(e,t,i=null){this.owner(e,n=>ee.exec(i,t,n,e))}unload(){this.unloaded||(this.main&&this.isConnected()&&this.log(this.main,"socket",()=>["disconnect for page nav"]),this.unloaded=!0,this.destroyAllViews(),this.disconnect())}triggerDOM(e,t){this.domCallbacks[e](...t)}time(e,t){if(!this.isProfileEnabled()||!console.time)return t();console.time(e);let i=t();return console.timeEnd(e),i}log(e,t,i){if(this.viewLogger){let[n,s]=i();this.viewLogger(e,t,n,s)}else if(this.isDebugEnabled()){let[n,s]=i();Mi(e,t,n,s)}}requestDOMUpdate(e){this.transitions.after(e)}transition(e,t,i=function(){}){this.transitions.addTransition(e,t,i)}onChannel(e,t,i){e.on(t,n=>{let s=this.getLatencySim();s?setTimeout(()=>i(n),s):i(n)})}wrapPush(e,t,i){let n=this.getLatencySim(),s=e.joinCount;if(!n)return this.isConnected()&&t.timeout?i().receive("timeout",()=>{e.joinCount===s&&!e.isDestroyed()&&this.reloadWithJitter(e,()=>{this.log(e,"timeout",()=>["received timeout while communicating with server. Falling back to hard refresh for recovery"])})}):i();let r={receives:[],receive(a,o){this.receives.push([a,o])}};return setTimeout(()=>{e.isDestroyed()||r.receives.reduce((a,[o,l])=>a.receive(o,l),i())},n),r}reloadWithJitter(e,t){clearTimeout(this.reloadWithJitterTimer),this.disconnect();let i=this.reloadJitterMin,n=this.reloadJitterMax,s=Math.floor(Math.random()*(n-i+1))+i,r=Q.updateLocal(this.localStorage,window.location.pathname,qt,0,a=>a+1);r>this.maxReloads&&(s=this.failsafeJitter),this.reloadWithJitterTimer=setTimeout(()=>{e.isDestroyed()||e.isConnected()||(e.destroy(),t?t():this.log(e,"join",()=>[`encountered ${r} consecutive reloads`]),r>this.maxReloads&&this.log(e,"join",()=>[`exceeded ${this.maxReloads} consecutive reloads. Entering failsafe mode`]),this.hasPendingLink()?window.location=this.pendingLink:window.location.reload())},s)}getHookCallbacks(e){return e&&e.startsWith("Phoenix.")?zi[e.split(".")[1]]:this.hooks[e]}isUnloaded(){return this.unloaded}isConnected(){return this.socket.isConnected()}getBindingPrefix(){return this.bindingPrefix}binding(e){return`${this.getBindingPrefix()}${e}`}channel(e,t){return this.socket.channel(e,t)}joinDeadView(){let e=document.body;if(e&&!this.isPhxView(e)&&!this.isPhxView(document.firstElementChild)){let t=this.newRootView(e);t.setHref(this.getHref()),t.joinDead(),this.main||(this.main=t),window.requestAnimationFrame(()=>t.execNewMounted())}}joinRootViews(){let e=!1;return p.all(document,`${me}:not([${pe}])`,t=>{if(!this.getRootById(t.id)){let i=this.newRootView(t);i.setHref(this.getHref()),i.join(),t.hasAttribute(wt)&&(this.main=i)}e=!0}),e}redirect(e,t){this.unload(),Q.redirect(e,t)}replaceMain(e,t,i=null,n=this.setPendingLink(e)){let s=this.currentLocation.href;this.outgoingMainEl=this.outgoingMainEl||this.main.el;let r=p.cloneNode(this.outgoingMainEl,"");this.main.showLoader(this.loaderTimeout),this.main.destroy(),this.main=this.newRootView(r,t,s),this.main.setRedirect(e),this.transitionRemoves(),this.main.join((a,o)=>{a===1&&this.commitPendingLink(n)&&this.requestDOMUpdate(()=>{p.findPhxSticky(document).forEach(l=>r.appendChild(l)),this.outgoingMainEl.replaceWith(r),this.outgoingMainEl=null,i&&requestAnimationFrame(i),o()})})}transitionRemoves(e){let t=this.binding("remove");e=e||p.all(document,`[${t}]`),e.forEach(i=>{document.body.contains(i)&&this.execJS(i,i.getAttribute(t),"remove")})}isPhxView(e){return e.getAttribute&&e.getAttribute(he)!==null}newRootView(e,t,i){let n=new Yt(e,this,null,t,i);return this.roots[n.id]=n,n}owner(e,t){let i=le(e.closest(me),n=>this.getViewByEl(n))||this.main;i&&t(i)}withinOwners(e,t){this.owner(e,i=>t(i,e))}getViewByEl(e){let t=e.getAttribute(Le);return le(this.getRootById(t),i=>i.getDescendentByEl(e))}getRootById(e){return this.roots[e]}destroyAllViews(){for(let e in this.roots)this.roots[e].destroy(),delete this.roots[e];this.main=null}destroyViewByEl(e){let t=this.getRootById(e.getAttribute(Le));t&&t.id===e.id?(t.destroy(),delete this.roots[t.id]):t&&t.destroyDescendent(e.id)}setActiveElement(e){if(this.activeElement===e)return;this.activeElement=e;let t=()=>{e===this.activeElement&&(this.activeElement=null),e.removeEventListener("mouseup",this),e.removeEventListener("touchend",this)};e.addEventListener("mouseup",t),e.addEventListener("touchend",t)}getActiveElement(){return document.activeElement===document.body?this.activeElement||document.activeElement:document.activeElement||document.body}dropActiveElement(e){this.prevActive&&e.ownsElement(this.prevActive)&&(this.prevActive=null)}restorePreviouslyActiveFocus(){this.prevActive&&this.prevActive!==document.body&&this.prevActive.focus()}blurActiveElement(){this.prevActive=this.getActiveElement(),this.prevActive!==document.body&&this.prevActive.blur()}bindTopLevelEvents({dead:e}={}){this.boundTopLevelEvents||(this.boundTopLevelEvents=!0,this.socket.onClose(t=>{if(t&&t.code===1001)return this.unload();if(t&&t.code===1e3&&this.main)return this.reloadWithJitter(this.main)}),document.body.addEventListener("click",function(){}),window.addEventListener("pageshow",t=>{t.persisted&&(this.getSocket().disconnect(),this.withPageLoading({to:window.location.href,kind:"redirect"}),window.location.reload())},!0),e||this.bindNav(),this.bindClicks(),e||this.bindForms(),this.bind({keyup:"keyup",keydown:"keydown"},(t,i,n,s,r,a)=>{let o=s.getAttribute(this.binding(xi)),l=t.key&&t.key.toLowerCase();if(o&&o.toLowerCase()!==l)return;let d=ye({key:t.key},this.eventMeta(i,t,s));ee.exec(i,r,n,s,["push",{data:d}])}),this.bind({blur:"focusout",focus:"focusin"},(t,i,n,s,r,a)=>{if(!a){let o=ye({key:t.key},this.eventMeta(i,t,s));ee.exec(i,r,n,s,["push",{data:o}])}}),this.bind({blur:"blur",focus:"focus"},(t,i,n,s,r,a,o)=>{if(o==="window"){let l=this.eventMeta(i,t,s);ee.exec(i,a,n,s,["push",{data:l}])}}),window.addEventListener("dragover",t=>t.preventDefault()),window.addEventListener("drop",t=>{t.preventDefault();let i=le(Pe(t.target,this.binding(Tt)),r=>r.getAttribute(this.binding(Tt))),n=i&&document.getElementById(i),s=Array.from(t.dataTransfer.files||[]);!n||n.disabled||s.length===0||!(n.files instanceof FileList)||(O.trackFiles(n,s,t.dataTransfer),n.dispatchEvent(new Event("input",{bubbles:!0})))}),this.on(Xt,t=>{let i=t.target;if(!p.isUploadInput(i))return;let n=Array.from(t.detail.files||[]).filter(s=>s instanceof File||s instanceof Blob);O.trackFiles(i,n),i.dispatchEvent(new Event("input",{bubbles:!0}))}))}eventMeta(e,t,i){let n=this.metadataCallbacks[e];return n?n(t,i):{}}setPendingLink(e){return this.linkRef++,this.pendingLink=e,this.linkRef}commitPendingLink(e){return this.linkRef!==e?!1:(this.href=this.pendingLink,this.pendingLink=null,!0)}getHref(){return this.href}hasPendingLink(){return!!this.pendingLink}bind(e,t){for(let i in e){let n=e[i];this.on(n,s=>{let r=this.binding(i),a=this.binding(`window-${i}`),o=s.target.getAttribute&&s.target.getAttribute(r);o?this.debounce(s.target,s,n,()=>{this.withinOwners(s.target,l=>{t(s,i,l,s.target,o,null)})}):p.all(document,`[${a}]`,l=>{let d=l.getAttribute(a);this.debounce(l,s,n,()=>{this.withinOwners(l,u=>{t(s,i,u,l,d,"window")})})})})}}bindClicks(){window.addEventListener("click",e=>this.clickStartedAtTarget=e.target),this.bindClick("click","click",!1),this.bindClick("mousedown","capture-click",!0)}bindClick(e,t,i){let n=this.binding(t);window.addEventListener(e,s=>{let r=null;if(i)r=s.target.matches(`[${n}]`)?s.target:s.target.querySelector(`[${n}]`);else{let o=this.clickStartedAtTarget||s.target;r=Pe(o,n),this.dispatchClickAway(s,o),this.clickStartedAtTarget=null}let a=r&&r.getAttribute(n);if(!a){let o=s.target instanceof HTMLAnchorElement?s.target.getAttribute("href"):null;!i&&o!==null&&!p.wantsNewTab(s)&&p.isNewPageHref(o,window.location)&&this.unload();return}r.getAttribute("href")==="#"&&s.preventDefault(),this.debounce(r,s,"click",()=>{this.withinOwners(r,o=>{ee.exec("click",a,o,r,["push",{data:this.eventMeta("click",s,r)}])})})},i)}dispatchClickAway(e,t){let i=this.binding("click-away");p.all(document,`[${i}]`,n=>{n.isSameNode(t)||n.contains(t)||this.withinOwners(e.target,s=>{let r=n.getAttribute(i);ee.isVisible(n)&&ee.exec("click",r,s,n,["push",{data:this.eventMeta("click",e,e.target)}])})})}bindNav(){if(!Q.canPushState())return;history.scrollRestoration&&(history.scrollRestoration="manual");let e=null;window.addEventListener("scroll",t=>{clearTimeout(e),e=setTimeout(()=>{Q.updateCurrentState(i=>Object.assign(i,{scroll:window.scrollY}))},100)}),window.addEventListener("popstate",t=>{if(!this.registerNewLocation(window.location))return;let{type:i,id:n,root:s,scroll:r}=t.state||{},a=window.location.href;this.requestDOMUpdate(()=>{this.main.isConnected()&&i==="patch"&&n===this.main.id?this.main.pushLinkPatch(a,null,()=>{this.maybeScroll(r)}):this.replaceMain(a,null,()=>{s&&this.replaceRootHistory(),this.maybeScroll(r)})})},!1),window.addEventListener("click",t=>{let i=Pe(t.target,rt),n=i&&i.getAttribute(rt);if(!n||!this.isConnected()||!this.main||p.wantsNewTab(t))return;let s=i.href,r=i.getAttribute(ki);t.preventDefault(),t.stopImmediatePropagation(),this.pendingLink!==s&&this.requestDOMUpdate(()=>{if(n==="patch")this.pushHistoryPatch(s,r,i);else if(n==="redirect")this.historyRedirect(s,r);else throw new Error(`expected ${rt} to be "patch" or "redirect", got: ${n}`);let a=i.getAttribute(this.binding("click"));a&&this.requestDOMUpdate(()=>this.execJS(i,a,"click"))})},!1)}maybeScroll(e){typeof e=="number"&&requestAnimationFrame(()=>{window.scrollTo(0,e)})}dispatchEvent(e,t={}){p.dispatchEvent(window,`phx:${e}`,{detail:t})}dispatchEvents(e){e.forEach(([t,i])=>this.dispatchEvent(t,i))}withPageLoading(e,t){p.dispatchEvent(window,"phx:page-loading-start",{detail:e});let i=()=>p.dispatchEvent(window,"phx:page-loading-stop",{detail:e});return t?t(i):i}pushHistoryPatch(e,t,i){if(!this.isConnected())return Q.redirect(e);this.withPageLoading({to:e,kind:"patch"},n=>{this.main.pushLinkPatch(e,i,s=>{this.historyPatch(e,t,s),n()})})}historyPatch(e,t,i=this.setPendingLink(e)){!this.commitPendingLink(i)||(Q.pushState(t,{type:"patch",id:this.main.id},e),this.registerNewLocation(window.location))}historyRedirect(e,t,i){if(!this.isConnected())return Q.redirect(e,i);if(/^\/$|^\/[^\/]+.*$/.test(e)){let{protocol:s,host:r}=window.location;e=`${s}//${r}${e}`}let n=window.scrollY;this.withPageLoading({to:e,kind:"redirect"},s=>{this.replaceMain(e,i,()=>{Q.pushState(t,{type:"redirect",id:this.main.id,scroll:n},e),this.registerNewLocation(window.location),s()})})}replaceRootHistory(){Q.pushState("replace",{root:!0,type:"patch",id:this.main.id})}registerNewLocation(e){let{pathname:t,search:i}=this.currentLocation;return t+i===e.pathname+e.search?!1:(this.currentLocation=We(e),!0)}bindForms(){let e=0,t=!1;this.on("submit",i=>{let n=i.target.getAttribute(this.binding("submit")),s=i.target.getAttribute(this.binding("change"));!t&&s&&!n&&(t=!0,i.preventDefault(),this.withinOwners(i.target,r=>{r.disableForm(i.target),window.requestAnimationFrame(()=>{p.isUnloadableFormSubmit(i)&&this.unload(),i.target.submit()})}))},!0),this.on("submit",i=>{let n=i.target.getAttribute(this.binding("submit"));if(!n){p.isUnloadableFormSubmit(i)&&this.unload();return}i.preventDefault(),i.target.disabled=!0,this.withinOwners(i.target,s=>{ee.exec("submit",n,s,i.target,["push",{submitter:i.submitter}])})},!1);for(let i of["change","input"])this.on(i,n=>{let s=this.binding("change"),r=n.target,a=r.getAttribute(s),o=r.form&&r.form.getAttribute(s),l=a||o;if(!l||r.type==="number"&&r.validity&&r.validity.badInput)return;let d=a?r:r.form,u=e;e++;let{at:b,type:g}=p.private(r,"prev-iteration")||{};b===u-1&&i!==g||(p.putPrivate(r,"prev-iteration",{at:u,type:i}),this.debounce(r,n,i,()=>{this.withinOwners(d,c=>{p.putPrivate(r,vt,!0),p.isTextualInput(r)||this.setActiveElement(r),ee.exec("change",l,c,r,["push",{_target:n.target.name,dispatcher:d}])})}))},!1);this.on("reset",i=>{let n=i.target;p.resetForm(n,this.binding(Xe));let s=Array.from(n.elements).find(r=>r.type==="reset");window.requestAnimationFrame(()=>{s.dispatchEvent(new Event("input",{bubbles:!0,cancelable:!1}))})})}debounce(e,t,i,n){if(i==="blur"||i==="focusout")return n();let s=this.binding(Ti),r=this.binding(_i),a=this.defaults.debounce.toString(),o=this.defaults.throttle.toString();this.withinOwners(e,l=>{let d=()=>!l.isDestroyed()&&document.body.contains(e);p.debounce(e,t,s,a,r,o,d,()=>{n()})})}silenceEvents(e){this.silenced=!0,e(),this.silenced=!1}on(e,t){window.addEventListener(e,i=>{this.silenced||t(i)})}},hn=class{constructor(){this.transitions=new Set,this.pendingOps=[]}reset(){this.transitions.forEach(e=>{clearTimeout(e),this.transitions.delete(e)}),this.flushPendingOps()}after(e){this.size()===0?e():this.pushPendingOp(e)}addTransition(e,t,i){t();let n=setTimeout(()=>{this.transitions.delete(n),i(),this.flushPendingOps()},e);this.transitions.add(n)}pushPendingOp(e){this.pendingOps.push(e)}size(){return this.transitions.size}flushPendingOps(){if(this.size()>0)return;let e=this.pendingOps.shift();e&&(e(),this.flushPendingOps())}};var Ze=di(Qt());window.toggleNode=e=>{e.parentNode.querySelector(".menu-list").classList.toggle("is-hidden");let t=e.querySelector("span.icon > i");t.classList.toggle("fa-folder-open"),t.classList.toggle("fa-folder")};var ve={};ve.EventLog={updated(){let e=this.el.parentNode;e.scrollTop=e.scrollHeight}};window.handleEnableLatencySimClick=function(e){let t=document.getElementById("playground-iframe").contentWindow.liveSocket,i=document.getElementById("debug_profile_latency_sim_value");if(e.checked){i.disabled=!1;let n=i.value||100;i.value=n,t.enableLatencySim(n)}else t.disableLatencySim(),i.disabled=!0;ei()};window.handleEnableDebugClick=function(e){let t=document.getElementById("playground-iframe").contentWindow.liveSocket;e.checked?t.enableDebug():t.disableDebug()};window.handleEnableProfileClick=function(e){let t=document.getElementById("playground-iframe").contentWindow.liveSocket;e.checked?t.enableProfiling():t.disableProfiling()};window.handleLatencySimValueBlur=function(e){let t=document.getElementById("playground-iframe").contentWindow.liveSocket,i=t.getLatencySim();if(e.value!=i){let n=e.value||1e3;e.value=n,t.enableLatencySim(n)}};function cn(e){let t=document.getElementById("playground-tools-debug-profile"),i=document.getElementById("playground-tools-debug-profile-disabled");if(!e){t.hidden=!0,i.hidden=!1;return}t.hidden=!1,i.hidden=!0;let n=document.getElementById("debug_profile_enable_debug");n.checked=e.isDebugEnabled();let s=document.getElementById("debug_profile_enable_profile");s.checked=e.isProfileEnabled();let r=document.getElementById("debug_profile_enable_latency_sim"),a=document.getElementById("debug_profile_latency_sim_value"),o=e.getLatencySim();o&&(r.checked=!0,a.value=o),ei()}function ei(){let e=document.getElementById("playground-iframe").contentWindow.liveSocket,t=document.getElementById("playground-tab-label");e.getLatencySim()?t.innerHTML='Playground <span class="is-size-6" title="Latency simulator is enabled">\u26A0\uFE0F</span>':t.innerText="Playground"}function ti(e){if(!e){console.log("[Catalogue] window.liveSocket has not been set. Debug/Profile tab will be disabled.");return}if(e.patched)return;let t=e.currentLocation.pathname,i=`phx:live-socket:debug:${t}`,n=`phx:live-socket:profiling:${t}`,s=`phx:live-socket:latency-sim:${t}`;e.enableLatencySim=function(r){console.log(`latency simulator enabled as ${r}ms for the duration of this browser session.`),sessionStorage.setItem(s,r)},e.disableLatencySim=function(){sessionStorage.removeItem(s)},e.getLatencySim=function(){let r=sessionStorage.getItem(s);return r?parseInt(r):null},e.isDebugEnabled=function(){return sessionStorage.getItem(i)==="true"},e.enableDebug=function(){sessionStorage.setItem(i,"true")},e.disableDebug=function(){sessionStorage.removeItem(i)},e.isProfileEnabled=function(){return sessionStorage.getItem(n)==="true"},e.enableProfiling=function(){sessionStorage.setItem(n,"true")},e.disableProfiling=function(){sessionStorage.removeItem(n)},e.patched=!0}var un=(e,t,i,n)=>{window.liveSocket.isDebugEnabled()?console.log(`${e.id} ${t}: ${i} - `,n):e.id=="playground"&&(ti(e.liveSocket),e.liveSocket.isDebugEnabled()&&console.log(`${e.id} ${t}: ${i} - `,n))};ve.IframeBody={mounted(){let e=this.el;e.addEventListener("load",i=>{if(e.id=="playground-iframe"){let n=e.contentWindow.liveSocket;ti(n),cn(n)}});let t;e.contentWindow.addEventListener("resize",i=>{if(e.id=="playground-iframe"){e.offsetWidth>e.parentElement.offsetWidth&&(e.style.width="100%");let n=this;clearTimeout(t),t=setTimeout(function(){n.pushEvent("playground_resize",{height:e.style.height,width:e.style.width})},300)}})}};ve.Highlight={mounted(){Ze.default.highlightElement(this.el),Ze.default.highlightElement(this.el)},updated(){Ze.default.highlightElement(this.el)}};ve.Mermaid={mounted(){mermaid.init(void 0,`#${this.el.id}`)}};ve.SectionHeading={mounted(){let e=document.createElement("div");e.innerHTML=`<a href="#${this.el.id}" class="hover-link">
      <span class="icon-link" aria-hidden="true">
        <svg viewBox="0 0 16 16" version="1.1" width="20" height="20" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg>
      </span>
    </a>`,this.el.insertBefore(e.firstChild,this.el.firstChild)}};var fn=document.querySelector("meta[name='csrf-token']").getAttribute("content"),ii=new Zt("/live",Ct,{params:{_csrf_token:fn},hooks:ve,viewLogger:un});ii.connect();window.liveSocket=ii;})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vZGVwcy9zdXJmYWNlX2NhdGFsb2d1ZS9hc3NldHMvdmVuZG9yL3ByaXNtLmpzIiwgIi4uLy4uLy4uLy4uL2RlcHMvcGhvZW5peF9odG1sL3ByaXYvc3RhdGljL3Bob2VuaXhfaHRtbC5qcyIsICIuLi8uLi8uLi8uLi9kZXBzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvdXRpbHMuanMiLCAiLi4vLi4vLi4vLi4vZGVwcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L2NvbnN0YW50cy5qcyIsICIuLi8uLi8uLi8uLi9kZXBzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvcHVzaC5qcyIsICIuLi8uLi8uLi8uLi9kZXBzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvdGltZXIuanMiLCAiLi4vLi4vLi4vLi4vZGVwcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L2NoYW5uZWwuanMiLCAiLi4vLi4vLi4vLi4vZGVwcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L2FqYXguanMiLCAiLi4vLi4vLi4vLi4vZGVwcy9waG9lbml4L2Fzc2V0cy9qcy9waG9lbml4L2xvbmdwb2xsLmpzIiwgIi4uLy4uLy4uLy4uL2RlcHMvcGhvZW5peC9hc3NldHMvanMvcGhvZW5peC9wcmVzZW5jZS5qcyIsICIuLi8uLi8uLi8uLi9kZXBzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvc2VyaWFsaXplci5qcyIsICIuLi8uLi8uLi8uLi9kZXBzL3Bob2VuaXgvYXNzZXRzL2pzL3Bob2VuaXgvc29ja2V0LmpzIiwgIi4uLy4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2NvbnN0YW50cy5qcyIsICIuLi8uLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9lbnRyeV91cGxvYWRlci5qcyIsICIuLi8uLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy91dGlscy5qcyIsICIuLi8uLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9icm93c2VyLmpzIiwgIi4uLy4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2RvbS5qcyIsICIuLi8uLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy91cGxvYWRfZW50cnkuanMiLCAiLi4vLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvbGl2ZV91cGxvYWRlci5qcyIsICIuLi8uLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9hcmlhLmpzIiwgIi4uLy4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2hvb2tzLmpzIiwgIi4uLy4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2RvbV9wb3N0X21vcnBoX3Jlc3RvcmVyLmpzIiwgIi4uLy4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL25vZGVfbW9kdWxlcy9tb3JwaGRvbS9kaXN0L21vcnBoZG9tLWVzbS5qcyIsICIuLi8uLi8uLi8uLi9kZXBzL3Bob2VuaXhfbGl2ZV92aWV3L2Fzc2V0cy9qcy9waG9lbml4X2xpdmVfdmlldy9kb21fcGF0Y2guanMiLCAiLi4vLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvcmVuZGVyZWQuanMiLCAiLi4vLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvdmlld19ob29rLmpzIiwgIi4uLy4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L2pzLmpzIiwgIi4uLy4uLy4uLy4uL2RlcHMvcGhvZW5peF9saXZlX3ZpZXcvYXNzZXRzL2pzL3Bob2VuaXhfbGl2ZV92aWV3L3ZpZXcuanMiLCAiLi4vLi4vLi4vLi4vZGVwcy9waG9lbml4X2xpdmVfdmlldy9hc3NldHMvanMvcGhvZW5peF9saXZlX3ZpZXcvbGl2ZV9zb2NrZXQuanMiLCAiLi4vLi4vLi4vLi4vZGVwcy9zdXJmYWNlX2NhdGFsb2d1ZS9hc3NldHMvanMvYXBwLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvKiBQcmlzbUpTIDEuMjMuMFxuaHR0cDovLzEyNy4wLjAuMTo4MDgwL2Rvd25sb2FkLmh0bWwjdGhlbWVzPXByaXNtJmxhbmd1YWdlcz1tYXJrdXArY3NzK2NsaWtlK2phdmFzY3JpcHQrc3VyZmFjZStlbGl4aXImcGx1Z2lucz1saW5lLWhpZ2hsaWdodCtsaW5lLW51bWJlcnMgKi9cbnZhciBfc2VsZj1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzpcInVuZGVmaW5lZFwiIT10eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUmJnNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZT9zZWxmOnt9LFByaXNtPWZ1bmN0aW9uKHUpe3ZhciBjPS9cXGJsYW5nKD86dWFnZSk/LShbXFx3LV0rKVxcYi9pLG49MCxlPXt9LE09e21hbnVhbDp1LlByaXNtJiZ1LlByaXNtLm1hbnVhbCxkaXNhYmxlV29ya2VyTWVzc2FnZUhhbmRsZXI6dS5QcmlzbSYmdS5QcmlzbS5kaXNhYmxlV29ya2VyTWVzc2FnZUhhbmRsZXIsdXRpbDp7ZW5jb2RlOmZ1bmN0aW9uIGUobil7cmV0dXJuIG4gaW5zdGFuY2VvZiBXP25ldyBXKG4udHlwZSxlKG4uY29udGVudCksbi5hbGlhcyk6QXJyYXkuaXNBcnJheShuKT9uLm1hcChlKTpuLnJlcGxhY2UoLyYvZyxcIiZhbXA7XCIpLnJlcGxhY2UoLzwvZyxcIiZsdDtcIikucmVwbGFjZSgvXFx1MDBhMC9nLFwiIFwiKX0sdHlwZTpmdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpLnNsaWNlKDgsLTEpfSxvYmpJZDpmdW5jdGlvbihlKXtyZXR1cm4gZS5fX2lkfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9faWRcIix7dmFsdWU6KytufSksZS5fX2lkfSxjbG9uZTpmdW5jdGlvbiB0KGUscil7dmFyIGEsbjtzd2l0Y2gocj1yfHx7fSxNLnV0aWwudHlwZShlKSl7Y2FzZVwiT2JqZWN0XCI6aWYobj1NLnV0aWwub2JqSWQoZSkscltuXSlyZXR1cm4gcltuXTtmb3IodmFyIGkgaW4gYT17fSxyW25dPWEsZSllLmhhc093blByb3BlcnR5KGkpJiYoYVtpXT10KGVbaV0scikpO3JldHVybiBhO2Nhc2VcIkFycmF5XCI6cmV0dXJuIG49TS51dGlsLm9iaklkKGUpLHJbbl0/cltuXTooYT1bXSxyW25dPWEsZS5mb3JFYWNoKGZ1bmN0aW9uKGUsbil7YVtuXT10KGUscil9KSxhKTtkZWZhdWx0OnJldHVybiBlfX0sZ2V0TGFuZ3VhZ2U6ZnVuY3Rpb24oZSl7Zm9yKDtlJiYhYy50ZXN0KGUuY2xhc3NOYW1lKTspZT1lLnBhcmVudEVsZW1lbnQ7cmV0dXJuIGU/KGUuY2xhc3NOYW1lLm1hdGNoKGMpfHxbLFwibm9uZVwiXSlbMV0udG9Mb3dlckNhc2UoKTpcIm5vbmVcIn0sY3VycmVudFNjcmlwdDpmdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBkb2N1bWVudClyZXR1cm4gbnVsbDtpZihcImN1cnJlbnRTY3JpcHRcImluIGRvY3VtZW50KXJldHVybiBkb2N1bWVudC5jdXJyZW50U2NyaXB0O3RyeXt0aHJvdyBuZXcgRXJyb3J9Y2F0Y2goZSl7dmFyIG49KC9hdCBbXihcXHJcXG5dKlxcKCguKik6Lis6LitcXCkkL2kuZXhlYyhlLnN0YWNrKXx8W10pWzFdO2lmKG4pe3ZhciB0PWRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO2Zvcih2YXIgciBpbiB0KWlmKHRbcl0uc3JjPT1uKXJldHVybiB0W3JdfXJldHVybiBudWxsfX0saXNBY3RpdmU6ZnVuY3Rpb24oZSxuLHQpe2Zvcih2YXIgcj1cIm5vLVwiK247ZTspe3ZhciBhPWUuY2xhc3NMaXN0O2lmKGEuY29udGFpbnMobikpcmV0dXJuITA7aWYoYS5jb250YWlucyhyKSlyZXR1cm4hMTtlPWUucGFyZW50RWxlbWVudH1yZXR1cm4hIXR9fSxsYW5ndWFnZXM6e3BsYWluOmUscGxhaW50ZXh0OmUsdGV4dDplLHR4dDplLGV4dGVuZDpmdW5jdGlvbihlLG4pe3ZhciB0PU0udXRpbC5jbG9uZShNLmxhbmd1YWdlc1tlXSk7Zm9yKHZhciByIGluIG4pdFtyXT1uW3JdO3JldHVybiB0fSxpbnNlcnRCZWZvcmU6ZnVuY3Rpb24odCxlLG4scil7dmFyIGE9KHI9cnx8TS5sYW5ndWFnZXMpW3RdLGk9e307Zm9yKHZhciBsIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShsKSl7aWYobD09ZSlmb3IodmFyIG8gaW4gbiluLmhhc093blByb3BlcnR5KG8pJiYoaVtvXT1uW29dKTtuLmhhc093blByb3BlcnR5KGwpfHwoaVtsXT1hW2xdKX12YXIgcz1yW3RdO3JldHVybiByW3RdPWksTS5sYW5ndWFnZXMuREZTKE0ubGFuZ3VhZ2VzLGZ1bmN0aW9uKGUsbil7bj09PXMmJmUhPXQmJih0aGlzW2VdPWkpfSksaX0sREZTOmZ1bmN0aW9uIGUobix0LHIsYSl7YT1hfHx7fTt2YXIgaT1NLnV0aWwub2JqSWQ7Zm9yKHZhciBsIGluIG4paWYobi5oYXNPd25Qcm9wZXJ0eShsKSl7dC5jYWxsKG4sbCxuW2xdLHJ8fGwpO3ZhciBvPW5bbF0scz1NLnV0aWwudHlwZShvKTtcIk9iamVjdFwiIT09c3x8YVtpKG8pXT9cIkFycmF5XCIhPT1zfHxhW2kobyldfHwoYVtpKG8pXT0hMCxlKG8sdCxsLGEpKTooYVtpKG8pXT0hMCxlKG8sdCxudWxsLGEpKX19fSxwbHVnaW5zOnt9LGhpZ2hsaWdodEFsbDpmdW5jdGlvbihlLG4pe00uaGlnaGxpZ2h0QWxsVW5kZXIoZG9jdW1lbnQsZSxuKX0saGlnaGxpZ2h0QWxsVW5kZXI6ZnVuY3Rpb24oZSxuLHQpe3ZhciByPXtjYWxsYmFjazp0LGNvbnRhaW5lcjplLHNlbGVjdG9yOidjb2RlW2NsYXNzKj1cImxhbmd1YWdlLVwiXSwgW2NsYXNzKj1cImxhbmd1YWdlLVwiXSBjb2RlLCBjb2RlW2NsYXNzKj1cImxhbmctXCJdLCBbY2xhc3MqPVwibGFuZy1cIl0gY29kZSd9O00uaG9va3MucnVuKFwiYmVmb3JlLWhpZ2hsaWdodGFsbFwiLHIpLHIuZWxlbWVudHM9QXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KHIuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoci5zZWxlY3RvcikpLE0uaG9va3MucnVuKFwiYmVmb3JlLWFsbC1lbGVtZW50cy1oaWdobGlnaHRcIixyKTtmb3IodmFyIGEsaT0wO2E9ci5lbGVtZW50c1tpKytdOylNLmhpZ2hsaWdodEVsZW1lbnQoYSwhMD09PW4sci5jYWxsYmFjayl9LGhpZ2hsaWdodEVsZW1lbnQ6ZnVuY3Rpb24oZSxuLHQpe3ZhciByPU0udXRpbC5nZXRMYW5ndWFnZShlKSxhPU0ubGFuZ3VhZ2VzW3JdO2UuY2xhc3NOYW1lPWUuY2xhc3NOYW1lLnJlcGxhY2UoYyxcIlwiKS5yZXBsYWNlKC9cXHMrL2csXCIgXCIpK1wiIGxhbmd1YWdlLVwiK3I7dmFyIGk9ZS5wYXJlbnRFbGVtZW50O2kmJlwicHJlXCI9PT1pLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkmJihpLmNsYXNzTmFtZT1pLmNsYXNzTmFtZS5yZXBsYWNlKGMsXCJcIikucmVwbGFjZSgvXFxzKy9nLFwiIFwiKStcIiBsYW5ndWFnZS1cIityKTt2YXIgbD17ZWxlbWVudDplLGxhbmd1YWdlOnIsZ3JhbW1hcjphLGNvZGU6ZS50ZXh0Q29udGVudH07ZnVuY3Rpb24gbyhlKXtsLmhpZ2hsaWdodGVkQ29kZT1lLE0uaG9va3MucnVuKFwiYmVmb3JlLWluc2VydFwiLGwpLGwuZWxlbWVudC5pbm5lckhUTUw9bC5oaWdobGlnaHRlZENvZGUsTS5ob29rcy5ydW4oXCJhZnRlci1oaWdobGlnaHRcIixsKSxNLmhvb2tzLnJ1bihcImNvbXBsZXRlXCIsbCksdCYmdC5jYWxsKGwuZWxlbWVudCl9aWYoTS5ob29rcy5ydW4oXCJiZWZvcmUtc2FuaXR5LWNoZWNrXCIsbCksIWwuY29kZSlyZXR1cm4gTS5ob29rcy5ydW4oXCJjb21wbGV0ZVwiLGwpLHZvaWQodCYmdC5jYWxsKGwuZWxlbWVudCkpO2lmKE0uaG9va3MucnVuKFwiYmVmb3JlLWhpZ2hsaWdodFwiLGwpLGwuZ3JhbW1hcilpZihuJiZ1Lldvcmtlcil7dmFyIHM9bmV3IFdvcmtlcihNLmZpbGVuYW1lKTtzLm9ubWVzc2FnZT1mdW5jdGlvbihlKXtvKGUuZGF0YSl9LHMucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoe2xhbmd1YWdlOmwubGFuZ3VhZ2UsY29kZTpsLmNvZGUsaW1tZWRpYXRlQ2xvc2U6ITB9KSl9ZWxzZSBvKE0uaGlnaGxpZ2h0KGwuY29kZSxsLmdyYW1tYXIsbC5sYW5ndWFnZSkpO2Vsc2UgbyhNLnV0aWwuZW5jb2RlKGwuY29kZSkpfSxoaWdobGlnaHQ6ZnVuY3Rpb24oZSxuLHQpe3ZhciByPXtjb2RlOmUsZ3JhbW1hcjpuLGxhbmd1YWdlOnR9O3JldHVybiBNLmhvb2tzLnJ1bihcImJlZm9yZS10b2tlbml6ZVwiLHIpLHIudG9rZW5zPU0udG9rZW5pemUoci5jb2RlLHIuZ3JhbW1hciksTS5ob29rcy5ydW4oXCJhZnRlci10b2tlbml6ZVwiLHIpLFcuc3RyaW5naWZ5KE0udXRpbC5lbmNvZGUoci50b2tlbnMpLHIubGFuZ3VhZ2UpfSx0b2tlbml6ZTpmdW5jdGlvbihlLG4pe3ZhciB0PW4ucmVzdDtpZih0KXtmb3IodmFyIHIgaW4gdCluW3JdPXRbcl07ZGVsZXRlIG4ucmVzdH12YXIgYT1uZXcgaTtyZXR1cm4gSShhLGEuaGVhZCxlKSxmdW5jdGlvbiBlKG4sdCxyLGEsaSxsKXtmb3IodmFyIG8gaW4gcilpZihyLmhhc093blByb3BlcnR5KG8pJiZyW29dKXt2YXIgcz1yW29dO3M9QXJyYXkuaXNBcnJheShzKT9zOltzXTtmb3IodmFyIHU9MDt1PHMubGVuZ3RoOysrdSl7aWYobCYmbC5jYXVzZT09bytcIixcIit1KXJldHVybjt2YXIgYz1zW3VdLGc9Yy5pbnNpZGUsZj0hIWMubG9va2JlaGluZCxoPSEhYy5ncmVlZHksZD1jLmFsaWFzO2lmKGgmJiFjLnBhdHRlcm4uZ2xvYmFsKXt2YXIgdj1jLnBhdHRlcm4udG9TdHJpbmcoKS5tYXRjaCgvW2ltc3V5XSokLylbMF07Yy5wYXR0ZXJuPVJlZ0V4cChjLnBhdHRlcm4uc291cmNlLHYrXCJnXCIpfWZvcih2YXIgcD1jLnBhdHRlcm58fGMsbT1hLm5leHQseT1pO20hPT10LnRhaWwmJiEobCYmeT49bC5yZWFjaCk7eSs9bS52YWx1ZS5sZW5ndGgsbT1tLm5leHQpe3ZhciBrPW0udmFsdWU7aWYodC5sZW5ndGg+bi5sZW5ndGgpcmV0dXJuO2lmKCEoayBpbnN0YW5jZW9mIFcpKXt2YXIgYix4PTE7aWYoaCl7aWYoIShiPXoocCx5LG4sZikpKWJyZWFrO3ZhciB3PWIuaW5kZXgsQT1iLmluZGV4K2JbMF0ubGVuZ3RoLFA9eTtmb3IoUCs9bS52YWx1ZS5sZW5ndGg7UDw9dzspbT1tLm5leHQsUCs9bS52YWx1ZS5sZW5ndGg7aWYoUC09bS52YWx1ZS5sZW5ndGgseT1QLG0udmFsdWUgaW5zdGFuY2VvZiBXKWNvbnRpbnVlO2Zvcih2YXIgUz1tO1MhPT10LnRhaWwmJihQPEF8fFwic3RyaW5nXCI9PXR5cGVvZiBTLnZhbHVlKTtTPVMubmV4dCl4KyssUCs9Uy52YWx1ZS5sZW5ndGg7eC0tLGs9bi5zbGljZSh5LFApLGIuaW5kZXgtPXl9ZWxzZSBpZighKGI9eihwLDAsayxmKSkpY29udGludWU7dmFyIHc9Yi5pbmRleCxFPWJbMF0sTz1rLnNsaWNlKDAsdyksTD1rLnNsaWNlKHcrRS5sZW5ndGgpLE49eStrLmxlbmd0aDtsJiZOPmwucmVhY2gmJihsLnJlYWNoPU4pO3ZhciBqPW0ucHJldjtPJiYoaj1JKHQsaixPKSx5Kz1PLmxlbmd0aCkscSh0LGoseCk7dmFyIEM9bmV3IFcobyxnP00udG9rZW5pemUoRSxnKTpFLGQsRSk7aWYobT1JKHQsaixDKSxMJiZJKHQsbSxMKSwxPHgpe3ZhciBfPXtjYXVzZTpvK1wiLFwiK3UscmVhY2g6Tn07ZShuLHQscixtLnByZXYseSxfKSxsJiZfLnJlYWNoPmwucmVhY2gmJihsLnJlYWNoPV8ucmVhY2gpfX19fX19KGUsYSxuLGEuaGVhZCwwKSxmdW5jdGlvbihlKXt2YXIgbj1bXSx0PWUuaGVhZC5uZXh0O2Zvcig7dCE9PWUudGFpbDspbi5wdXNoKHQudmFsdWUpLHQ9dC5uZXh0O3JldHVybiBufShhKX0saG9va3M6e2FsbDp7fSxhZGQ6ZnVuY3Rpb24oZSxuKXt2YXIgdD1NLmhvb2tzLmFsbDt0W2VdPXRbZV18fFtdLHRbZV0ucHVzaChuKX0scnVuOmZ1bmN0aW9uKGUsbil7dmFyIHQ9TS5ob29rcy5hbGxbZV07aWYodCYmdC5sZW5ndGgpZm9yKHZhciByLGE9MDtyPXRbYSsrXTspcihuKX19LFRva2VuOld9O2Z1bmN0aW9uIFcoZSxuLHQscil7dGhpcy50eXBlPWUsdGhpcy5jb250ZW50PW4sdGhpcy5hbGlhcz10LHRoaXMubGVuZ3RoPTB8KHJ8fFwiXCIpLmxlbmd0aH1mdW5jdGlvbiB6KGUsbix0LHIpe2UubGFzdEluZGV4PW47dmFyIGE9ZS5leGVjKHQpO2lmKGEmJnImJmFbMV0pe3ZhciBpPWFbMV0ubGVuZ3RoO2EuaW5kZXgrPWksYVswXT1hWzBdLnNsaWNlKGkpfXJldHVybiBhfWZ1bmN0aW9uIGkoKXt2YXIgZT17dmFsdWU6bnVsbCxwcmV2Om51bGwsbmV4dDpudWxsfSxuPXt2YWx1ZTpudWxsLHByZXY6ZSxuZXh0Om51bGx9O2UubmV4dD1uLHRoaXMuaGVhZD1lLHRoaXMudGFpbD1uLHRoaXMubGVuZ3RoPTB9ZnVuY3Rpb24gSShlLG4sdCl7dmFyIHI9bi5uZXh0LGE9e3ZhbHVlOnQscHJldjpuLG5leHQ6cn07cmV0dXJuIG4ubmV4dD1hLHIucHJldj1hLGUubGVuZ3RoKyssYX1mdW5jdGlvbiBxKGUsbix0KXtmb3IodmFyIHI9bi5uZXh0LGE9MDthPHQmJnIhPT1lLnRhaWw7YSsrKXI9ci5uZXh0OyhuLm5leHQ9cikucHJldj1uLGUubGVuZ3RoLT1hfWlmKHUuUHJpc209TSxXLnN0cmluZ2lmeT1mdW5jdGlvbiBuKGUsdCl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpcmV0dXJuIGU7aWYoQXJyYXkuaXNBcnJheShlKSl7dmFyIHI9XCJcIjtyZXR1cm4gZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3IrPW4oZSx0KX0pLHJ9dmFyIGE9e3R5cGU6ZS50eXBlLGNvbnRlbnQ6bihlLmNvbnRlbnQsdCksdGFnOlwic3BhblwiLGNsYXNzZXM6W1widG9rZW5cIixlLnR5cGVdLGF0dHJpYnV0ZXM6e30sbGFuZ3VhZ2U6dH0saT1lLmFsaWFzO2kmJihBcnJheS5pc0FycmF5KGkpP0FycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGEuY2xhc3NlcyxpKTphLmNsYXNzZXMucHVzaChpKSksTS5ob29rcy5ydW4oXCJ3cmFwXCIsYSk7dmFyIGw9XCJcIjtmb3IodmFyIG8gaW4gYS5hdHRyaWJ1dGVzKWwrPVwiIFwiK28rJz1cIicrKGEuYXR0cmlidXRlc1tvXXx8XCJcIikucmVwbGFjZSgvXCIvZyxcIiZxdW90O1wiKSsnXCInO3JldHVyblwiPFwiK2EudGFnKycgY2xhc3M9XCInK2EuY2xhc3Nlcy5qb2luKFwiIFwiKSsnXCInK2wrXCI+XCIrYS5jb250ZW50K1wiPC9cIithLnRhZytcIj5cIn0sIXUuZG9jdW1lbnQpcmV0dXJuIHUuYWRkRXZlbnRMaXN0ZW5lciYmKE0uZGlzYWJsZVdvcmtlck1lc3NhZ2VIYW5kbGVyfHx1LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZnVuY3Rpb24oZSl7dmFyIG49SlNPTi5wYXJzZShlLmRhdGEpLHQ9bi5sYW5ndWFnZSxyPW4uY29kZSxhPW4uaW1tZWRpYXRlQ2xvc2U7dS5wb3N0TWVzc2FnZShNLmhpZ2hsaWdodChyLE0ubGFuZ3VhZ2VzW3RdLHQpKSxhJiZ1LmNsb3NlKCl9LCExKSksTTt2YXIgdD1NLnV0aWwuY3VycmVudFNjcmlwdCgpO2Z1bmN0aW9uIHIoKXtNLm1hbnVhbHx8TS5oaWdobGlnaHRBbGwoKX1pZih0JiYoTS5maWxlbmFtZT10LnNyYyx0Lmhhc0F0dHJpYnV0ZShcImRhdGEtbWFudWFsXCIpJiYoTS5tYW51YWw9ITApKSwhTS5tYW51YWwpe3ZhciBhPWRvY3VtZW50LnJlYWR5U3RhdGU7XCJsb2FkaW5nXCI9PT1hfHxcImludGVyYWN0aXZlXCI9PT1hJiZ0JiZ0LmRlZmVyP2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIscik6d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZT93aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHIpOndpbmRvdy5zZXRUaW1lb3V0KHIsMTYpfXJldHVybiBNfShfc2VsZik7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHMmJihtb2R1bGUuZXhwb3J0cz1QcmlzbSksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbCYmKGdsb2JhbC5QcmlzbT1QcmlzbSk7XG5QcmlzbS5sYW5ndWFnZXMubWFya3VwPXtjb21tZW50Oi88IS0tW1xcc1xcU10qPy0tPi8scHJvbG9nOi88XFw/W1xcc1xcU10rP1xcPz4vLGRvY3R5cGU6e3BhdHRlcm46LzwhRE9DVFlQRSg/OltePlwiJ1tcXF1dfFwiW15cIl0qXCJ8J1teJ10qJykrKD86XFxbKD86W148XCInXFxdXXxcIlteXCJdKlwifCdbXiddKid8PCg/ISEtLSl8PCEtLSg/OlteLV18LSg/IS0+KSkqLS0+KSpcXF1cXHMqKT8+L2ksZ3JlZWR5OiEwLGluc2lkZTp7XCJpbnRlcm5hbC1zdWJzZXRcIjp7cGF0dGVybjovKFxcWylbXFxzXFxTXSsoPz1cXF0+JCkvLGxvb2tiZWhpbmQ6ITAsZ3JlZWR5OiEwLGluc2lkZTpudWxsfSxzdHJpbmc6e3BhdHRlcm46L1wiW15cIl0qXCJ8J1teJ10qJy8sZ3JlZWR5OiEwfSxwdW5jdHVhdGlvbjovXjwhfD4kfFtbXFxdXS8sXCJkb2N0eXBlLXRhZ1wiOi9eRE9DVFlQRS8sbmFtZTovW15cXHM8PidcIl0rL319LGNkYXRhOi88IVxcW0NEQVRBXFxbW1xcc1xcU10qP11dPi9pLHRhZzp7cGF0dGVybjovPFxcLz8oPyFcXGQpW15cXHM+XFwvPSQ8JV0rKD86XFxzKD86XFxzKlteXFxzPlxcLz1dKyg/Olxccyo9XFxzKig/OlwiW15cIl0qXCJ8J1teJ10qJ3xbXlxccydcIj49XSsoPz1bXFxzPl0pKXwoPz1bXFxzLz5dKSkpKyk/XFxzKlxcLz8+LyxncmVlZHk6ITAsaW5zaWRlOnt0YWc6e3BhdHRlcm46L148XFwvP1teXFxzPlxcL10rLyxpbnNpZGU6e3B1bmN0dWF0aW9uOi9ePFxcLz8vLG5hbWVzcGFjZTovXlteXFxzPlxcLzpdKzovfX0sXCJzcGVjaWFsLWF0dHJcIjpbXSxcImF0dHItdmFsdWVcIjp7cGF0dGVybjovPVxccyooPzpcIlteXCJdKlwifCdbXiddKid8W15cXHMnXCI+PV0rKS8saW5zaWRlOntwdW5jdHVhdGlvbjpbe3BhdHRlcm46L149LyxhbGlhczpcImF0dHItZXF1YWxzXCJ9LC9cInwnL119fSxwdW5jdHVhdGlvbjovXFwvPz4vLFwiYXR0ci1uYW1lXCI6e3BhdHRlcm46L1teXFxzPlxcL10rLyxpbnNpZGU6e25hbWVzcGFjZTovXlteXFxzPlxcLzpdKzovfX19fSxlbnRpdHk6W3twYXR0ZXJuOi8mW1xcZGEtel17MSw4fTsvaSxhbGlhczpcIm5hbWVkLWVudGl0eVwifSwvJiN4P1tcXGRhLWZdezEsOH07L2ldfSxQcmlzbS5sYW5ndWFnZXMubWFya3VwLnRhZy5pbnNpZGVbXCJhdHRyLXZhbHVlXCJdLmluc2lkZS5lbnRpdHk9UHJpc20ubGFuZ3VhZ2VzLm1hcmt1cC5lbnRpdHksUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cC5kb2N0eXBlLmluc2lkZVtcImludGVybmFsLXN1YnNldFwiXS5pbnNpZGU9UHJpc20ubGFuZ3VhZ2VzLm1hcmt1cCxQcmlzbS5ob29rcy5hZGQoXCJ3cmFwXCIsZnVuY3Rpb24oYSl7XCJlbnRpdHlcIj09PWEudHlwZSYmKGEuYXR0cmlidXRlcy50aXRsZT1hLmNvbnRlbnQucmVwbGFjZSgvJmFtcDsvLFwiJlwiKSl9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cC50YWcsXCJhZGRJbmxpbmVkXCIse3ZhbHVlOmZ1bmN0aW9uKGEsZSl7dmFyIHM9e307c1tcImxhbmd1YWdlLVwiK2VdPXtwYXR0ZXJuOi8oXjwhXFxbQ0RBVEFcXFspW1xcc1xcU10rPyg/PVxcXVxcXT4kKS9pLGxvb2tiZWhpbmQ6ITAsaW5zaWRlOlByaXNtLmxhbmd1YWdlc1tlXX0scy5jZGF0YT0vXjwhXFxbQ0RBVEFcXFt8XFxdXFxdPiQvaTt2YXIgdD17XCJpbmNsdWRlZC1jZGF0YVwiOntwYXR0ZXJuOi88IVxcW0NEQVRBXFxbW1xcc1xcU10qP1xcXVxcXT4vaSxpbnNpZGU6c319O3RbXCJsYW5ndWFnZS1cIitlXT17cGF0dGVybjovW1xcc1xcU10rLyxpbnNpZGU6UHJpc20ubGFuZ3VhZ2VzW2VdfTt2YXIgbj17fTtuW2FdPXtwYXR0ZXJuOlJlZ0V4cChcIig8X19bXj5dKj4pKD86PCFcXFxcW0NEQVRBXFxcXFsoPzpbXlxcXFxdXXxcXFxcXSg/IVxcXFxdPikpKlxcXFxdXFxcXF0+fCg/ITwhXFxcXFtDREFUQVxcXFxbKVteXSkqPyg/PTwvX18+KVwiLnJlcGxhY2UoL19fL2csZnVuY3Rpb24oKXtyZXR1cm4gYX0pLFwiaVwiKSxsb29rYmVoaW5kOiEwLGdyZWVkeTohMCxpbnNpZGU6dH0sUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcIm1hcmt1cFwiLFwiY2RhdGFcIixuKX19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cC50YWcsXCJhZGRBdHRyaWJ1dGVcIix7dmFsdWU6ZnVuY3Rpb24oYSxlKXtQcmlzbS5sYW5ndWFnZXMubWFya3VwLnRhZy5pbnNpZGVbXCJzcGVjaWFsLWF0dHJcIl0ucHVzaCh7cGF0dGVybjpSZWdFeHAoXCIoXnxbXFxcIidcXFxcc10pKD86XCIrYStcIilcXFxccyo9XFxcXHMqKD86XFxcIlteXFxcIl0qXFxcInwnW14nXSonfFteXFxcXHMnXFxcIj49XSsoPz1bXFxcXHM+XSkpXCIsXCJpXCIpLGxvb2tiZWhpbmQ6ITAsaW5zaWRlOntcImF0dHItbmFtZVwiOi9eW15cXHM9XSsvLFwiYXR0ci12YWx1ZVwiOntwYXR0ZXJuOi89W1xcc1xcU10rLyxpbnNpZGU6e3ZhbHVlOntwYXR0ZXJuOi8oPVxccyooW1wiJ118KD8hW1wiJ10pKSlcXFNbXFxzXFxTXSooPz1cXDIkKS8sbG9va2JlaGluZDohMCxhbGlhczpbZSxcImxhbmd1YWdlLVwiK2VdLGluc2lkZTpQcmlzbS5sYW5ndWFnZXNbZV19LHB1bmN0dWF0aW9uOlt7cGF0dGVybjovXj0vLGFsaWFzOlwiYXR0ci1lcXVhbHNcIn0sL1wifCcvXX19fX0pfX0pLFByaXNtLmxhbmd1YWdlcy5odG1sPVByaXNtLmxhbmd1YWdlcy5tYXJrdXAsUHJpc20ubGFuZ3VhZ2VzLm1hdGhtbD1QcmlzbS5sYW5ndWFnZXMubWFya3VwLFByaXNtLmxhbmd1YWdlcy5zdmc9UHJpc20ubGFuZ3VhZ2VzLm1hcmt1cCxQcmlzbS5sYW5ndWFnZXMueG1sPVByaXNtLmxhbmd1YWdlcy5leHRlbmQoXCJtYXJrdXBcIix7fSksUHJpc20ubGFuZ3VhZ2VzLnNzbWw9UHJpc20ubGFuZ3VhZ2VzLnhtbCxQcmlzbS5sYW5ndWFnZXMuYXRvbT1QcmlzbS5sYW5ndWFnZXMueG1sLFByaXNtLmxhbmd1YWdlcy5yc3M9UHJpc20ubGFuZ3VhZ2VzLnhtbDtcbiFmdW5jdGlvbihzKXt2YXIgZT0vKFwifCcpKD86XFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8KD8hXFwxKVteXFxcXFxcclxcbl0pKlxcMS87cy5sYW5ndWFnZXMuY3NzPXtjb21tZW50Oi9cXC9cXCpbXFxzXFxTXSo/XFwqXFwvLyxhdHJ1bGU6e3BhdHRlcm46L0BbXFx3LV0oPzpbXjt7XFxzXXxcXHMrKD8hW1xcc3tdKSkqKD86O3woPz1cXHMqXFx7KSkvLGluc2lkZTp7cnVsZTovXkBbXFx3LV0rLyxcInNlbGVjdG9yLWZ1bmN0aW9uLWFyZ3VtZW50XCI6e3BhdHRlcm46LyhcXGJzZWxlY3RvclxccypcXChcXHMqKD8hW1xccyldKSkoPzpbXigpXFxzXXxcXHMrKD8hW1xccyldKXxcXCgoPzpbXigpXXxcXChbXigpXSpcXCkpKlxcKSkrKD89XFxzKlxcKSkvLGxvb2tiZWhpbmQ6ITAsYWxpYXM6XCJzZWxlY3RvclwifSxrZXl3b3JkOntwYXR0ZXJuOi8oXnxbXlxcdy1dKSg/OmFuZHxub3R8b25seXxvcikoPyFbXFx3LV0pLyxsb29rYmVoaW5kOiEwfX19LHVybDp7cGF0dGVybjpSZWdFeHAoXCJcXFxcYnVybFxcXFwoKD86XCIrZS5zb3VyY2UrXCJ8KD86W15cXFxcXFxcXFxcclxcbigpXFxcIiddfFxcXFxcXFxcW15dKSopXFxcXClcIixcImlcIiksZ3JlZWR5OiEwLGluc2lkZTp7ZnVuY3Rpb246L151cmwvaSxwdW5jdHVhdGlvbjovXlxcKHxcXCkkLyxzdHJpbmc6e3BhdHRlcm46UmVnRXhwKFwiXlwiK2Uuc291cmNlK1wiJFwiKSxhbGlhczpcInVybFwifX19LHNlbGVjdG9yOlJlZ0V4cChcIltee31cXFxcc10oPzpbXnt9O1xcXCInXFxcXHNdfFxcXFxzKyg/IVtcXFxcc3tdKXxcIitlLnNvdXJjZStcIikqKD89XFxcXHMqXFxcXHspXCIpLHN0cmluZzp7cGF0dGVybjplLGdyZWVkeTohMH0scHJvcGVydHk6Lyg/IVxccylbLV9hLXpcXHhBMC1cXHVGRkZGXSg/Oig/IVxccylbLVxcd1xceEEwLVxcdUZGRkZdKSooPz1cXHMqOikvaSxpbXBvcnRhbnQ6LyFpbXBvcnRhbnRcXGIvaSxmdW5jdGlvbjovWy1hLXowLTldKyg/PVxcKCkvaSxwdW5jdHVhdGlvbjovWygpe307OixdL30scy5sYW5ndWFnZXMuY3NzLmF0cnVsZS5pbnNpZGUucmVzdD1zLmxhbmd1YWdlcy5jc3M7dmFyIHQ9cy5sYW5ndWFnZXMubWFya3VwO3QmJih0LnRhZy5hZGRJbmxpbmVkKFwic3R5bGVcIixcImNzc1wiKSx0LnRhZy5hZGRBdHRyaWJ1dGUoXCJzdHlsZVwiLFwiY3NzXCIpKX0oUHJpc20pO1xuUHJpc20ubGFuZ3VhZ2VzLmNsaWtlPXtjb21tZW50Olt7cGF0dGVybjovKF58W15cXFxcXSlcXC9cXCpbXFxzXFxTXSo/KD86XFwqXFwvfCQpLyxsb29rYmVoaW5kOiEwLGdyZWVkeTohMH0se3BhdHRlcm46LyhefFteXFxcXDpdKVxcL1xcLy4qLyxsb29rYmVoaW5kOiEwLGdyZWVkeTohMH1dLHN0cmluZzp7cGF0dGVybjovKFtcIiddKSg/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDEvLGdyZWVkeTohMH0sXCJjbGFzcy1uYW1lXCI6e3BhdHRlcm46LyhcXGIoPzpjbGFzc3xpbnRlcmZhY2V8ZXh0ZW5kc3xpbXBsZW1lbnRzfHRyYWl0fGluc3RhbmNlb2Z8bmV3KVxccyt8XFxiY2F0Y2hcXHMrXFwoKVtcXHcuXFxcXF0rL2ksbG9va2JlaGluZDohMCxpbnNpZGU6e3B1bmN0dWF0aW9uOi9bLlxcXFxdL319LGtleXdvcmQ6L1xcYig/OmlmfGVsc2V8d2hpbGV8ZG98Zm9yfHJldHVybnxpbnxpbnN0YW5jZW9mfGZ1bmN0aW9ufG5ld3x0cnl8dGhyb3d8Y2F0Y2h8ZmluYWxseXxudWxsfGJyZWFrfGNvbnRpbnVlKVxcYi8sYm9vbGVhbjovXFxiKD86dHJ1ZXxmYWxzZSlcXGIvLGZ1bmN0aW9uOi9cXHcrKD89XFwoKS8sbnVtYmVyOi9cXGIweFtcXGRhLWZdK1xcYnwoPzpcXGJcXGQrKD86XFwuXFxkKik/fFxcQlxcLlxcZCspKD86ZVsrLV0/XFxkKyk/L2ksb3BlcmF0b3I6L1s8Pl09P3xbIT1dPT89P3wtLT98XFwrXFwrP3wmJj98XFx8XFx8P3xbPyovfl4lXS8scHVuY3R1YXRpb246L1t7fVtcXF07KCksLjpdL307XG5QcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdD1QcmlzbS5sYW5ndWFnZXMuZXh0ZW5kKFwiY2xpa2VcIix7XCJjbGFzcy1uYW1lXCI6W1ByaXNtLmxhbmd1YWdlcy5jbGlrZVtcImNsYXNzLW5hbWVcIl0se3BhdHRlcm46LyhefFteJFxcd1xceEEwLVxcdUZGRkZdKSg/IVxccylbXyRBLVpcXHhBMC1cXHVGRkZGXSg/Oig/IVxccylbJFxcd1xceEEwLVxcdUZGRkZdKSooPz1cXC4oPzpwcm90b3R5cGV8Y29uc3RydWN0b3IpKS8sbG9va2JlaGluZDohMH1dLGtleXdvcmQ6W3twYXR0ZXJuOi8oKD86Xnx9KVxccyopY2F0Y2hcXGIvLGxvb2tiZWhpbmQ6ITB9LHtwYXR0ZXJuOi8oXnxbXi5dfFxcLlxcLlxcLlxccyopXFxiKD86YXN8YXN5bmMoPz1cXHMqKD86ZnVuY3Rpb25cXGJ8XFwofFskXFx3XFx4QTAtXFx1RkZGRl18JCkpfGF3YWl0fGJyZWFrfGNhc2V8Y2xhc3N8Y29uc3R8Y29udGludWV8ZGVidWdnZXJ8ZGVmYXVsdHxkZWxldGV8ZG98ZWxzZXxlbnVtfGV4cG9ydHxleHRlbmRzfGZpbmFsbHkoPz1cXHMqKD86XFx7fCQpKXxmb3J8ZnJvbSg/PVxccyooPzpbJ1wiXXwkKSl8ZnVuY3Rpb258KD86Z2V0fHNldCkoPz1cXHMqKD86W1xcWyRcXHdcXHhBMC1cXHVGRkZGXXwkKSl8aWZ8aW1wbGVtZW50c3xpbXBvcnR8aW58aW5zdGFuY2VvZnxpbnRlcmZhY2V8bGV0fG5ld3xudWxsfG9mfHBhY2thZ2V8cHJpdmF0ZXxwcm90ZWN0ZWR8cHVibGljfHJldHVybnxzdGF0aWN8c3VwZXJ8c3dpdGNofHRoaXN8dGhyb3d8dHJ5fHR5cGVvZnx1bmRlZmluZWR8dmFyfHZvaWR8d2hpbGV8d2l0aHx5aWVsZClcXGIvLGxvb2tiZWhpbmQ6ITB9XSxmdW5jdGlvbjovIz8oPyFcXHMpW18kYS16QS1aXFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWyRcXHdcXHhBMC1cXHVGRkZGXSkqKD89XFxzKig/OlxcLlxccyooPzphcHBseXxiaW5kfGNhbGwpXFxzKik/XFwoKS8sbnVtYmVyOi9cXGIoPzooPzowW3hYXSg/OltcXGRBLUZhLWZdKD86X1tcXGRBLUZhLWZdKT8pK3wwW2JCXSg/OlswMV0oPzpfWzAxXSk/KSt8MFtvT10oPzpbMC03XSg/Ol9bMC03XSk/KSspbj98KD86XFxkKD86X1xcZCk/KStufE5hTnxJbmZpbml0eSlcXGJ8KD86XFxiKD86XFxkKD86X1xcZCk/KStcXC4/KD86XFxkKD86X1xcZCk/KSp8XFxCXFwuKD86XFxkKD86X1xcZCk/KSspKD86W0VlXVsrLV0/KD86XFxkKD86X1xcZCk/KSspPy8sb3BlcmF0b3I6Ly0tfFxcK1xcK3xcXCpcXCo9P3w9PnwmJj0/fFxcfFxcfD0/fFshPV09PXw8PD0/fD4+Pj89P3xbLSsqLyUmfF4hPTw+XT0/fFxcLnszfXxcXD9cXD89P3xcXD9cXC4/fFt+Ol0vfSksUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHRbXCJjbGFzcy1uYW1lXCJdWzBdLnBhdHRlcm49LyhcXGIoPzpjbGFzc3xpbnRlcmZhY2V8ZXh0ZW5kc3xpbXBsZW1lbnRzfGluc3RhbmNlb2Z8bmV3KVxccyspW1xcdy5cXFxcXSsvLFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJqYXZhc2NyaXB0XCIsXCJrZXl3b3JkXCIse3JlZ2V4OntwYXR0ZXJuOi8oKD86XnxbXiRcXHdcXHhBMC1cXHVGRkZGLlwiJ1xcXSlcXHNdfFxcYig/OnJldHVybnx5aWVsZCkpXFxzKilcXC8oPzpcXFsoPzpbXlxcXVxcXFxcXHJcXG5dfFxcXFwuKSpdfFxcXFwufFteL1xcXFxcXFtcXHJcXG5dKStcXC9bZ2lteXVzXXswLDZ9KD89KD86XFxzfFxcL1xcKig/OlteKl18XFwqKD8hXFwvKSkqXFwqXFwvKSooPzokfFtcXHJcXG4sLjs6fSlcXF1dfFxcL1xcLykpLyxsb29rYmVoaW5kOiEwLGdyZWVkeTohMCxpbnNpZGU6e1wicmVnZXgtc291cmNlXCI6e3BhdHRlcm46L14oXFwvKVtcXHNcXFNdKyg/PVxcL1thLXpdKiQpLyxsb29rYmVoaW5kOiEwLGFsaWFzOlwibGFuZ3VhZ2UtcmVnZXhcIixpbnNpZGU6UHJpc20ubGFuZ3VhZ2VzLnJlZ2V4fSxcInJlZ2V4LWZsYWdzXCI6L1thLXpdKyQvLFwicmVnZXgtZGVsaW1pdGVyXCI6L15cXC98XFwvJC99fSxcImZ1bmN0aW9uLXZhcmlhYmxlXCI6e3BhdHRlcm46LyM/KD8hXFxzKVtfJGEtekEtWlxceEEwLVxcdUZGRkZdKD86KD8hXFxzKVskXFx3XFx4QTAtXFx1RkZGRl0pKig/PVxccypbPTpdXFxzKig/OmFzeW5jXFxzKik/KD86XFxiZnVuY3Rpb25cXGJ8KD86XFwoKD86W14oKV18XFwoW14oKV0qXFwpKSpcXCl8KD8hXFxzKVtfJGEtekEtWlxceEEwLVxcdUZGRkZdKD86KD8hXFxzKVskXFx3XFx4QTAtXFx1RkZGRl0pKilcXHMqPT4pKS8sYWxpYXM6XCJmdW5jdGlvblwifSxwYXJhbWV0ZXI6W3twYXR0ZXJuOi8oZnVuY3Rpb24oPzpcXHMrKD8hXFxzKVtfJGEtekEtWlxceEEwLVxcdUZGRkZdKD86KD8hXFxzKVskXFx3XFx4QTAtXFx1RkZGRl0pKik/XFxzKlxcKFxccyopKD8hXFxzKSg/OlteKClcXHNdfFxccysoPyFbXFxzKV0pfFxcKFteKCldKlxcKSkrKD89XFxzKlxcKSkvLGxvb2tiZWhpbmQ6ITAsaW5zaWRlOlByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0fSx7cGF0dGVybjovKD8hXFxzKVtfJGEtekEtWlxceEEwLVxcdUZGRkZdKD86KD8hXFxzKVskXFx3XFx4QTAtXFx1RkZGRl0pKig/PVxccyo9PikvaSxpbnNpZGU6UHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHR9LHtwYXR0ZXJuOi8oXFwoXFxzKikoPyFcXHMpKD86W14oKVxcc118XFxzKyg/IVtcXHMpXSl8XFwoW14oKV0qXFwpKSsoPz1cXHMqXFwpXFxzKj0+KS8sbG9va2JlaGluZDohMCxpbnNpZGU6UHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHR9LHtwYXR0ZXJuOi8oKD86XFxifFxcc3xeKSg/ISg/OmFzfGFzeW5jfGF3YWl0fGJyZWFrfGNhc2V8Y2F0Y2h8Y2xhc3N8Y29uc3R8Y29udGludWV8ZGVidWdnZXJ8ZGVmYXVsdHxkZWxldGV8ZG98ZWxzZXxlbnVtfGV4cG9ydHxleHRlbmRzfGZpbmFsbHl8Zm9yfGZyb218ZnVuY3Rpb258Z2V0fGlmfGltcGxlbWVudHN8aW1wb3J0fGlufGluc3RhbmNlb2Z8aW50ZXJmYWNlfGxldHxuZXd8bnVsbHxvZnxwYWNrYWdlfHByaXZhdGV8cHJvdGVjdGVkfHB1YmxpY3xyZXR1cm58c2V0fHN0YXRpY3xzdXBlcnxzd2l0Y2h8dGhpc3x0aHJvd3x0cnl8dHlwZW9mfHVuZGVmaW5lZHx2YXJ8dm9pZHx3aGlsZXx3aXRofHlpZWxkKSg/IVskXFx3XFx4QTAtXFx1RkZGRl0pKSg/Oig/IVxccylbXyRhLXpBLVpcXHhBMC1cXHVGRkZGXSg/Oig/IVxccylbJFxcd1xceEEwLVxcdUZGRkZdKSpcXHMqKVxcKFxccyp8XFxdXFxzKlxcKFxccyopKD8hXFxzKSg/OlteKClcXHNdfFxccysoPyFbXFxzKV0pfFxcKFteKCldKlxcKSkrKD89XFxzKlxcKVxccypcXHspLyxsb29rYmVoaW5kOiEwLGluc2lkZTpQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdH1dLGNvbnN0YW50Oi9cXGJbQS1aXSg/OltBLVpfXXxcXGR4PykqXFxiL30pLFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJqYXZhc2NyaXB0XCIsXCJzdHJpbmdcIix7XCJ0ZW1wbGF0ZS1zdHJpbmdcIjp7cGF0dGVybjovYCg/OlxcXFxbXFxzXFxTXXxcXCR7KD86W157fV18eyg/Oltee31dfHtbXn1dKn0pKn0pK318KD8hXFwkeylbXlxcXFxgXSkqYC8sZ3JlZWR5OiEwLGluc2lkZTp7XCJ0ZW1wbGF0ZS1wdW5jdHVhdGlvblwiOntwYXR0ZXJuOi9eYHxgJC8sYWxpYXM6XCJzdHJpbmdcIn0saW50ZXJwb2xhdGlvbjp7cGF0dGVybjovKCg/Ol58W15cXFxcXSkoPzpcXFxcezJ9KSopXFwkeyg/Oltee31dfHsoPzpbXnt9XXx7W159XSp9KSp9KSt9Lyxsb29rYmVoaW5kOiEwLGluc2lkZTp7XCJpbnRlcnBvbGF0aW9uLXB1bmN0dWF0aW9uXCI6e3BhdHRlcm46L15cXCR7fH0kLyxhbGlhczpcInB1bmN0dWF0aW9uXCJ9LHJlc3Q6UHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHR9fSxzdHJpbmc6L1tcXHNcXFNdKy99fX0pLFByaXNtLmxhbmd1YWdlcy5tYXJrdXAmJihQcmlzbS5sYW5ndWFnZXMubWFya3VwLnRhZy5hZGRJbmxpbmVkKFwic2NyaXB0XCIsXCJqYXZhc2NyaXB0XCIpLFByaXNtLmxhbmd1YWdlcy5tYXJrdXAudGFnLmFkZEF0dHJpYnV0ZShcIm9uKD86YWJvcnR8Ymx1cnxjaGFuZ2V8Y2xpY2t8Y29tcG9zaXRpb24oPzplbmR8c3RhcnR8dXBkYXRlKXxkYmxjbGlja3xlcnJvcnxmb2N1cyg/OmlufG91dCk/fGtleSg/OmRvd258dXApfGxvYWR8bW91c2UoPzpkb3dufGVudGVyfGxlYXZlfG1vdmV8b3V0fG92ZXJ8dXApfHJlc2V0fHJlc2l6ZXxzY3JvbGx8c2VsZWN0fHNsb3RjaGFuZ2V8c3VibWl0fHVubG9hZHx3aGVlbClcIixcImphdmFzY3JpcHRcIikpLFByaXNtLmxhbmd1YWdlcy5qcz1QcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdDtcblByaXNtLmxhbmd1YWdlcy5lbGl4aXI9e2RvYzp7cGF0dGVybjovQCg/OmRvY3xtb2R1bGVkb2MpXFxzKyg/OihcIlwiXCJ8JycnKVtcXHNcXFNdKj9cXDF8KFwifCcpKD86XFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8KD8hXFwyKVteXFxcXFxcclxcbl0pKlxcMikvLGluc2lkZTp7YXR0cmlidXRlOi9eQFxcdysvLHN0cmluZzovWydcIl1bXFxzXFxTXSsvfX0sY29tbWVudDp7cGF0dGVybjovIy4qL20sZ3JlZWR5OiEwfSxyZWdleDp7cGF0dGVybjovfltyUl0oPzooXCJcIlwifCcnJykoPzpcXFxcW1xcc1xcU118KD8hXFwxKVteXFxcXF0pK1xcMXwoW1xcL3xcIiddKSg/OlxcXFwufCg/IVxcMilbXlxcXFxcXHJcXG5dKStcXDJ8XFwoKD86XFxcXC58W15cXFxcKVxcclxcbl0pK1xcKXxcXFsoPzpcXFxcLnxbXlxcXFxcXF1cXHJcXG5dKStcXF18XFx7KD86XFxcXC58W15cXFxcfVxcclxcbl0pK1xcfXw8KD86XFxcXC58W15cXFxcPlxcclxcbl0pKz4pW3Vpc214ZnJdKi8sZ3JlZWR5OiEwfSxzdHJpbmc6W3twYXR0ZXJuOi9+W2NDc1N3V10oPzooXCJcIlwifCcnJykoPzpcXFxcW1xcc1xcU118KD8hXFwxKVteXFxcXF0pK1xcMXwoW1xcL3xcIiddKSg/OlxcXFwufCg/IVxcMilbXlxcXFxcXHJcXG5dKStcXDJ8XFwoKD86XFxcXC58W15cXFxcKVxcclxcbl0pK1xcKXxcXFsoPzpcXFxcLnxbXlxcXFxcXF1cXHJcXG5dKStcXF18XFx7KD86XFxcXC58I1xce1tefV0rXFx9fCMoPyFcXHspfFteI1xcXFx9XFxyXFxuXSkrXFx9fDwoPzpcXFxcLnxbXlxcXFw+XFxyXFxuXSkrPilbY3NhXT8vLGdyZWVkeTohMCxpbnNpZGU6e319LHtwYXR0ZXJuOi8oXCJcIlwifCcnJylbXFxzXFxTXSo/XFwxLyxncmVlZHk6ITAsaW5zaWRlOnt9fSx7cGF0dGVybjovKFwifCcpKD86XFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8KD8hXFwxKVteXFxcXFxcclxcbl0pKlxcMS8sZ3JlZWR5OiEwLGluc2lkZTp7fX1dLGF0b206e3BhdHRlcm46LyhefFteOl0pOlxcdysvLGxvb2tiZWhpbmQ6ITAsYWxpYXM6XCJzeW1ib2xcIn0sbW9kdWxlOntwYXR0ZXJuOi9cXGJbQS1aXVxcdypcXGIvLGFsaWFzOlwiY2xhc3MtbmFtZVwifSxcImF0dHItbmFtZVwiOi9cXHcrXFw/PzooPyE6KS8sYXJndW1lbnQ6e3BhdHRlcm46LyhefFteJl0pJlxcZCsvLGxvb2tiZWhpbmQ6ITAsYWxpYXM6XCJ2YXJpYWJsZVwifSxhdHRyaWJ1dGU6e3BhdHRlcm46L0BcXHcrLyxhbGlhczpcInZhcmlhYmxlXCJ9LGZ1bmN0aW9uOi9cXGJbX2EtekEtWl1cXHcqWz8hXT8oPzooPz1cXHMqKD86XFwuXFxzKik/XFwoKXwoPz1cXC9cXGQrKSkvLG51bWJlcjovXFxiKD86MFtib3hdW2EtZlxcZF9dK3xcXGRbXFxkX10qKSg/OlxcLltcXGRfXSspPyg/OmVbKy1dP1tcXGRfXSspP1xcYi9pLGtleXdvcmQ6L1xcYig/OmFmdGVyfGFsaWFzfGFuZHxjYXNlfGNhdGNofGNvbmR8ZGVmKD86Y2FsbGJhY2t8ZXhjZXB0aW9ufGltcGx8bW9kdWxlfHB8cHJvdG9jb2x8c3RydWN0fGRlbGVnYXRlKT98ZG98ZWxzZXxlbmR8Zm58Zm9yfGlmfGltcG9ydHxub3R8b3J8cmFpc2V8cmVxdWlyZXxyZXNjdWV8dHJ5fHVubGVzc3x1c2V8d2hlbilcXGIvLGJvb2xlYW46L1xcYig/OnRydWV8ZmFsc2V8bmlsKVxcYi8sb3BlcmF0b3I6Wy9cXGJpblxcYnwmJj98XFx8W3w+XT98XFxcXFxcXFx8Ojp8XFwuXFwuXFwuP3xcXCtcXCs/fC1bLT5dP3w8Wy09Pl18Pj18IT09P3xcXEIhfD0oPzo9PT98Wz5+XSk/fFsqXFwvXl0vLHtwYXR0ZXJuOi8oW148XSk8KD8hPCkvLGxvb2tiZWhpbmQ6ITB9LHtwYXR0ZXJuOi8oW14+XSk+KD8hPikvLGxvb2tiZWhpbmQ6ITB9XSxwdW5jdHVhdGlvbjovPDx8Pj58Wy4sJVxcW1xcXXt9KCldL30sUHJpc20ubGFuZ3VhZ2VzLmVsaXhpci5zdHJpbmcuZm9yRWFjaChmdW5jdGlvbihlKXtlLmluc2lkZT17aW50ZXJwb2xhdGlvbjp7cGF0dGVybjovI1xce1tefV0rXFx9LyxpbnNpZGU6e2RlbGltaXRlcjp7cGF0dGVybjovXiNcXHt8XFx9JC8sYWxpYXM6XCJwdW5jdHVhdGlvblwifSxyZXN0OlByaXNtLmxhbmd1YWdlcy5lbGl4aXJ9fX19KTtcbiFmdW5jdGlvbihpKXt2YXIgZT1pLnV0aWwuY2xvbmUoaS5sYW5ndWFnZXMuZWxpeGlyKSx0PVwiKD86XFxcXHs8Uz4qXFxcXC57M30oPzpbXnt9XXw8QlJBQ0VTPikqXFxcXH0pXCI7ZnVuY3Rpb24gbihlLG4pe3JldHVybiBlPWUucmVwbGFjZSgvPFM+L2csZnVuY3Rpb24oKXtyZXR1cm5cIig/OlxcXFxzfC8vLiooPyEuKXwvXFxcXCooPzpbXipdfFxcXFwqKD8hLykpXFxcXCovKVwifSkucmVwbGFjZSgvPEJSQUNFUz4vZyxmdW5jdGlvbigpe3JldHVyblwiKD86XFxcXHsoPzpcXFxceyg/OlxcXFx7W157fV0qXFxcXH18W157fV0pKlxcXFx9fFtee31dKSpcXFxcfSlcIn0pLnJlcGxhY2UoLzxTUFJFQUQ+L2csZnVuY3Rpb24oKXtyZXR1cm4gdH0pLFJlZ0V4cChlLG4pfXQ9bih0KS5zb3VyY2UsaS5sYW5ndWFnZXMuc3VyZmFjZT1pLmxhbmd1YWdlcy5leHRlbmQoXCJtYXJrdXBcIixlKSxpLmxhbmd1YWdlcy5zdXJmYWNlLnRhZy5wYXR0ZXJuPW4oXCI8Lz8oPzpbXFxcXHcuOi1dKyg/OjxTPisoPzpbXFxcXHcuOiQtXSsoPzo9KD86XFxcIig/OlxcXFxcXFxcW15dfFteXFxcXFxcXFxcXFwiXSkqXFxcInwnKD86XFxcXFxcXFxbXl18W15cXFxcXFxcXCddKSonfFteXFxcXHN7J1xcXCIvPj1dK3w8QlJBQ0VTPikpP3w8U1BSRUFEPikpKjxTPiovPyk/PlwiKSxpLmxhbmd1YWdlcy5zdXJmYWNlLnRhZy5pbnNpZGUudGFnLnBhdHRlcm49L148XFwvP1teXFxzPlxcL10qL2ksaS5sYW5ndWFnZXMuc3VyZmFjZS50YWcuaW5zaWRlW1wiYXR0ci12YWx1ZVwiXS5wYXR0ZXJuPS89KD8hXFx7KSg/OlwiKD86XFxcXFteXXxbXlxcXFxcIl0pKlwifCcoPzpcXFxcW15dfFteXFxcXCddKSonfFteXFxzJ1wiPl0rKS9pLGkubGFuZ3VhZ2VzLnN1cmZhY2UudGFnLmluc2lkZS50YWcuaW5zaWRlW1wiY2xhc3MtbmFtZVwiXT0vXltBLVpdXFx3Kig/OlxcLltBLVpdXFx3KikqJC8saS5sYW5ndWFnZXMuc3VyZmFjZS50YWcuaW5zaWRlLnRhZy5pbnNpZGVbXCJ0YWctbmFtZVwiXT0vXlthLXpdXFx3Kig/OlxcLlthLXpdXFx3KikqJC8saS5sYW5ndWFnZXMuc3VyZmFjZS50YWcuaW5zaWRlLmNvbW1lbnQ9ZS5jb21tZW50LGkubGFuZ3VhZ2VzLmluc2VydEJlZm9yZShcImluc2lkZVwiLFwiYXR0ci1uYW1lXCIse3NwcmVhZDp7cGF0dGVybjpuKFwiPFNQUkVBRD5cIiksaW5zaWRlOmkubGFuZ3VhZ2VzLnN1cmZhY2V9fSxpLmxhbmd1YWdlcy5zdXJmYWNlLnRhZyksaS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKFwiaW5zaWRlXCIsXCJzcGVjaWFsLWF0dHJcIix7c2NyaXB0OntwYXR0ZXJuOm4oXCI9PEJSQUNFUz5cIiksaW5zaWRlOntcInNjcmlwdC1wdW5jdHVhdGlvblwiOntwYXR0ZXJuOi9ePSg/PXspLyxhbGlhczpcInB1bmN0dWF0aW9uXCJ9LHJlc3Q6aS5sYW5ndWFnZXMuc3VyZmFjZX0sYWxpYXM6XCJsYW5ndWFnZS1lbGl4aXJcIn19LGkubGFuZ3VhZ2VzLnN1cmZhY2UudGFnKSxpLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoXCJlbGl4aXJcIixcImF0b21cIix7XCJlbWJlZGRlZC1zdXJmYWNlXCI6e3BhdHRlcm46L35IKFwiXCJcIilbXFxzXFxTXSo/XFwxLyxncmVlZHk6ITAsaW5zaWRlOntcImVtYmVkZGVkLXN1cmZhY2Utb3BlblwiOntwYXR0ZXJuOi9efkhcIlwiXCIvLGFsaWFzOlwicHVuY3R1YXRpb25cIn0sXCJlbWJlZGRlZC1zdXJmYWNlLWNsb3NlXCI6e3BhdHRlcm46L1wiXCJcIiQvLGFsaWFzOlwicHVuY3R1YXRpb25cIn0sc3VyZmFjZTp7cGF0dGVybjovW1xcc1xcU10rLyxpbnNpZGU6aS5sYW5ndWFnZXMuc3VyZmFjZX19fSxcInN1cmZhY2UtYXBpXCI6e3BhdHRlcm46L15cXHMrXFxiKD86cHJvcHxkYXRhfHNsb3QpXFxiXFxzKy8sYWxpYXM6XCJjbGFzcy1uYW1lXCJ9fSk7dmFyIHU9ZnVuY3Rpb24oZSl7cmV0dXJuIGU/XCJzdHJpbmdcIj09dHlwZW9mIGU/ZTpcInN0cmluZ1wiPT10eXBlb2YgZS5jb250ZW50P2UuY29udGVudDplLmNvbnRlbnQubWFwKHUpLmpvaW4oXCJcIik6XCJcIn0sYz1mdW5jdGlvbihlLG4pe1wic3VyZmFjZVwiPT09biYmZS51bnNoaWZ0KG5ldyBpLlRva2VuKFwidGFnXCIsW25ldyBpLlRva2VuKFwidGFnXCIsW25ldyBpLlRva2VuKFwicHVuY3R1YXRpb25cIixcIjxcIildKSxuZXcgaS5Ub2tlbihcInB1bmN0dWF0aW9uXCIsXCI+XCIpXSkpO2Zvcih2YXIgdD1bXSxhPTA7YTxlLmxlbmd0aDthKyspe3ZhciBzPWVbYV0scj0hMTtpZihcInN0cmluZ1wiIT10eXBlb2YgcyYmKFwidGFnXCI9PT1zLnR5cGUmJnMuY29udGVudFswXSYmXCJ0YWdcIj09PXMuY29udGVudFswXS50eXBlP1wiPC9cIj09PXMuY29udGVudFswXS5jb250ZW50WzBdLmNvbnRlbnQ/MDx0Lmxlbmd0aCYmdFt0Lmxlbmd0aC0xXS50YWdOYW1lPT09dShzLmNvbnRlbnRbMF0uY29udGVudFsxXSkmJnQucG9wKCk6XCIvPlwiPT09cy5jb250ZW50W3MuY29udGVudC5sZW5ndGgtMV0uY29udGVudHx8dC5wdXNoKHt0YWdOYW1lOnUocy5jb250ZW50WzBdLmNvbnRlbnRbMV0pLG9wZW5lZEJyYWNlczowfSk6MDx0Lmxlbmd0aCYmXCJwdW5jdHVhdGlvblwiPT09cy50eXBlJiZcIntcIj09PXMuY29udGVudD90W3QubGVuZ3RoLTFdLm9wZW5lZEJyYWNlcysrOjA8dC5sZW5ndGgmJjA8dFt0Lmxlbmd0aC0xXS5vcGVuZWRCcmFjZXMmJlwicHVuY3R1YXRpb25cIj09PXMudHlwZSYmXCJ9XCI9PT1zLmNvbnRlbnQ/dFt0Lmxlbmd0aC0xXS5vcGVuZWRCcmFjZXMtLTpyPSEwKSwocnx8XCJzdHJpbmdcIj09dHlwZW9mIHMpJiYwPHQubGVuZ3RoJiYwPT09dFt0Lmxlbmd0aC0xXS5vcGVuZWRCcmFjZXMpe3ZhciBnPXUocyk7YTxlLmxlbmd0aC0xJiYoXCJzdHJpbmdcIj09dHlwZW9mIGVbYSsxXXx8XCJwbGFpbi10ZXh0XCI9PT1lW2ErMV0udHlwZSkmJihnKz11KGVbYSsxXSksZS5zcGxpY2UoYSsxLDEpKSwwPGEmJihcInN0cmluZ1wiPT10eXBlb2YgZVthLTFdfHxcInBsYWluLXRleHRcIj09PWVbYS0xXS50eXBlKSYmKGc9dShlW2EtMV0pK2csZS5zcGxpY2UoYS0xLDEpLGEtLSksZVthXT1uZXcgaS5Ub2tlbihcInBsYWluLXRleHRcIixnLG51bGwsZyl9cy5jb250ZW50JiZcInN0cmluZ1wiIT10eXBlb2Ygcy5jb250ZW50JiZjKHMuY29udGVudCxzLnR5cGUpfVwic3VyZmFjZVwiPT09biYmZS5zaGlmdCgpfTtpLmhvb2tzLmFkZChcImFmdGVyLXRva2VuaXplXCIsZnVuY3Rpb24oZSl7XCJzdXJmYWNlXCIhPT1lLmxhbmd1YWdlJiZcImVsaXhpclwiIT09ZS5sYW5ndWFnZXx8YyhlLnRva2VucyxlLmxhbmd1YWdlKX0pfShQcmlzbSk7XG4hZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZi5QcmlzbSYmc2VsZi5kb2N1bWVudCYmZG9jdW1lbnQucXVlcnlTZWxlY3Rvcil7dmFyIHQsbz1cImxpbmUtbnVtYmVyc1wiLHM9XCJsaW5rYWJsZS1saW5lLW51bWJlcnNcIixhPWZ1bmN0aW9uKCl7aWYodm9pZCAwPT09dCl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtlLnN0eWxlLmZvbnRTaXplPVwiMTNweFwiLGUuc3R5bGUubGluZUhlaWdodD1cIjEuNVwiLGUuc3R5bGUucGFkZGluZz1cIjBcIixlLnN0eWxlLmJvcmRlcj1cIjBcIixlLmlubmVySFRNTD1cIiZuYnNwOzxiciAvPiZuYnNwO1wiLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZSksdD0zOD09PWUub2Zmc2V0SGVpZ2h0LGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZSl9cmV0dXJuIHR9LGw9ITAsdT0wO1ByaXNtLmhvb2tzLmFkZChcImJlZm9yZS1zYW5pdHktY2hlY2tcIixmdW5jdGlvbihlKXt2YXIgdD1lLmVsZW1lbnQucGFyZW50RWxlbWVudDtpZihjKHQpKXt2YXIgbj0wO3YoXCIubGluZS1oaWdobGlnaHRcIix0KS5mb3JFYWNoKGZ1bmN0aW9uKGUpe24rPWUudGV4dENvbnRlbnQubGVuZ3RoLGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKX0pLG4mJi9eKCBcXG4pKyQvLnRlc3QoZS5jb2RlLnNsaWNlKC1uKSkmJihlLmNvZGU9ZS5jb2RlLnNsaWNlKDAsLW4pKX19KSxQcmlzbS5ob29rcy5hZGQoXCJjb21wbGV0ZVwiLGZ1bmN0aW9uIGUodCl7dmFyIG49dC5lbGVtZW50LnBhcmVudEVsZW1lbnQ7aWYoYyhuKSl7Y2xlYXJUaW1lb3V0KHUpO3ZhciBpPVByaXNtLnBsdWdpbnMubGluZU51bWJlcnMscj10LnBsdWdpbnMmJnQucGx1Z2lucy5saW5lTnVtYmVycztpZihiKG4sbykmJmkmJiFyKVByaXNtLmhvb2tzLmFkZChcImxpbmUtbnVtYmVyc1wiLGUpO2Vsc2UgZChuKSgpLHU9c2V0VGltZW91dChmLDEpfX0pLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiaGFzaGNoYW5nZVwiLGYpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsZnVuY3Rpb24oKXt2KFwicHJlXCIpLmZpbHRlcihjKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGQoZSl9KS5mb3JFYWNoKHkpfSl9ZnVuY3Rpb24gdihlLHQpe3JldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCgodHx8ZG9jdW1lbnQpLnF1ZXJ5U2VsZWN0b3JBbGwoZSkpfWZ1bmN0aW9uIGIoZSx0KXtyZXR1cm4gZS5jbGFzc0xpc3QuY29udGFpbnModCl9ZnVuY3Rpb24geShlKXtlKCl9ZnVuY3Rpb24gYyhlKXtyZXR1cm4hKCFlfHwhL3ByZS9pLnRlc3QoZS5ub2RlTmFtZSkpJiYoISFlLmhhc0F0dHJpYnV0ZShcImRhdGEtbGluZVwiKXx8ISghZS5pZHx8IVByaXNtLnV0aWwuaXNBY3RpdmUoZSxzKSkpfWZ1bmN0aW9uIGQodSxlLGMpe3ZhciB0PShlPVwic3RyaW5nXCI9PXR5cGVvZiBlP2U6dS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWxpbmVcIil8fFwiXCIpLnJlcGxhY2UoL1xccysvZyxcIlwiKS5zcGxpdChcIixcIikuZmlsdGVyKEJvb2xlYW4pLGQ9K3UuZ2V0QXR0cmlidXRlKFwiZGF0YS1saW5lLW9mZnNldFwiKXx8MCxmPShhKCk/cGFyc2VJbnQ6cGFyc2VGbG9hdCkoZ2V0Q29tcHV0ZWRTdHlsZSh1KS5saW5lSGVpZ2h0KSxwPVByaXNtLnV0aWwuaXNBY3RpdmUodSxvKSxuPXUucXVlcnlTZWxlY3RvcihcImNvZGVcIiksaD1wP3U6bnx8dSxtPVtdLGc9biYmaCE9bj9mdW5jdGlvbihlLHQpe3ZhciBuPWdldENvbXB1dGVkU3R5bGUoZSksaT1nZXRDb21wdXRlZFN0eWxlKHQpO2Z1bmN0aW9uIHIoZSl7cmV0dXJuK2Uuc3Vic3RyKDAsZS5sZW5ndGgtMil9cmV0dXJuIHQub2Zmc2V0VG9wK3IoaS5ib3JkZXJUb3BXaWR0aCkrcihpLnBhZGRpbmdUb3ApLXIobi5wYWRkaW5nVG9wKX0odSxuKTowO3QuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1lLnNwbGl0KFwiLVwiKSxuPSt0WzBdLGk9K3RbMV18fG4scj11LnF1ZXJ5U2VsZWN0b3IoJy5saW5lLWhpZ2hsaWdodFtkYXRhLXJhbmdlPVwiJytlKydcIl0nKXx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtpZihtLnB1c2goZnVuY3Rpb24oKXtyLnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsXCJ0cnVlXCIpLHIuc2V0QXR0cmlidXRlKFwiZGF0YS1yYW5nZVwiLGUpLHIuY2xhc3NOYW1lPShjfHxcIlwiKStcIiBsaW5lLWhpZ2hsaWdodFwifSkscCYmUHJpc20ucGx1Z2lucy5saW5lTnVtYmVycyl7dmFyIG89UHJpc20ucGx1Z2lucy5saW5lTnVtYmVycy5nZXRMaW5lKHUsbikscz1QcmlzbS5wbHVnaW5zLmxpbmVOdW1iZXJzLmdldExpbmUodSxpKTtpZihvKXt2YXIgYT1vLm9mZnNldFRvcCtnK1wicHhcIjttLnB1c2goZnVuY3Rpb24oKXtyLnN0eWxlLnRvcD1hfSl9aWYocyl7dmFyIGw9cy5vZmZzZXRUb3Atby5vZmZzZXRUb3Arcy5vZmZzZXRIZWlnaHQrXCJweFwiO20ucHVzaChmdW5jdGlvbigpe3Iuc3R5bGUuaGVpZ2h0PWx9KX19ZWxzZSBtLnB1c2goZnVuY3Rpb24oKXtyLnNldEF0dHJpYnV0ZShcImRhdGEtc3RhcnRcIixTdHJpbmcobikpLG48aSYmci5zZXRBdHRyaWJ1dGUoXCJkYXRhLWVuZFwiLFN0cmluZyhpKSksci5zdHlsZS50b3A9KG4tZC0xKSpmK2crXCJweFwiLHIudGV4dENvbnRlbnQ9bmV3IEFycmF5KGktbisyKS5qb2luKFwiIFxcblwiKX0pO20ucHVzaChmdW5jdGlvbigpe2guYXBwZW5kQ2hpbGQocil9KX0pO3ZhciBpPXUuaWQ7aWYocCYmUHJpc20udXRpbC5pc0FjdGl2ZSh1LHMpJiZpKXtiKHUscyl8fG0ucHVzaChmdW5jdGlvbigpe3UuY2xhc3NMaXN0LmFkZChzKX0pO3ZhciByPXBhcnNlSW50KHUuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdGFydFwiKXx8XCIxXCIpO3YoXCIubGluZS1udW1iZXJzLXJvd3MgPiBzcGFuXCIsdSkuZm9yRWFjaChmdW5jdGlvbihlLHQpe3ZhciBuPXQrcjtlLm9uY2xpY2s9ZnVuY3Rpb24oKXt2YXIgZT1pK1wiLlwiK247bD0hMSxsb2NhdGlvbi5oYXNoPWUsc2V0VGltZW91dChmdW5jdGlvbigpe2w9ITB9LDEpfX0pfXJldHVybiBmdW5jdGlvbigpe20uZm9yRWFjaCh5KX19ZnVuY3Rpb24gZigpe3ZhciBlPWxvY2F0aW9uLmhhc2guc2xpY2UoMSk7dihcIi50ZW1wb3JhcnkubGluZS1oaWdobGlnaHRcIikuZm9yRWFjaChmdW5jdGlvbihlKXtlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSl9KTt2YXIgdD0oZS5tYXRjaCgvXFwuKFtcXGQsLV0rKSQvKXx8WyxcIlwiXSlbMV07aWYodCYmIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGUpKXt2YXIgbj1lLnNsaWNlKDAsZS5sYXN0SW5kZXhPZihcIi5cIikpLGk9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobik7aWYoaSlpLmhhc0F0dHJpYnV0ZShcImRhdGEtbGluZVwiKXx8aS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWxpbmVcIixcIlwiKSxkKGksdCxcInRlbXBvcmFyeSBcIikoKSxsJiZkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRlbXBvcmFyeS5saW5lLWhpZ2hsaWdodFwiKS5zY3JvbGxJbnRvVmlldygpfX19KCk7XG4hZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZi5QcmlzbSYmc2VsZi5kb2N1bWVudCl7dmFyIG89XCJsaW5lLW51bWJlcnNcIixhPS9cXG4oPyEkKS9nLGU9UHJpc20ucGx1Z2lucy5saW5lTnVtYmVycz17Z2V0TGluZTpmdW5jdGlvbihlLG4pe2lmKFwiUFJFXCI9PT1lLnRhZ05hbWUmJmUuY2xhc3NMaXN0LmNvbnRhaW5zKG8pKXt2YXIgdD1lLnF1ZXJ5U2VsZWN0b3IoXCIubGluZS1udW1iZXJzLXJvd3NcIik7aWYodCl7dmFyIGk9cGFyc2VJbnQoZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN0YXJ0XCIpLDEwKXx8MSxyPWkrKHQuY2hpbGRyZW4ubGVuZ3RoLTEpO248aSYmKG49aSkscjxuJiYobj1yKTt2YXIgcz1uLWk7cmV0dXJuIHQuY2hpbGRyZW5bc119fX0scmVzaXplOmZ1bmN0aW9uKGUpe3UoW2VdKX0sYXNzdW1lVmlld3BvcnRJbmRlcGVuZGVuY2U6ITB9LHQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGU/d2luZG93LmdldENvbXB1dGVkU3R5bGU/Z2V0Q29tcHV0ZWRTdHlsZShlKTplLmN1cnJlbnRTdHlsZXx8bnVsbDpudWxsfSxuPXZvaWQgMDt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLGZ1bmN0aW9uKCl7ZS5hc3N1bWVWaWV3cG9ydEluZGVwZW5kZW5jZSYmbj09PXdpbmRvdy5pbm5lcldpZHRofHwobj13aW5kb3cuaW5uZXJXaWR0aCx1KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJwcmUuXCIrbykpKSl9KSxQcmlzbS5ob29rcy5hZGQoXCJjb21wbGV0ZVwiLGZ1bmN0aW9uKGUpe2lmKGUuY29kZSl7dmFyIG49ZS5lbGVtZW50LHQ9bi5wYXJlbnROb2RlO2lmKHQmJi9wcmUvaS50ZXN0KHQubm9kZU5hbWUpJiYhbi5xdWVyeVNlbGVjdG9yKFwiLmxpbmUtbnVtYmVycy1yb3dzXCIpJiZQcmlzbS51dGlsLmlzQWN0aXZlKG4sbykpe24uY2xhc3NMaXN0LnJlbW92ZShvKSx0LmNsYXNzTGlzdC5hZGQobyk7dmFyIGkscj1lLmNvZGUubWF0Y2goYSkscz1yP3IubGVuZ3RoKzE6MSxsPW5ldyBBcnJheShzKzEpLmpvaW4oXCI8c3Bhbj48L3NwYW4+XCIpOyhpPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpKS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLFwidHJ1ZVwiKSxpLmNsYXNzTmFtZT1cImxpbmUtbnVtYmVycy1yb3dzXCIsaS5pbm5lckhUTUw9bCx0Lmhhc0F0dHJpYnV0ZShcImRhdGEtc3RhcnRcIikmJih0LnN0eWxlLmNvdW50ZXJSZXNldD1cImxpbmVudW1iZXIgXCIrKHBhcnNlSW50KHQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdGFydFwiKSwxMCktMSkpLGUuZWxlbWVudC5hcHBlbmRDaGlsZChpKSx1KFt0XSksUHJpc20uaG9va3MucnVuKFwibGluZS1udW1iZXJzXCIsZSl9fX0pLFByaXNtLmhvb2tzLmFkZChcImxpbmUtbnVtYmVyc1wiLGZ1bmN0aW9uKGUpe2UucGx1Z2lucz1lLnBsdWdpbnN8fHt9LGUucGx1Z2lucy5saW5lTnVtYmVycz0hMH0pfWZ1bmN0aW9uIHUoZSl7aWYoMCE9KGU9ZS5maWx0ZXIoZnVuY3Rpb24oZSl7dmFyIG49dChlKVtcIndoaXRlLXNwYWNlXCJdO3JldHVyblwicHJlLXdyYXBcIj09PW58fFwicHJlLWxpbmVcIj09PW59KSkubGVuZ3RoKXt2YXIgbj1lLm1hcChmdW5jdGlvbihlKXt2YXIgbj1lLnF1ZXJ5U2VsZWN0b3IoXCJjb2RlXCIpLHQ9ZS5xdWVyeVNlbGVjdG9yKFwiLmxpbmUtbnVtYmVycy1yb3dzXCIpO2lmKG4mJnQpe3ZhciBpPWUucXVlcnlTZWxlY3RvcihcIi5saW5lLW51bWJlcnMtc2l6ZXJcIikscj1uLnRleHRDb250ZW50LnNwbGl0KGEpO2l8fCgoaT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKSkuY2xhc3NOYW1lPVwibGluZS1udW1iZXJzLXNpemVyXCIsbi5hcHBlbmRDaGlsZChpKSksaS5pbm5lckhUTUw9XCIwXCIsaS5zdHlsZS5kaXNwbGF5PVwiYmxvY2tcIjt2YXIgcz1pLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtyZXR1cm4gaS5pbm5lckhUTUw9XCJcIix7ZWxlbWVudDplLGxpbmVzOnIsbGluZUhlaWdodHM6W10sb25lTGluZXJIZWlnaHQ6cyxzaXplcjppfX19KS5maWx0ZXIoQm9vbGVhbik7bi5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciBpPWUuc2l6ZXIsbj1lLmxpbmVzLHI9ZS5saW5lSGVpZ2h0cyxzPWUub25lTGluZXJIZWlnaHQ7cltuLmxlbmd0aC0xXT12b2lkIDAsbi5mb3JFYWNoKGZ1bmN0aW9uKGUsbil7aWYoZSYmMTxlLmxlbmd0aCl7dmFyIHQ9aS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKSk7dC5zdHlsZS5kaXNwbGF5PVwiYmxvY2tcIix0LnRleHRDb250ZW50PWV9ZWxzZSByW25dPXN9KX0pLG4uZm9yRWFjaChmdW5jdGlvbihlKXtmb3IodmFyIG49ZS5zaXplcix0PWUubGluZUhlaWdodHMsaT0wLHI9MDtyPHQubGVuZ3RoO3IrKyl2b2lkIDA9PT10W3JdJiYodFtyXT1uLmNoaWxkcmVuW2krK10uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0KX0pLG4uZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgbj1lLnNpemVyLHQ9ZS5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubGluZS1udW1iZXJzLXJvd3NcIik7bi5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLG4uaW5uZXJIVE1MPVwiXCIsZS5saW5lSGVpZ2h0cy5mb3JFYWNoKGZ1bmN0aW9uKGUsbil7dC5jaGlsZHJlbltuXS5zdHlsZS5oZWlnaHQ9ZStcInB4XCJ9KX0pfX19KCk7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbigpIHtcbiAgdmFyIFBvbHlmaWxsRXZlbnQgPSBldmVudENvbnN0cnVjdG9yKCk7XG5cbiAgZnVuY3Rpb24gZXZlbnRDb25zdHJ1Y3RvcigpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudCA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gd2luZG93LkN1c3RvbUV2ZW50O1xuICAgIC8vIElFPD05IFN1cHBvcnRcbiAgICBmdW5jdGlvbiBDdXN0b21FdmVudChldmVudCwgcGFyYW1zKSB7XG4gICAgICBwYXJhbXMgPSBwYXJhbXMgfHwge2J1YmJsZXM6IGZhbHNlLCBjYW5jZWxhYmxlOiBmYWxzZSwgZGV0YWlsOiB1bmRlZmluZWR9O1xuICAgICAgdmFyIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICAgICAgZXZ0LmluaXRDdXN0b21FdmVudChldmVudCwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlLCBwYXJhbXMuZGV0YWlsKTtcbiAgICAgIHJldHVybiBldnQ7XG4gICAgfVxuICAgIEN1c3RvbUV2ZW50LnByb3RvdHlwZSA9IHdpbmRvdy5FdmVudC5wcm90b3R5cGU7XG4gICAgcmV0dXJuIEN1c3RvbUV2ZW50O1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRIaWRkZW5JbnB1dChuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICBpbnB1dC50eXBlID0gXCJoaWRkZW5cIjtcbiAgICBpbnB1dC5uYW1lID0gbmFtZTtcbiAgICBpbnB1dC52YWx1ZSA9IHZhbHVlO1xuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGVsZW1lbnQsIHRhcmdldE1vZGlmaWVyS2V5KSB7XG4gICAgdmFyIHRvID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRvXCIpLFxuICAgICAgICBtZXRob2QgPSBidWlsZEhpZGRlbklucHV0KFwiX21ldGhvZFwiLCBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtbWV0aG9kXCIpKSxcbiAgICAgICAgY3NyZiA9IGJ1aWxkSGlkZGVuSW5wdXQoXCJfY3NyZl90b2tlblwiLCBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtY3NyZlwiKSksXG4gICAgICAgIGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKSxcbiAgICAgICAgc3VibWl0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpLFxuICAgICAgICB0YXJnZXQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcInRhcmdldFwiKTtcblxuICAgIGZvcm0ubWV0aG9kID0gKGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1tZXRob2RcIikgPT09IFwiZ2V0XCIpID8gXCJnZXRcIiA6IFwicG9zdFwiO1xuICAgIGZvcm0uYWN0aW9uID0gdG87XG4gICAgZm9ybS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG5cbiAgICBpZiAodGFyZ2V0KSBmb3JtLnRhcmdldCA9IHRhcmdldDtcbiAgICBlbHNlIGlmICh0YXJnZXRNb2RpZmllcktleSkgZm9ybS50YXJnZXQgPSBcIl9ibGFua1wiO1xuXG4gICAgZm9ybS5hcHBlbmRDaGlsZChjc3JmKTtcbiAgICBmb3JtLmFwcGVuZENoaWxkKG1ldGhvZCk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmb3JtKTtcblxuICAgIC8vIEluc2VydCBhIGJ1dHRvbiBhbmQgY2xpY2sgaXQgaW5zdGVhZCBvZiB1c2luZyBgZm9ybS5zdWJtaXRgXG4gICAgLy8gYmVjYXVzZSB0aGUgYHN1Ym1pdGAgZnVuY3Rpb24gZG9lcyBub3QgZW1pdCBhIGBzdWJtaXRgIGV2ZW50LlxuICAgIHN1Ym1pdC50eXBlID0gXCJzdWJtaXRcIjtcbiAgICBmb3JtLmFwcGVuZENoaWxkKHN1Ym1pdCk7XG4gICAgc3VibWl0LmNsaWNrKCk7XG4gIH1cblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgZWxlbWVudCA9IGUudGFyZ2V0O1xuICAgIGlmIChlLmRlZmF1bHRQcmV2ZW50ZWQpIHJldHVybjtcblxuICAgIHdoaWxlIChlbGVtZW50ICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKSB7XG4gICAgICB2YXIgcGhvZW5peExpbmtFdmVudCA9IG5ldyBQb2x5ZmlsbEV2ZW50KCdwaG9lbml4LmxpbmsuY2xpY2snLCB7XG4gICAgICAgIFwiYnViYmxlc1wiOiB0cnVlLCBcImNhbmNlbGFibGVcIjogdHJ1ZVxuICAgICAgfSk7XG5cbiAgICAgIGlmICghZWxlbWVudC5kaXNwYXRjaEV2ZW50KHBob2VuaXhMaW5rRXZlbnQpKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1ldGhvZFwiKSkge1xuICAgICAgICBoYW5kbGVDbGljayhlbGVtZW50LCBlLm1ldGFLZXkgfHwgZS5zaGlmdEtleSk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIGZhbHNlKTtcblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncGhvZW5peC5saW5rLmNsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgbWVzc2FnZSA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcImRhdGEtY29uZmlybVwiKTtcbiAgICBpZihtZXNzYWdlICYmICF3aW5kb3cuY29uZmlybShtZXNzYWdlKSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSwgZmFsc2UpO1xufSkoKTtcbiIsICIvLyB3cmFwcyB2YWx1ZSBpbiBjbG9zdXJlIG9yIHJldHVybnMgY2xvc3VyZVxuZXhwb3J0IGxldCBjbG9zdXJlID0gKHZhbHVlKSA9PiB7XG4gIGlmKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKXtcbiAgICByZXR1cm4gdmFsdWVcbiAgfSBlbHNlIHtcbiAgICBsZXQgY2xvc3VyZSA9IGZ1bmN0aW9uICgpeyByZXR1cm4gdmFsdWUgfVxuICAgIHJldHVybiBjbG9zdXJlXG4gIH1cbn1cbiIsICJleHBvcnQgY29uc3QgZ2xvYmFsU2VsZiA9IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IG51bGxcbmV4cG9ydCBjb25zdCBwaHhXaW5kb3cgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogbnVsbFxuZXhwb3J0IGNvbnN0IGdsb2JhbCA9IGdsb2JhbFNlbGYgfHwgcGh4V2luZG93IHx8IGdsb2JhbFxuZXhwb3J0IGNvbnN0IERFRkFVTFRfVlNOID0gXCIyLjAuMFwiXG5leHBvcnQgY29uc3QgU09DS0VUX1NUQVRFUyA9IHtjb25uZWN0aW5nOiAwLCBvcGVuOiAxLCBjbG9zaW5nOiAyLCBjbG9zZWQ6IDN9XG5leHBvcnQgY29uc3QgREVGQVVMVF9USU1FT1VUID0gMTAwMDBcbmV4cG9ydCBjb25zdCBXU19DTE9TRV9OT1JNQUwgPSAxMDAwXG5leHBvcnQgY29uc3QgQ0hBTk5FTF9TVEFURVMgPSB7XG4gIGNsb3NlZDogXCJjbG9zZWRcIixcbiAgZXJyb3JlZDogXCJlcnJvcmVkXCIsXG4gIGpvaW5lZDogXCJqb2luZWRcIixcbiAgam9pbmluZzogXCJqb2luaW5nXCIsXG4gIGxlYXZpbmc6IFwibGVhdmluZ1wiLFxufVxuZXhwb3J0IGNvbnN0IENIQU5ORUxfRVZFTlRTID0ge1xuICBjbG9zZTogXCJwaHhfY2xvc2VcIixcbiAgZXJyb3I6IFwicGh4X2Vycm9yXCIsXG4gIGpvaW46IFwicGh4X2pvaW5cIixcbiAgcmVwbHk6IFwicGh4X3JlcGx5XCIsXG4gIGxlYXZlOiBcInBoeF9sZWF2ZVwiXG59XG5cbmV4cG9ydCBjb25zdCBUUkFOU1BPUlRTID0ge1xuICBsb25ncG9sbDogXCJsb25ncG9sbFwiLFxuICB3ZWJzb2NrZXQ6IFwid2Vic29ja2V0XCJcbn1cbmV4cG9ydCBjb25zdCBYSFJfU1RBVEVTID0ge1xuICBjb21wbGV0ZTogNFxufVxuIiwgIi8qKlxuICogSW5pdGlhbGl6ZXMgdGhlIFB1c2hcbiAqIEBwYXJhbSB7Q2hhbm5lbH0gY2hhbm5lbCAtIFRoZSBDaGFubmVsXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQgLSBUaGUgZXZlbnQsIGZvciBleGFtcGxlIGBcInBoeF9qb2luXCJgXG4gKiBAcGFyYW0ge09iamVjdH0gcGF5bG9hZCAtIFRoZSBwYXlsb2FkLCBmb3IgZXhhbXBsZSBge3VzZXJfaWQ6IDEyM31gXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZW91dCAtIFRoZSBwdXNoIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFB1c2gge1xuICBjb25zdHJ1Y3RvcihjaGFubmVsLCBldmVudCwgcGF5bG9hZCwgdGltZW91dCl7XG4gICAgdGhpcy5jaGFubmVsID0gY2hhbm5lbFxuICAgIHRoaXMuZXZlbnQgPSBldmVudFxuICAgIHRoaXMucGF5bG9hZCA9IHBheWxvYWQgfHwgZnVuY3Rpb24gKCl7IHJldHVybiB7fSB9XG4gICAgdGhpcy5yZWNlaXZlZFJlc3AgPSBudWxsXG4gICAgdGhpcy50aW1lb3V0ID0gdGltZW91dFxuICAgIHRoaXMudGltZW91dFRpbWVyID0gbnVsbFxuICAgIHRoaXMucmVjSG9va3MgPSBbXVxuICAgIHRoaXMuc2VudCA9IGZhbHNlXG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVvdXRcbiAgICovXG4gIHJlc2VuZCh0aW1lb3V0KXtcbiAgICB0aGlzLnRpbWVvdXQgPSB0aW1lb3V0XG4gICAgdGhpcy5yZXNldCgpXG4gICAgdGhpcy5zZW5kKClcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgc2VuZCgpe1xuICAgIGlmKHRoaXMuaGFzUmVjZWl2ZWQoXCJ0aW1lb3V0XCIpKXsgcmV0dXJuIH1cbiAgICB0aGlzLnN0YXJ0VGltZW91dCgpXG4gICAgdGhpcy5zZW50ID0gdHJ1ZVxuICAgIHRoaXMuY2hhbm5lbC5zb2NrZXQucHVzaCh7XG4gICAgICB0b3BpYzogdGhpcy5jaGFubmVsLnRvcGljLFxuICAgICAgZXZlbnQ6IHRoaXMuZXZlbnQsXG4gICAgICBwYXlsb2FkOiB0aGlzLnBheWxvYWQoKSxcbiAgICAgIHJlZjogdGhpcy5yZWYsXG4gICAgICBqb2luX3JlZjogdGhpcy5jaGFubmVsLmpvaW5SZWYoKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHsqfSBzdGF0dXNcbiAgICogQHBhcmFtIHsqfSBjYWxsYmFja1xuICAgKi9cbiAgcmVjZWl2ZShzdGF0dXMsIGNhbGxiYWNrKXtcbiAgICBpZih0aGlzLmhhc1JlY2VpdmVkKHN0YXR1cykpe1xuICAgICAgY2FsbGJhY2sodGhpcy5yZWNlaXZlZFJlc3AucmVzcG9uc2UpXG4gICAgfVxuXG4gICAgdGhpcy5yZWNIb29rcy5wdXNoKHtzdGF0dXMsIGNhbGxiYWNrfSlcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICByZXNldCgpe1xuICAgIHRoaXMuY2FuY2VsUmVmRXZlbnQoKVxuICAgIHRoaXMucmVmID0gbnVsbFxuICAgIHRoaXMucmVmRXZlbnQgPSBudWxsXG4gICAgdGhpcy5yZWNlaXZlZFJlc3AgPSBudWxsXG4gICAgdGhpcy5zZW50ID0gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgbWF0Y2hSZWNlaXZlKHtzdGF0dXMsIHJlc3BvbnNlLCBfcmVmfSl7XG4gICAgdGhpcy5yZWNIb29rcy5maWx0ZXIoaCA9PiBoLnN0YXR1cyA9PT0gc3RhdHVzKVxuICAgICAgLmZvckVhY2goaCA9PiBoLmNhbGxiYWNrKHJlc3BvbnNlKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY2FuY2VsUmVmRXZlbnQoKXtcbiAgICBpZighdGhpcy5yZWZFdmVudCl7IHJldHVybiB9XG4gICAgdGhpcy5jaGFubmVsLm9mZih0aGlzLnJlZkV2ZW50KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjYW5jZWxUaW1lb3V0KCl7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dFRpbWVyKVxuICAgIHRoaXMudGltZW91dFRpbWVyID0gbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzdGFydFRpbWVvdXQoKXtcbiAgICBpZih0aGlzLnRpbWVvdXRUaW1lcil7IHRoaXMuY2FuY2VsVGltZW91dCgpIH1cbiAgICB0aGlzLnJlZiA9IHRoaXMuY2hhbm5lbC5zb2NrZXQubWFrZVJlZigpXG4gICAgdGhpcy5yZWZFdmVudCA9IHRoaXMuY2hhbm5lbC5yZXBseUV2ZW50TmFtZSh0aGlzLnJlZilcblxuICAgIHRoaXMuY2hhbm5lbC5vbih0aGlzLnJlZkV2ZW50LCBwYXlsb2FkID0+IHtcbiAgICAgIHRoaXMuY2FuY2VsUmVmRXZlbnQoKVxuICAgICAgdGhpcy5jYW5jZWxUaW1lb3V0KClcbiAgICAgIHRoaXMucmVjZWl2ZWRSZXNwID0gcGF5bG9hZFxuICAgICAgdGhpcy5tYXRjaFJlY2VpdmUocGF5bG9hZClcbiAgICB9KVxuXG4gICAgdGhpcy50aW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMudHJpZ2dlcihcInRpbWVvdXRcIiwge30pXG4gICAgfSwgdGhpcy50aW1lb3V0KVxuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBoYXNSZWNlaXZlZChzdGF0dXMpe1xuICAgIHJldHVybiB0aGlzLnJlY2VpdmVkUmVzcCAmJiB0aGlzLnJlY2VpdmVkUmVzcC5zdGF0dXMgPT09IHN0YXR1c1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0cmlnZ2VyKHN0YXR1cywgcmVzcG9uc2Upe1xuICAgIHRoaXMuY2hhbm5lbC50cmlnZ2VyKHRoaXMucmVmRXZlbnQsIHtzdGF0dXMsIHJlc3BvbnNlfSlcbiAgfVxufVxuIiwgIi8qKlxuICpcbiAqIENyZWF0ZXMgYSB0aW1lciB0aGF0IGFjY2VwdHMgYSBgdGltZXJDYWxjYCBmdW5jdGlvbiB0byBwZXJmb3JtXG4gKiBjYWxjdWxhdGVkIHRpbWVvdXQgcmV0cmllcywgc3VjaCBhcyBleHBvbmVudGlhbCBiYWNrb2ZmLlxuICpcbiAqIEBleGFtcGxlXG4gKiBsZXQgcmVjb25uZWN0VGltZXIgPSBuZXcgVGltZXIoKCkgPT4gdGhpcy5jb25uZWN0KCksIGZ1bmN0aW9uKHRyaWVzKXtcbiAqICAgcmV0dXJuIFsxMDAwLCA1MDAwLCAxMDAwMF1bdHJpZXMgLSAxXSB8fCAxMDAwMFxuICogfSlcbiAqIHJlY29ubmVjdFRpbWVyLnNjaGVkdWxlVGltZW91dCgpIC8vIGZpcmVzIGFmdGVyIDEwMDBcbiAqIHJlY29ubmVjdFRpbWVyLnNjaGVkdWxlVGltZW91dCgpIC8vIGZpcmVzIGFmdGVyIDUwMDBcbiAqIHJlY29ubmVjdFRpbWVyLnJlc2V0KClcbiAqIHJlY29ubmVjdFRpbWVyLnNjaGVkdWxlVGltZW91dCgpIC8vIGZpcmVzIGFmdGVyIDEwMDBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHBhcmFtIHtGdW5jdGlvbn0gdGltZXJDYWxjXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRpbWVyIHtcbiAgY29uc3RydWN0b3IoY2FsbGJhY2ssIHRpbWVyQ2FsYyl7XG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrXG4gICAgdGhpcy50aW1lckNhbGMgPSB0aW1lckNhbGNcbiAgICB0aGlzLnRpbWVyID0gbnVsbFxuICAgIHRoaXMudHJpZXMgPSAwXG4gIH1cblxuICByZXNldCgpe1xuICAgIHRoaXMudHJpZXMgPSAwXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpXG4gIH1cblxuICAvKipcbiAgICogQ2FuY2VscyBhbnkgcHJldmlvdXMgc2NoZWR1bGVUaW1lb3V0IGFuZCBzY2hlZHVsZXMgY2FsbGJhY2tcbiAgICovXG4gIHNjaGVkdWxlVGltZW91dCgpe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKVxuXG4gICAgdGhpcy50aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy50cmllcyA9IHRoaXMudHJpZXMgKyAxXG4gICAgICB0aGlzLmNhbGxiYWNrKClcbiAgICB9LCB0aGlzLnRpbWVyQ2FsYyh0aGlzLnRyaWVzICsgMSkpXG4gIH1cbn1cbiIsICJpbXBvcnQge2Nsb3N1cmV9IGZyb20gXCIuL3V0aWxzXCJcbmltcG9ydCB7XG4gIENIQU5ORUxfRVZFTlRTLFxuICBDSEFOTkVMX1NUQVRFUyxcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IFB1c2ggZnJvbSBcIi4vcHVzaFwiXG5pbXBvcnQgVGltZXIgZnJvbSBcIi4vdGltZXJcIlxuXG4vKipcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9waWNcbiAqIEBwYXJhbSB7KE9iamVjdHxmdW5jdGlvbil9IHBhcmFtc1xuICogQHBhcmFtIHtTb2NrZXR9IHNvY2tldFxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaGFubmVsIHtcbiAgY29uc3RydWN0b3IodG9waWMsIHBhcmFtcywgc29ja2V0KXtcbiAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMuY2xvc2VkXG4gICAgdGhpcy50b3BpYyA9IHRvcGljXG4gICAgdGhpcy5wYXJhbXMgPSBjbG9zdXJlKHBhcmFtcyB8fCB7fSlcbiAgICB0aGlzLnNvY2tldCA9IHNvY2tldFxuICAgIHRoaXMuYmluZGluZ3MgPSBbXVxuICAgIHRoaXMuYmluZGluZ1JlZiA9IDBcbiAgICB0aGlzLnRpbWVvdXQgPSB0aGlzLnNvY2tldC50aW1lb3V0XG4gICAgdGhpcy5qb2luZWRPbmNlID0gZmFsc2VcbiAgICB0aGlzLmpvaW5QdXNoID0gbmV3IFB1c2godGhpcywgQ0hBTk5FTF9FVkVOVFMuam9pbiwgdGhpcy5wYXJhbXMsIHRoaXMudGltZW91dClcbiAgICB0aGlzLnB1c2hCdWZmZXIgPSBbXVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VSZWZzID0gW11cblxuICAgIHRoaXMucmVqb2luVGltZXIgPSBuZXcgVGltZXIoKCkgPT4ge1xuICAgICAgaWYodGhpcy5zb2NrZXQuaXNDb25uZWN0ZWQoKSl7IHRoaXMucmVqb2luKCkgfVxuICAgIH0sIHRoaXMuc29ja2V0LnJlam9pbkFmdGVyTXMpXG4gICAgdGhpcy5zdGF0ZUNoYW5nZVJlZnMucHVzaCh0aGlzLnNvY2tldC5vbkVycm9yKCgpID0+IHRoaXMucmVqb2luVGltZXIucmVzZXQoKSkpXG4gICAgdGhpcy5zdGF0ZUNoYW5nZVJlZnMucHVzaCh0aGlzLnNvY2tldC5vbk9wZW4oKCkgPT4ge1xuICAgICAgdGhpcy5yZWpvaW5UaW1lci5yZXNldCgpXG4gICAgICBpZih0aGlzLmlzRXJyb3JlZCgpKXsgdGhpcy5yZWpvaW4oKSB9XG4gICAgfSlcbiAgICApXG4gICAgdGhpcy5qb2luUHVzaC5yZWNlaXZlKFwib2tcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmpvaW5lZFxuICAgICAgdGhpcy5yZWpvaW5UaW1lci5yZXNldCgpXG4gICAgICB0aGlzLnB1c2hCdWZmZXIuZm9yRWFjaChwdXNoRXZlbnQgPT4gcHVzaEV2ZW50LnNlbmQoKSlcbiAgICAgIHRoaXMucHVzaEJ1ZmZlciA9IFtdXG4gICAgfSlcbiAgICB0aGlzLmpvaW5QdXNoLnJlY2VpdmUoXCJlcnJvclwiLCAoKSA9PiB7XG4gICAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMuZXJyb3JlZFxuICAgICAgaWYodGhpcy5zb2NrZXQuaXNDb25uZWN0ZWQoKSl7IHRoaXMucmVqb2luVGltZXIuc2NoZWR1bGVUaW1lb3V0KCkgfVxuICAgIH0pXG4gICAgdGhpcy5vbkNsb3NlKCgpID0+IHtcbiAgICAgIHRoaXMucmVqb2luVGltZXIucmVzZXQoKVxuICAgICAgaWYodGhpcy5zb2NrZXQuaGFzTG9nZ2VyKCkpIHRoaXMuc29ja2V0LmxvZyhcImNoYW5uZWxcIiwgYGNsb3NlICR7dGhpcy50b3BpY30gJHt0aGlzLmpvaW5SZWYoKX1gKVxuICAgICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmNsb3NlZFxuICAgICAgdGhpcy5zb2NrZXQucmVtb3ZlKHRoaXMpXG4gICAgfSlcbiAgICB0aGlzLm9uRXJyb3IocmVhc29uID0+IHtcbiAgICAgIGlmKHRoaXMuc29ja2V0Lmhhc0xvZ2dlcigpKSB0aGlzLnNvY2tldC5sb2coXCJjaGFubmVsXCIsIGBlcnJvciAke3RoaXMudG9waWN9YCwgcmVhc29uKVxuICAgICAgaWYodGhpcy5pc0pvaW5pbmcoKSl7IHRoaXMuam9pblB1c2gucmVzZXQoKSB9XG4gICAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMuZXJyb3JlZFxuICAgICAgaWYodGhpcy5zb2NrZXQuaXNDb25uZWN0ZWQoKSl7IHRoaXMucmVqb2luVGltZXIuc2NoZWR1bGVUaW1lb3V0KCkgfVxuICAgIH0pXG4gICAgdGhpcy5qb2luUHVzaC5yZWNlaXZlKFwidGltZW91dFwiLCAoKSA9PiB7XG4gICAgICBpZih0aGlzLnNvY2tldC5oYXNMb2dnZXIoKSkgdGhpcy5zb2NrZXQubG9nKFwiY2hhbm5lbFwiLCBgdGltZW91dCAke3RoaXMudG9waWN9ICgke3RoaXMuam9pblJlZigpfSlgLCB0aGlzLmpvaW5QdXNoLnRpbWVvdXQpXG4gICAgICBsZXQgbGVhdmVQdXNoID0gbmV3IFB1c2godGhpcywgQ0hBTk5FTF9FVkVOVFMubGVhdmUsIGNsb3N1cmUoe30pLCB0aGlzLnRpbWVvdXQpXG4gICAgICBsZWF2ZVB1c2guc2VuZCgpXG4gICAgICB0aGlzLnN0YXRlID0gQ0hBTk5FTF9TVEFURVMuZXJyb3JlZFxuICAgICAgdGhpcy5qb2luUHVzaC5yZXNldCgpXG4gICAgICBpZih0aGlzLnNvY2tldC5pc0Nvbm5lY3RlZCgpKXsgdGhpcy5yZWpvaW5UaW1lci5zY2hlZHVsZVRpbWVvdXQoKSB9XG4gICAgfSlcbiAgICB0aGlzLm9uKENIQU5ORUxfRVZFTlRTLnJlcGx5LCAocGF5bG9hZCwgcmVmKSA9PiB7XG4gICAgICB0aGlzLnRyaWdnZXIodGhpcy5yZXBseUV2ZW50TmFtZShyZWYpLCBwYXlsb2FkKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogSm9pbiB0aGUgY2hhbm5lbFxuICAgKiBAcGFyYW0ge2ludGVnZXJ9IHRpbWVvdXRcbiAgICogQHJldHVybnMge1B1c2h9XG4gICAqL1xuICBqb2luKHRpbWVvdXQgPSB0aGlzLnRpbWVvdXQpe1xuICAgIGlmKHRoaXMuam9pbmVkT25jZSl7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cmllZCB0byBqb2luIG11bHRpcGxlIHRpbWVzLiAnam9pbicgY2FuIG9ubHkgYmUgY2FsbGVkIGEgc2luZ2xlIHRpbWUgcGVyIGNoYW5uZWwgaW5zdGFuY2VcIilcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50aW1lb3V0ID0gdGltZW91dFxuICAgICAgdGhpcy5qb2luZWRPbmNlID0gdHJ1ZVxuICAgICAgdGhpcy5yZWpvaW4oKVxuICAgICAgcmV0dXJuIHRoaXMuam9pblB1c2hcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSG9vayBpbnRvIGNoYW5uZWwgY2xvc2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIG9uQ2xvc2UoY2FsbGJhY2spe1xuICAgIHRoaXMub24oQ0hBTk5FTF9FVkVOVFMuY2xvc2UsIGNhbGxiYWNrKVxuICB9XG5cbiAgLyoqXG4gICAqIEhvb2sgaW50byBjaGFubmVsIGVycm9yc1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cbiAgb25FcnJvcihjYWxsYmFjayl7XG4gICAgcmV0dXJuIHRoaXMub24oQ0hBTk5FTF9FVkVOVFMuZXJyb3IsIHJlYXNvbiA9PiBjYWxsYmFjayhyZWFzb24pKVxuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZXMgb24gY2hhbm5lbCBldmVudHNcbiAgICpcbiAgICogU3Vic2NyaXB0aW9uIHJldHVybnMgYSByZWYgY291bnRlciwgd2hpY2ggY2FuIGJlIHVzZWQgbGF0ZXIgdG9cbiAgICogdW5zdWJzY3JpYmUgdGhlIGV4YWN0IGV2ZW50IGxpc3RlbmVyXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IHJlZjEgPSBjaGFubmVsLm9uKFwiZXZlbnRcIiwgZG9fc3R1ZmYpXG4gICAqIGNvbnN0IHJlZjIgPSBjaGFubmVsLm9uKFwiZXZlbnRcIiwgZG9fb3RoZXJfc3R1ZmYpXG4gICAqIGNoYW5uZWwub2ZmKFwiZXZlbnRcIiwgcmVmMSlcbiAgICogLy8gU2luY2UgdW5zdWJzY3JpcHRpb24sIGRvX3N0dWZmIHdvbid0IGZpcmUsXG4gICAqIC8vIHdoaWxlIGRvX290aGVyX3N0dWZmIHdpbGwga2VlcCBmaXJpbmcgb24gdGhlIFwiZXZlbnRcIlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICogQHJldHVybnMge2ludGVnZXJ9IHJlZlxuICAgKi9cbiAgb24oZXZlbnQsIGNhbGxiYWNrKXtcbiAgICBsZXQgcmVmID0gdGhpcy5iaW5kaW5nUmVmKytcbiAgICB0aGlzLmJpbmRpbmdzLnB1c2goe2V2ZW50LCByZWYsIGNhbGxiYWNrfSlcbiAgICByZXR1cm4gcmVmXG4gIH1cblxuICAvKipcbiAgICogVW5zdWJzY3JpYmVzIG9mZiBvZiBjaGFubmVsIGV2ZW50c1xuICAgKlxuICAgKiBVc2UgdGhlIHJlZiByZXR1cm5lZCBmcm9tIGEgY2hhbm5lbC5vbigpIHRvIHVuc3Vic2NyaWJlIG9uZVxuICAgKiBoYW5kbGVyLCBvciBwYXNzIG5vdGhpbmcgZm9yIHRoZSByZWYgdG8gdW5zdWJzY3JpYmUgYWxsXG4gICAqIGhhbmRsZXJzIGZvciB0aGUgZ2l2ZW4gZXZlbnQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIFVuc3Vic2NyaWJlIHRoZSBkb19zdHVmZiBoYW5kbGVyXG4gICAqIGNvbnN0IHJlZjEgPSBjaGFubmVsLm9uKFwiZXZlbnRcIiwgZG9fc3R1ZmYpXG4gICAqIGNoYW5uZWwub2ZmKFwiZXZlbnRcIiwgcmVmMSlcbiAgICpcbiAgICogLy8gVW5zdWJzY3JpYmUgYWxsIGhhbmRsZXJzIGZyb20gZXZlbnRcbiAgICogY2hhbm5lbC5vZmYoXCJldmVudFwiKVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcbiAgICogQHBhcmFtIHtpbnRlZ2VyfSByZWZcbiAgICovXG4gIG9mZihldmVudCwgcmVmKXtcbiAgICB0aGlzLmJpbmRpbmdzID0gdGhpcy5iaW5kaW5ncy5maWx0ZXIoKGJpbmQpID0+IHtcbiAgICAgIHJldHVybiAhKGJpbmQuZXZlbnQgPT09IGV2ZW50ICYmICh0eXBlb2YgcmVmID09PSBcInVuZGVmaW5lZFwiIHx8IHJlZiA9PT0gYmluZC5yZWYpKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNhblB1c2goKXsgcmV0dXJuIHRoaXMuc29ja2V0LmlzQ29ubmVjdGVkKCkgJiYgdGhpcy5pc0pvaW5lZCgpIH1cblxuICAvKipcbiAgICogU2VuZHMgYSBtZXNzYWdlIGBldmVudGAgdG8gcGhvZW5peCB3aXRoIHRoZSBwYXlsb2FkIGBwYXlsb2FkYC5cbiAgICogUGhvZW5peCByZWNlaXZlcyB0aGlzIGluIHRoZSBgaGFuZGxlX2luKGV2ZW50LCBwYXlsb2FkLCBzb2NrZXQpYFxuICAgKiBmdW5jdGlvbi4gaWYgcGhvZW5peCByZXBsaWVzIG9yIGl0IHRpbWVzIG91dCAoZGVmYXVsdCAxMDAwMG1zKSxcbiAgICogdGhlbiBvcHRpb25hbGx5IHRoZSByZXBseSBjYW4gYmUgcmVjZWl2ZWQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNoYW5uZWwucHVzaChcImV2ZW50XCIpXG4gICAqICAgLnJlY2VpdmUoXCJva1wiLCBwYXlsb2FkID0+IGNvbnNvbGUubG9nKFwicGhvZW5peCByZXBsaWVkOlwiLCBwYXlsb2FkKSlcbiAgICogICAucmVjZWl2ZShcImVycm9yXCIsIGVyciA9PiBjb25zb2xlLmxvZyhcInBob2VuaXggZXJyb3JlZFwiLCBlcnIpKVxuICAgKiAgIC5yZWNlaXZlKFwidGltZW91dFwiLCAoKSA9PiBjb25zb2xlLmxvZyhcInRpbWVkIG91dCBwdXNoaW5nXCIpKVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IHBheWxvYWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFt0aW1lb3V0XVxuICAgKiBAcmV0dXJucyB7UHVzaH1cbiAgICovXG4gIHB1c2goZXZlbnQsIHBheWxvYWQsIHRpbWVvdXQgPSB0aGlzLnRpbWVvdXQpe1xuICAgIHBheWxvYWQgPSBwYXlsb2FkIHx8IHt9XG4gICAgaWYoIXRoaXMuam9pbmVkT25jZSl7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHRyaWVkIHRvIHB1c2ggJyR7ZXZlbnR9JyB0byAnJHt0aGlzLnRvcGljfScgYmVmb3JlIGpvaW5pbmcuIFVzZSBjaGFubmVsLmpvaW4oKSBiZWZvcmUgcHVzaGluZyBldmVudHNgKVxuICAgIH1cbiAgICBsZXQgcHVzaEV2ZW50ID0gbmV3IFB1c2godGhpcywgZXZlbnQsIGZ1bmN0aW9uICgpeyByZXR1cm4gcGF5bG9hZCB9LCB0aW1lb3V0KVxuICAgIGlmKHRoaXMuY2FuUHVzaCgpKXtcbiAgICAgIHB1c2hFdmVudC5zZW5kKClcbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaEV2ZW50LnN0YXJ0VGltZW91dCgpXG4gICAgICB0aGlzLnB1c2hCdWZmZXIucHVzaChwdXNoRXZlbnQpXG4gICAgfVxuXG4gICAgcmV0dXJuIHB1c2hFdmVudFxuICB9XG5cbiAgLyoqIExlYXZlcyB0aGUgY2hhbm5lbFxuICAgKlxuICAgKiBVbnN1YnNjcmliZXMgZnJvbSBzZXJ2ZXIgZXZlbnRzLCBhbmRcbiAgICogaW5zdHJ1Y3RzIGNoYW5uZWwgdG8gdGVybWluYXRlIG9uIHNlcnZlclxuICAgKlxuICAgKiBUcmlnZ2VycyBvbkNsb3NlKCkgaG9va3NcbiAgICpcbiAgICogVG8gcmVjZWl2ZSBsZWF2ZSBhY2tub3dsZWRnZW1lbnRzLCB1c2UgdGhlIGByZWNlaXZlYFxuICAgKiBob29rIHRvIGJpbmQgdG8gdGhlIHNlcnZlciBhY2ssIGllOlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBjaGFubmVsLmxlYXZlKCkucmVjZWl2ZShcIm9rXCIsICgpID0+IGFsZXJ0KFwibGVmdCFcIikgKVxuICAgKlxuICAgKiBAcGFyYW0ge2ludGVnZXJ9IHRpbWVvdXRcbiAgICogQHJldHVybnMge1B1c2h9XG4gICAqL1xuICBsZWF2ZSh0aW1lb3V0ID0gdGhpcy50aW1lb3V0KXtcbiAgICB0aGlzLnJlam9pblRpbWVyLnJlc2V0KClcbiAgICB0aGlzLmpvaW5QdXNoLmNhbmNlbFRpbWVvdXQoKVxuXG4gICAgdGhpcy5zdGF0ZSA9IENIQU5ORUxfU1RBVEVTLmxlYXZpbmdcbiAgICBsZXQgb25DbG9zZSA9ICgpID0+IHtcbiAgICAgIGlmKHRoaXMuc29ja2V0Lmhhc0xvZ2dlcigpKSB0aGlzLnNvY2tldC5sb2coXCJjaGFubmVsXCIsIGBsZWF2ZSAke3RoaXMudG9waWN9YClcbiAgICAgIHRoaXMudHJpZ2dlcihDSEFOTkVMX0VWRU5UUy5jbG9zZSwgXCJsZWF2ZVwiKVxuICAgIH1cbiAgICBsZXQgbGVhdmVQdXNoID0gbmV3IFB1c2godGhpcywgQ0hBTk5FTF9FVkVOVFMubGVhdmUsIGNsb3N1cmUoe30pLCB0aW1lb3V0KVxuICAgIGxlYXZlUHVzaC5yZWNlaXZlKFwib2tcIiwgKCkgPT4gb25DbG9zZSgpKVxuICAgICAgLnJlY2VpdmUoXCJ0aW1lb3V0XCIsICgpID0+IG9uQ2xvc2UoKSlcbiAgICBsZWF2ZVB1c2guc2VuZCgpXG4gICAgaWYoIXRoaXMuY2FuUHVzaCgpKXsgbGVhdmVQdXNoLnRyaWdnZXIoXCJva1wiLCB7fSkgfVxuXG4gICAgcmV0dXJuIGxlYXZlUHVzaFxuICB9XG5cbiAgLyoqXG4gICAqIE92ZXJyaWRhYmxlIG1lc3NhZ2UgaG9va1xuICAgKlxuICAgKiBSZWNlaXZlcyBhbGwgZXZlbnRzIGZvciBzcGVjaWFsaXplZCBtZXNzYWdlIGhhbmRsaW5nXG4gICAqIGJlZm9yZSBkaXNwYXRjaGluZyB0byB0aGUgY2hhbm5lbCBjYWxsYmFja3MuXG4gICAqXG4gICAqIE11c3QgcmV0dXJuIHRoZSBwYXlsb2FkLCBtb2RpZmllZCBvciB1bm1vZGlmaWVkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gcGF5bG9hZFxuICAgKiBAcGFyYW0ge2ludGVnZXJ9IHJlZlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgKi9cbiAgb25NZXNzYWdlKF9ldmVudCwgcGF5bG9hZCwgX3JlZil7IHJldHVybiBwYXlsb2FkIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGlzTWVtYmVyKHRvcGljLCBldmVudCwgcGF5bG9hZCwgam9pblJlZil7XG4gICAgaWYodGhpcy50b3BpYyAhPT0gdG9waWMpeyByZXR1cm4gZmFsc2UgfVxuXG4gICAgaWYoam9pblJlZiAmJiBqb2luUmVmICE9PSB0aGlzLmpvaW5SZWYoKSl7XG4gICAgICBpZih0aGlzLnNvY2tldC5oYXNMb2dnZXIoKSkgdGhpcy5zb2NrZXQubG9nKFwiY2hhbm5lbFwiLCBcImRyb3BwaW5nIG91dGRhdGVkIG1lc3NhZ2VcIiwge3RvcGljLCBldmVudCwgcGF5bG9hZCwgam9pblJlZn0pXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGpvaW5SZWYoKXsgcmV0dXJuIHRoaXMuam9pblB1c2gucmVmIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHJlam9pbih0aW1lb3V0ID0gdGhpcy50aW1lb3V0KXtcbiAgICBpZih0aGlzLmlzTGVhdmluZygpKXsgcmV0dXJuIH1cbiAgICB0aGlzLnNvY2tldC5sZWF2ZU9wZW5Ub3BpYyh0aGlzLnRvcGljKVxuICAgIHRoaXMuc3RhdGUgPSBDSEFOTkVMX1NUQVRFUy5qb2luaW5nXG4gICAgdGhpcy5qb2luUHVzaC5yZXNlbmQodGltZW91dClcbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdHJpZ2dlcihldmVudCwgcGF5bG9hZCwgcmVmLCBqb2luUmVmKXtcbiAgICBsZXQgaGFuZGxlZFBheWxvYWQgPSB0aGlzLm9uTWVzc2FnZShldmVudCwgcGF5bG9hZCwgcmVmLCBqb2luUmVmKVxuICAgIGlmKHBheWxvYWQgJiYgIWhhbmRsZWRQYXlsb2FkKXsgdGhyb3cgbmV3IEVycm9yKFwiY2hhbm5lbCBvbk1lc3NhZ2UgY2FsbGJhY2tzIG11c3QgcmV0dXJuIHRoZSBwYXlsb2FkLCBtb2RpZmllZCBvciB1bm1vZGlmaWVkXCIpIH1cblxuICAgIGxldCBldmVudEJpbmRpbmdzID0gdGhpcy5iaW5kaW5ncy5maWx0ZXIoYmluZCA9PiBiaW5kLmV2ZW50ID09PSBldmVudClcblxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBldmVudEJpbmRpbmdzLmxlbmd0aDsgaSsrKXtcbiAgICAgIGxldCBiaW5kID0gZXZlbnRCaW5kaW5nc1tpXVxuICAgICAgYmluZC5jYWxsYmFjayhoYW5kbGVkUGF5bG9hZCwgcmVmLCBqb2luUmVmIHx8IHRoaXMuam9pblJlZigpKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgcmVwbHlFdmVudE5hbWUocmVmKXsgcmV0dXJuIGBjaGFuX3JlcGx5XyR7cmVmfWAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaXNDbG9zZWQoKXsgcmV0dXJuIHRoaXMuc3RhdGUgPT09IENIQU5ORUxfU1RBVEVTLmNsb3NlZCB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpc0Vycm9yZWQoKXsgcmV0dXJuIHRoaXMuc3RhdGUgPT09IENIQU5ORUxfU1RBVEVTLmVycm9yZWQgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaXNKb2luZWQoKXsgcmV0dXJuIHRoaXMuc3RhdGUgPT09IENIQU5ORUxfU1RBVEVTLmpvaW5lZCB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBpc0pvaW5pbmcoKXsgcmV0dXJuIHRoaXMuc3RhdGUgPT09IENIQU5ORUxfU1RBVEVTLmpvaW5pbmcgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgaXNMZWF2aW5nKCl7IHJldHVybiB0aGlzLnN0YXRlID09PSBDSEFOTkVMX1NUQVRFUy5sZWF2aW5nIH1cbn1cbiIsICJpbXBvcnQge1xuICBnbG9iYWwsXG4gIFhIUl9TVEFURVNcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWpheCB7XG5cbiAgc3RhdGljIHJlcXVlc3QobWV0aG9kLCBlbmRQb2ludCwgYWNjZXB0LCBib2R5LCB0aW1lb3V0LCBvbnRpbWVvdXQsIGNhbGxiYWNrKXtcbiAgICBpZihnbG9iYWwuWERvbWFpblJlcXVlc3Qpe1xuICAgICAgbGV0IHJlcSA9IG5ldyBnbG9iYWwuWERvbWFpblJlcXVlc3QoKSAvLyBJRTgsIElFOVxuICAgICAgcmV0dXJuIHRoaXMueGRvbWFpblJlcXVlc3QocmVxLCBtZXRob2QsIGVuZFBvaW50LCBib2R5LCB0aW1lb3V0LCBvbnRpbWVvdXQsIGNhbGxiYWNrKVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcmVxID0gbmV3IGdsb2JhbC5YTUxIdHRwUmVxdWVzdCgpIC8vIElFNyssIEZpcmVmb3gsIENocm9tZSwgT3BlcmEsIFNhZmFyaVxuICAgICAgcmV0dXJuIHRoaXMueGhyUmVxdWVzdChyZXEsIG1ldGhvZCwgZW5kUG9pbnQsIGFjY2VwdCwgYm9keSwgdGltZW91dCwgb250aW1lb3V0LCBjYWxsYmFjaylcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgeGRvbWFpblJlcXVlc3QocmVxLCBtZXRob2QsIGVuZFBvaW50LCBib2R5LCB0aW1lb3V0LCBvbnRpbWVvdXQsIGNhbGxiYWNrKXtcbiAgICByZXEudGltZW91dCA9IHRpbWVvdXRcbiAgICByZXEub3BlbihtZXRob2QsIGVuZFBvaW50KVxuICAgIHJlcS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICBsZXQgcmVzcG9uc2UgPSB0aGlzLnBhcnNlSlNPTihyZXEucmVzcG9uc2VUZXh0KVxuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2socmVzcG9uc2UpXG4gICAgfVxuICAgIGlmKG9udGltZW91dCl7IHJlcS5vbnRpbWVvdXQgPSBvbnRpbWVvdXQgfVxuXG4gICAgLy8gV29yayBhcm91bmQgYnVnIGluIElFOSB0aGF0IHJlcXVpcmVzIGFuIGF0dGFjaGVkIG9ucHJvZ3Jlc3MgaGFuZGxlclxuICAgIHJlcS5vbnByb2dyZXNzID0gKCkgPT4geyB9XG5cbiAgICByZXEuc2VuZChib2R5KVxuICAgIHJldHVybiByZXFcbiAgfVxuXG4gIHN0YXRpYyB4aHJSZXF1ZXN0KHJlcSwgbWV0aG9kLCBlbmRQb2ludCwgYWNjZXB0LCBib2R5LCB0aW1lb3V0LCBvbnRpbWVvdXQsIGNhbGxiYWNrKXtcbiAgICByZXEub3BlbihtZXRob2QsIGVuZFBvaW50LCB0cnVlKVxuICAgIHJlcS50aW1lb3V0ID0gdGltZW91dFxuICAgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIGFjY2VwdClcbiAgICByZXEub25lcnJvciA9ICgpID0+IGNhbGxiYWNrICYmIGNhbGxiYWNrKG51bGwpXG4gICAgcmVxLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgIGlmKHJlcS5yZWFkeVN0YXRlID09PSBYSFJfU1RBVEVTLmNvbXBsZXRlICYmIGNhbGxiYWNrKXtcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gdGhpcy5wYXJzZUpTT04ocmVxLnJlc3BvbnNlVGV4dClcbiAgICAgICAgY2FsbGJhY2socmVzcG9uc2UpXG4gICAgICB9XG4gICAgfVxuICAgIGlmKG9udGltZW91dCl7IHJlcS5vbnRpbWVvdXQgPSBvbnRpbWVvdXQgfVxuXG4gICAgcmVxLnNlbmQoYm9keSlcbiAgICByZXR1cm4gcmVxXG4gIH1cblxuICBzdGF0aWMgcGFyc2VKU09OKHJlc3Ape1xuICAgIGlmKCFyZXNwIHx8IHJlc3AgPT09IFwiXCIpeyByZXR1cm4gbnVsbCB9XG5cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmVzcClcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgIGNvbnNvbGUgJiYgY29uc29sZS5sb2coXCJmYWlsZWQgdG8gcGFyc2UgSlNPTiByZXNwb25zZVwiLCByZXNwKVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgc2VyaWFsaXplKG9iaiwgcGFyZW50S2V5KXtcbiAgICBsZXQgcXVlcnlTdHIgPSBbXVxuICAgIGZvcih2YXIga2V5IGluIG9iail7XG4gICAgICBpZighT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSl7IGNvbnRpbnVlIH1cbiAgICAgIGxldCBwYXJhbUtleSA9IHBhcmVudEtleSA/IGAke3BhcmVudEtleX1bJHtrZXl9XWAgOiBrZXlcbiAgICAgIGxldCBwYXJhbVZhbCA9IG9ialtrZXldXG4gICAgICBpZih0eXBlb2YgcGFyYW1WYWwgPT09IFwib2JqZWN0XCIpe1xuICAgICAgICBxdWVyeVN0ci5wdXNoKHRoaXMuc2VyaWFsaXplKHBhcmFtVmFsLCBwYXJhbUtleSkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBxdWVyeVN0ci5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChwYXJhbUtleSkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudChwYXJhbVZhbCkpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBxdWVyeVN0ci5qb2luKFwiJlwiKVxuICB9XG5cbiAgc3RhdGljIGFwcGVuZFBhcmFtcyh1cmwsIHBhcmFtcyl7XG4gICAgaWYoT2JqZWN0LmtleXMocGFyYW1zKS5sZW5ndGggPT09IDApeyByZXR1cm4gdXJsIH1cblxuICAgIGxldCBwcmVmaXggPSB1cmwubWF0Y2goL1xcPy8pID8gXCImXCIgOiBcIj9cIlxuICAgIHJldHVybiBgJHt1cmx9JHtwcmVmaXh9JHt0aGlzLnNlcmlhbGl6ZShwYXJhbXMpfWBcbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIFNPQ0tFVF9TVEFURVMsXG4gIFRSQU5TUE9SVFNcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IEFqYXggZnJvbSBcIi4vYWpheFwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvbmdQb2xsIHtcblxuICBjb25zdHJ1Y3RvcihlbmRQb2ludCl7XG4gICAgdGhpcy5lbmRQb2ludCA9IG51bGxcbiAgICB0aGlzLnRva2VuID0gbnVsbFxuICAgIHRoaXMuc2tpcEhlYXJ0YmVhdCA9IHRydWVcbiAgICB0aGlzLnJlcXMgPSBuZXcgU2V0KClcbiAgICB0aGlzLmF3YWl0aW5nQmF0Y2hBY2sgPSBmYWxzZVxuICAgIHRoaXMuY3VycmVudEJhdGNoID0gbnVsbFxuICAgIHRoaXMuY3VycmVudEJhdGNoVGltZXIgPSBudWxsXG4gICAgdGhpcy5iYXRjaEJ1ZmZlciA9IFtdXG4gICAgdGhpcy5vbm9wZW4gPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgdGhpcy5vbmVycm9yID0gZnVuY3Rpb24gKCl7IH0gLy8gbm9vcFxuICAgIHRoaXMub25tZXNzYWdlID0gZnVuY3Rpb24gKCl7IH0gLy8gbm9vcFxuICAgIHRoaXMub25jbG9zZSA9IGZ1bmN0aW9uICgpeyB9IC8vIG5vb3BcbiAgICB0aGlzLnBvbGxFbmRwb2ludCA9IHRoaXMubm9ybWFsaXplRW5kcG9pbnQoZW5kUG9pbnQpXG4gICAgdGhpcy5yZWFkeVN0YXRlID0gU09DS0VUX1NUQVRFUy5jb25uZWN0aW5nXG4gICAgdGhpcy5wb2xsKClcbiAgfVxuXG4gIG5vcm1hbGl6ZUVuZHBvaW50KGVuZFBvaW50KXtcbiAgICByZXR1cm4gKGVuZFBvaW50XG4gICAgICAucmVwbGFjZShcIndzOi8vXCIsIFwiaHR0cDovL1wiKVxuICAgICAgLnJlcGxhY2UoXCJ3c3M6Ly9cIiwgXCJodHRwczovL1wiKVxuICAgICAgLnJlcGxhY2UobmV3IFJlZ0V4cChcIiguKilcXC9cIiArIFRSQU5TUE9SVFMud2Vic29ja2V0KSwgXCIkMS9cIiArIFRSQU5TUE9SVFMubG9uZ3BvbGwpKVxuICB9XG5cbiAgZW5kcG9pbnRVUkwoKXtcbiAgICByZXR1cm4gQWpheC5hcHBlbmRQYXJhbXModGhpcy5wb2xsRW5kcG9pbnQsIHt0b2tlbjogdGhpcy50b2tlbn0pXG4gIH1cblxuICBjbG9zZUFuZFJldHJ5KGNvZGUsIHJlYXNvbiwgd2FzQ2xlYW4pe1xuICAgIHRoaXMuY2xvc2UoY29kZSwgcmVhc29uLCB3YXNDbGVhbilcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBTT0NLRVRfU1RBVEVTLmNvbm5lY3RpbmdcbiAgfVxuXG4gIG9udGltZW91dCgpe1xuICAgIHRoaXMub25lcnJvcihcInRpbWVvdXRcIilcbiAgICB0aGlzLmNsb3NlQW5kUmV0cnkoMTAwNSwgXCJ0aW1lb3V0XCIsIGZhbHNlKVxuICB9XG5cbiAgaXNBY3RpdmUoKXsgcmV0dXJuIHRoaXMucmVhZHlTdGF0ZSA9PT0gU09DS0VUX1NUQVRFUy5vcGVuIHx8IHRoaXMucmVhZHlTdGF0ZSA9PT0gU09DS0VUX1NUQVRFUy5jb25uZWN0aW5nIH1cblxuICBwb2xsKCl7XG4gICAgdGhpcy5hamF4KFwiR0VUXCIsIFwiYXBwbGljYXRpb24vanNvblwiLCBudWxsLCAoKSA9PiB0aGlzLm9udGltZW91dCgpLCByZXNwID0+IHtcbiAgICAgIGlmKHJlc3Ape1xuICAgICAgICB2YXIge3N0YXR1cywgdG9rZW4sIG1lc3NhZ2VzfSA9IHJlc3BcbiAgICAgICAgdGhpcy50b2tlbiA9IHRva2VuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0dXMgPSAwXG4gICAgICB9XG5cbiAgICAgIHN3aXRjaChzdGF0dXMpe1xuICAgICAgICBjYXNlIDIwMDpcbiAgICAgICAgICBtZXNzYWdlcy5mb3JFYWNoKG1zZyA9PiB7XG4gICAgICAgICAgICAvLyBUYXNrcyBhcmUgd2hhdCB0aGluZ3MgbGlrZSBldmVudCBoYW5kbGVycywgc2V0VGltZW91dCBjYWxsYmFja3MsXG4gICAgICAgICAgICAvLyBwcm9taXNlIHJlc29sdmVzIGFuZCBtb3JlIGFyZSBydW4gd2l0aGluLlxuICAgICAgICAgICAgLy8gSW4gbW9kZXJuIGJyb3dzZXJzLCB0aGVyZSBhcmUgdHdvIGRpZmZlcmVudCBraW5kcyBvZiB0YXNrcyxcbiAgICAgICAgICAgIC8vIG1pY3JvdGFza3MgYW5kIG1hY3JvdGFza3MuXG4gICAgICAgICAgICAvLyBNaWNyb3Rhc2tzIGFyZSBtYWlubHkgdXNlZCBmb3IgUHJvbWlzZXMsIHdoaWxlIG1hY3JvdGFza3MgYXJlXG4gICAgICAgICAgICAvLyB1c2VkIGZvciBldmVyeXRoaW5nIGVsc2UuXG4gICAgICAgICAgICAvLyBNaWNyb3Rhc2tzIGFsd2F5cyBoYXZlIHByaW9yaXR5IG92ZXIgbWFjcm90YXNrcy4gSWYgdGhlIEpTIGVuZ2luZVxuICAgICAgICAgICAgLy8gaXMgbG9va2luZyBmb3IgYSB0YXNrIHRvIHJ1biwgaXQgd2lsbCBhbHdheXMgdHJ5IHRvIGVtcHR5IHRoZVxuICAgICAgICAgICAgLy8gbWljcm90YXNrIHF1ZXVlIGJlZm9yZSBhdHRlbXB0aW5nIHRvIHJ1biBhbnl0aGluZyBmcm9tIHRoZVxuICAgICAgICAgICAgLy8gbWFjcm90YXNrIHF1ZXVlLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIEZvciB0aGUgV2ViU29ja2V0IHRyYW5zcG9ydCwgbWVzc2FnZXMgYWx3YXlzIGFycml2ZSBpbiB0aGVpciBvd25cbiAgICAgICAgICAgIC8vIGV2ZW50LiBUaGlzIG1lYW5zIHRoYXQgaWYgYW55IHByb21pc2VzIGFyZSByZXNvbHZlZCBmcm9tIHdpdGhpbixcbiAgICAgICAgICAgIC8vIHRoZWlyIGNhbGxiYWNrcyB3aWxsIGFsd2F5cyBmaW5pc2ggZXhlY3V0aW9uIGJ5IHRoZSB0aW1lIHRoZVxuICAgICAgICAgICAgLy8gbmV4dCBtZXNzYWdlIGV2ZW50IGhhbmRsZXIgaXMgcnVuLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIEluIG9yZGVyIHRvIGVtdWxhdGUgdGhpcyBiZWhhdmlvdXIsIHdlIG5lZWQgdG8gbWFrZSBzdXJlIGVhY2hcbiAgICAgICAgICAgIC8vIG9ubWVzc2FnZSBoYW5kbGVyIGlzIHJ1biB3aXRoaW4gaXRzIG93biBtYWNyb3Rhc2suXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMub25tZXNzYWdlKHtkYXRhOiBtc2d9KSwgMClcbiAgICAgICAgICB9KVxuICAgICAgICAgIHRoaXMucG9sbCgpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyMDQ6XG4gICAgICAgICAgdGhpcy5wb2xsKClcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQxMDpcbiAgICAgICAgICB0aGlzLnJlYWR5U3RhdGUgPSBTT0NLRVRfU1RBVEVTLm9wZW5cbiAgICAgICAgICB0aGlzLm9ub3Blbih7fSlcbiAgICAgICAgICB0aGlzLnBvbGwoKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDAzOlxuICAgICAgICAgIHRoaXMub25lcnJvcig0MDMpXG4gICAgICAgICAgdGhpcy5jbG9zZSgxMDA4LCBcImZvcmJpZGRlblwiLCBmYWxzZSlcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgIGNhc2UgNTAwOlxuICAgICAgICAgIHRoaXMub25lcnJvcig1MDApXG4gICAgICAgICAgdGhpcy5jbG9zZUFuZFJldHJ5KDEwMTEsIFwiaW50ZXJuYWwgc2VydmVyIGVycm9yXCIsIDUwMClcbiAgICAgICAgICBicmVha1xuICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoYHVuaGFuZGxlZCBwb2xsIHN0YXR1cyAke3N0YXR1c31gKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvLyB3ZSBjb2xsZWN0IGFsbCBwdXNoZXMgd2l0aGluIHRoZSBjdXJyZW50IGV2ZW50IGxvb3AgYnlcbiAgLy8gc2V0VGltZW91dCAwLCB3aGljaCBvcHRpbWl6ZXMgYmFjay10by1iYWNrIHByb2NlZHVyYWxcbiAgLy8gcHVzaGVzIGFnYWluc3QgYW4gZW1wdHkgYnVmZmVyXG4gIHNlbmQoYm9keSl7XG4gICAgaWYodGhpcy5jdXJyZW50QmF0Y2gpe1xuICAgICAgdGhpcy5jdXJyZW50QmF0Y2gucHVzaChib2R5KVxuICAgIH0gZWxzZSBpZih0aGlzLmF3YWl0aW5nQmF0Y2hBY2spe1xuICAgICAgdGhpcy5iYXRjaEJ1ZmZlci5wdXNoKGJvZHkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3VycmVudEJhdGNoID0gW2JvZHldXG4gICAgICB0aGlzLmN1cnJlbnRCYXRjaFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuYmF0Y2hTZW5kKHRoaXMuY3VycmVudEJhdGNoKVxuICAgICAgICB0aGlzLmN1cnJlbnRCYXRjaCA9IG51bGxcbiAgICAgIH0sIDApXG4gICAgfVxuICB9XG5cbiAgYmF0Y2hTZW5kKG1lc3NhZ2VzKXtcbiAgICB0aGlzLmF3YWl0aW5nQmF0Y2hBY2sgPSB0cnVlXG4gICAgdGhpcy5hamF4KFwiUE9TVFwiLCBcImFwcGxpY2F0aW9uL3gtbmRqc29uXCIsIG1lc3NhZ2VzLmpvaW4oXCJcXG5cIiksICgpID0+IHRoaXMub25lcnJvcihcInRpbWVvdXRcIiksIHJlc3AgPT4ge1xuICAgICAgdGhpcy5hd2FpdGluZ0JhdGNoQWNrID0gZmFsc2VcbiAgICAgIGlmKCFyZXNwIHx8IHJlc3Auc3RhdHVzICE9PSAyMDApe1xuICAgICAgICB0aGlzLm9uZXJyb3IocmVzcCAmJiByZXNwLnN0YXR1cylcbiAgICAgICAgdGhpcy5jbG9zZUFuZFJldHJ5KDEwMTEsIFwiaW50ZXJuYWwgc2VydmVyIGVycm9yXCIsIGZhbHNlKVxuICAgICAgfSBlbHNlIGlmKHRoaXMuYmF0Y2hCdWZmZXIubGVuZ3RoID4gMCl7XG4gICAgICAgIHRoaXMuYmF0Y2hTZW5kKHRoaXMuYmF0Y2hCdWZmZXIpXG4gICAgICAgIHRoaXMuYmF0Y2hCdWZmZXIgPSBbXVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBjbG9zZShjb2RlLCByZWFzb24sIHdhc0NsZWFuKXtcbiAgICBmb3IobGV0IHJlcSBvZiB0aGlzLnJlcXMpeyByZXEuYWJvcnQoKSB9XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gU09DS0VUX1NUQVRFUy5jbG9zZWRcbiAgICBsZXQgb3B0cyA9IE9iamVjdC5hc3NpZ24oe2NvZGU6IDEwMDAsIHJlYXNvbjogdW5kZWZpbmVkLCB3YXNDbGVhbjogdHJ1ZX0sIHtjb2RlLCByZWFzb24sIHdhc0NsZWFufSlcbiAgICB0aGlzLmJhdGNoQnVmZmVyID0gW11cbiAgICBjbGVhclRpbWVvdXQodGhpcy5jdXJyZW50QmF0Y2hUaW1lcilcbiAgICB0aGlzLmN1cnJlbnRCYXRjaFRpbWVyID0gbnVsbFxuICAgIGlmKHR5cGVvZihDbG9zZUV2ZW50KSAhPT0gXCJ1bmRlZmluZWRcIil7XG4gICAgICB0aGlzLm9uY2xvc2UobmV3IENsb3NlRXZlbnQoXCJjbG9zZVwiLCBvcHRzKSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vbmNsb3NlKG9wdHMpXG4gICAgfVxuICB9XG5cbiAgYWpheChtZXRob2QsIGNvbnRlbnRUeXBlLCBib2R5LCBvbkNhbGxlclRpbWVvdXQsIGNhbGxiYWNrKXtcbiAgICBsZXQgcmVxXG4gICAgbGV0IG9udGltZW91dCA9ICgpID0+IHtcbiAgICAgIHRoaXMucmVxcy5kZWxldGUocmVxKVxuICAgICAgb25DYWxsZXJUaW1lb3V0KClcbiAgICB9XG4gICAgcmVxID0gQWpheC5yZXF1ZXN0KG1ldGhvZCwgdGhpcy5lbmRwb2ludFVSTCgpLCBjb250ZW50VHlwZSwgYm9keSwgdGhpcy50aW1lb3V0LCBvbnRpbWVvdXQsIHJlc3AgPT4ge1xuICAgICAgdGhpcy5yZXFzLmRlbGV0ZShyZXEpXG4gICAgICBpZih0aGlzLmlzQWN0aXZlKCkpeyBjYWxsYmFjayhyZXNwKSB9XG4gICAgfSlcbiAgICB0aGlzLnJlcXMuYWRkKHJlcSlcbiAgfVxufVxuIiwgIi8qKlxuICogSW5pdGlhbGl6ZXMgdGhlIFByZXNlbmNlXG4gKiBAcGFyYW0ge0NoYW5uZWx9IGNoYW5uZWwgLSBUaGUgQ2hhbm5lbFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBUaGUgb3B0aW9ucyxcbiAqICAgICAgICBmb3IgZXhhbXBsZSBge2V2ZW50czoge3N0YXRlOiBcInN0YXRlXCIsIGRpZmY6IFwiZGlmZlwifX1gXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByZXNlbmNlIHtcblxuICBjb25zdHJ1Y3RvcihjaGFubmVsLCBvcHRzID0ge30pe1xuICAgIGxldCBldmVudHMgPSBvcHRzLmV2ZW50cyB8fCB7c3RhdGU6IFwicHJlc2VuY2Vfc3RhdGVcIiwgZGlmZjogXCJwcmVzZW5jZV9kaWZmXCJ9XG4gICAgdGhpcy5zdGF0ZSA9IHt9XG4gICAgdGhpcy5wZW5kaW5nRGlmZnMgPSBbXVxuICAgIHRoaXMuY2hhbm5lbCA9IGNoYW5uZWxcbiAgICB0aGlzLmpvaW5SZWYgPSBudWxsXG4gICAgdGhpcy5jYWxsZXIgPSB7XG4gICAgICBvbkpvaW46IGZ1bmN0aW9uICgpeyB9LFxuICAgICAgb25MZWF2ZTogZnVuY3Rpb24gKCl7IH0sXG4gICAgICBvblN5bmM6IGZ1bmN0aW9uICgpeyB9XG4gICAgfVxuXG4gICAgdGhpcy5jaGFubmVsLm9uKGV2ZW50cy5zdGF0ZSwgbmV3U3RhdGUgPT4ge1xuICAgICAgbGV0IHtvbkpvaW4sIG9uTGVhdmUsIG9uU3luY30gPSB0aGlzLmNhbGxlclxuXG4gICAgICB0aGlzLmpvaW5SZWYgPSB0aGlzLmNoYW5uZWwuam9pblJlZigpXG4gICAgICB0aGlzLnN0YXRlID0gUHJlc2VuY2Uuc3luY1N0YXRlKHRoaXMuc3RhdGUsIG5ld1N0YXRlLCBvbkpvaW4sIG9uTGVhdmUpXG5cbiAgICAgIHRoaXMucGVuZGluZ0RpZmZzLmZvckVhY2goZGlmZiA9PiB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBQcmVzZW5jZS5zeW5jRGlmZih0aGlzLnN0YXRlLCBkaWZmLCBvbkpvaW4sIG9uTGVhdmUpXG4gICAgICB9KVxuICAgICAgdGhpcy5wZW5kaW5nRGlmZnMgPSBbXVxuICAgICAgb25TeW5jKClcbiAgICB9KVxuXG4gICAgdGhpcy5jaGFubmVsLm9uKGV2ZW50cy5kaWZmLCBkaWZmID0+IHtcbiAgICAgIGxldCB7b25Kb2luLCBvbkxlYXZlLCBvblN5bmN9ID0gdGhpcy5jYWxsZXJcblxuICAgICAgaWYodGhpcy5pblBlbmRpbmdTeW5jU3RhdGUoKSl7XG4gICAgICAgIHRoaXMucGVuZGluZ0RpZmZzLnB1c2goZGlmZilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBQcmVzZW5jZS5zeW5jRGlmZih0aGlzLnN0YXRlLCBkaWZmLCBvbkpvaW4sIG9uTGVhdmUpXG4gICAgICAgIG9uU3luYygpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIG9uSm9pbihjYWxsYmFjayl7IHRoaXMuY2FsbGVyLm9uSm9pbiA9IGNhbGxiYWNrIH1cblxuICBvbkxlYXZlKGNhbGxiYWNrKXsgdGhpcy5jYWxsZXIub25MZWF2ZSA9IGNhbGxiYWNrIH1cblxuICBvblN5bmMoY2FsbGJhY2speyB0aGlzLmNhbGxlci5vblN5bmMgPSBjYWxsYmFjayB9XG5cbiAgbGlzdChieSl7IHJldHVybiBQcmVzZW5jZS5saXN0KHRoaXMuc3RhdGUsIGJ5KSB9XG5cbiAgaW5QZW5kaW5nU3luY1N0YXRlKCl7XG4gICAgcmV0dXJuICF0aGlzLmpvaW5SZWYgfHwgKHRoaXMuam9pblJlZiAhPT0gdGhpcy5jaGFubmVsLmpvaW5SZWYoKSlcbiAgfVxuXG4gIC8vIGxvd2VyLWxldmVsIHB1YmxpYyBzdGF0aWMgQVBJXG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gc3luYyB0aGUgbGlzdCBvZiBwcmVzZW5jZXMgb24gdGhlIHNlcnZlclxuICAgKiB3aXRoIHRoZSBjbGllbnQncyBzdGF0ZS4gQW4gb3B0aW9uYWwgYG9uSm9pbmAgYW5kIGBvbkxlYXZlYCBjYWxsYmFjayBjYW5cbiAgICogYmUgcHJvdmlkZWQgdG8gcmVhY3QgdG8gY2hhbmdlcyBpbiB0aGUgY2xpZW50J3MgbG9jYWwgcHJlc2VuY2VzIGFjcm9zc1xuICAgKiBkaXNjb25uZWN0cyBhbmQgcmVjb25uZWN0cyB3aXRoIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcmVzZW5jZX1cbiAgICovXG4gIHN0YXRpYyBzeW5jU3RhdGUoY3VycmVudFN0YXRlLCBuZXdTdGF0ZSwgb25Kb2luLCBvbkxlYXZlKXtcbiAgICBsZXQgc3RhdGUgPSB0aGlzLmNsb25lKGN1cnJlbnRTdGF0ZSlcbiAgICBsZXQgam9pbnMgPSB7fVxuICAgIGxldCBsZWF2ZXMgPSB7fVxuXG4gICAgdGhpcy5tYXAoc3RhdGUsIChrZXksIHByZXNlbmNlKSA9PiB7XG4gICAgICBpZighbmV3U3RhdGVba2V5XSl7XG4gICAgICAgIGxlYXZlc1trZXldID0gcHJlc2VuY2VcbiAgICAgIH1cbiAgICB9KVxuICAgIHRoaXMubWFwKG5ld1N0YXRlLCAoa2V5LCBuZXdQcmVzZW5jZSkgPT4ge1xuICAgICAgbGV0IGN1cnJlbnRQcmVzZW5jZSA9IHN0YXRlW2tleV1cbiAgICAgIGlmKGN1cnJlbnRQcmVzZW5jZSl7XG4gICAgICAgIGxldCBuZXdSZWZzID0gbmV3UHJlc2VuY2UubWV0YXMubWFwKG0gPT4gbS5waHhfcmVmKVxuICAgICAgICBsZXQgY3VyUmVmcyA9IGN1cnJlbnRQcmVzZW5jZS5tZXRhcy5tYXAobSA9PiBtLnBoeF9yZWYpXG4gICAgICAgIGxldCBqb2luZWRNZXRhcyA9IG5ld1ByZXNlbmNlLm1ldGFzLmZpbHRlcihtID0+IGN1clJlZnMuaW5kZXhPZihtLnBoeF9yZWYpIDwgMClcbiAgICAgICAgbGV0IGxlZnRNZXRhcyA9IGN1cnJlbnRQcmVzZW5jZS5tZXRhcy5maWx0ZXIobSA9PiBuZXdSZWZzLmluZGV4T2YobS5waHhfcmVmKSA8IDApXG4gICAgICAgIGlmKGpvaW5lZE1ldGFzLmxlbmd0aCA+IDApe1xuICAgICAgICAgIGpvaW5zW2tleV0gPSBuZXdQcmVzZW5jZVxuICAgICAgICAgIGpvaW5zW2tleV0ubWV0YXMgPSBqb2luZWRNZXRhc1xuICAgICAgICB9XG4gICAgICAgIGlmKGxlZnRNZXRhcy5sZW5ndGggPiAwKXtcbiAgICAgICAgICBsZWF2ZXNba2V5XSA9IHRoaXMuY2xvbmUoY3VycmVudFByZXNlbmNlKVxuICAgICAgICAgIGxlYXZlc1trZXldLm1ldGFzID0gbGVmdE1ldGFzXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGpvaW5zW2tleV0gPSBuZXdQcmVzZW5jZVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIHRoaXMuc3luY0RpZmYoc3RhdGUsIHtqb2luczogam9pbnMsIGxlYXZlczogbGVhdmVzfSwgb25Kb2luLCBvbkxlYXZlKVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIFVzZWQgdG8gc3luYyBhIGRpZmYgb2YgcHJlc2VuY2Ugam9pbiBhbmQgbGVhdmVcbiAgICogZXZlbnRzIGZyb20gdGhlIHNlcnZlciwgYXMgdGhleSBoYXBwZW4uIExpa2UgYHN5bmNTdGF0ZWAsIGBzeW5jRGlmZmBcbiAgICogYWNjZXB0cyBvcHRpb25hbCBgb25Kb2luYCBhbmQgYG9uTGVhdmVgIGNhbGxiYWNrcyB0byByZWFjdCB0byBhIHVzZXJcbiAgICogam9pbmluZyBvciBsZWF2aW5nIGZyb20gYSBkZXZpY2UuXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcmVzZW5jZX1cbiAgICovXG4gIHN0YXRpYyBzeW5jRGlmZihzdGF0ZSwgZGlmZiwgb25Kb2luLCBvbkxlYXZlKXtcbiAgICBsZXQge2pvaW5zLCBsZWF2ZXN9ID0gdGhpcy5jbG9uZShkaWZmKVxuICAgIGlmKCFvbkpvaW4peyBvbkpvaW4gPSBmdW5jdGlvbiAoKXsgfSB9XG4gICAgaWYoIW9uTGVhdmUpeyBvbkxlYXZlID0gZnVuY3Rpb24gKCl7IH0gfVxuXG4gICAgdGhpcy5tYXAoam9pbnMsIChrZXksIG5ld1ByZXNlbmNlKSA9PiB7XG4gICAgICBsZXQgY3VycmVudFByZXNlbmNlID0gc3RhdGVba2V5XVxuICAgICAgc3RhdGVba2V5XSA9IHRoaXMuY2xvbmUobmV3UHJlc2VuY2UpXG4gICAgICBpZihjdXJyZW50UHJlc2VuY2Upe1xuICAgICAgICBsZXQgam9pbmVkUmVmcyA9IHN0YXRlW2tleV0ubWV0YXMubWFwKG0gPT4gbS5waHhfcmVmKVxuICAgICAgICBsZXQgY3VyTWV0YXMgPSBjdXJyZW50UHJlc2VuY2UubWV0YXMuZmlsdGVyKG0gPT4gam9pbmVkUmVmcy5pbmRleE9mKG0ucGh4X3JlZikgPCAwKVxuICAgICAgICBzdGF0ZVtrZXldLm1ldGFzLnVuc2hpZnQoLi4uY3VyTWV0YXMpXG4gICAgICB9XG4gICAgICBvbkpvaW4oa2V5LCBjdXJyZW50UHJlc2VuY2UsIG5ld1ByZXNlbmNlKVxuICAgIH0pXG4gICAgdGhpcy5tYXAobGVhdmVzLCAoa2V5LCBsZWZ0UHJlc2VuY2UpID0+IHtcbiAgICAgIGxldCBjdXJyZW50UHJlc2VuY2UgPSBzdGF0ZVtrZXldXG4gICAgICBpZighY3VycmVudFByZXNlbmNlKXsgcmV0dXJuIH1cbiAgICAgIGxldCByZWZzVG9SZW1vdmUgPSBsZWZ0UHJlc2VuY2UubWV0YXMubWFwKG0gPT4gbS5waHhfcmVmKVxuICAgICAgY3VycmVudFByZXNlbmNlLm1ldGFzID0gY3VycmVudFByZXNlbmNlLm1ldGFzLmZpbHRlcihwID0+IHtcbiAgICAgICAgcmV0dXJuIHJlZnNUb1JlbW92ZS5pbmRleE9mKHAucGh4X3JlZikgPCAwXG4gICAgICB9KVxuICAgICAgb25MZWF2ZShrZXksIGN1cnJlbnRQcmVzZW5jZSwgbGVmdFByZXNlbmNlKVxuICAgICAgaWYoY3VycmVudFByZXNlbmNlLm1ldGFzLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgIGRlbGV0ZSBzdGF0ZVtrZXldXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gc3RhdGVcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcmVzZW5jZXMsIHdpdGggc2VsZWN0ZWQgbWV0YWRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwcmVzZW5jZXNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2hvb3NlclxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJlc2VuY2V9XG4gICAqL1xuICBzdGF0aWMgbGlzdChwcmVzZW5jZXMsIGNob29zZXIpe1xuICAgIGlmKCFjaG9vc2VyKXsgY2hvb3NlciA9IGZ1bmN0aW9uIChrZXksIHByZXMpeyByZXR1cm4gcHJlcyB9IH1cblxuICAgIHJldHVybiB0aGlzLm1hcChwcmVzZW5jZXMsIChrZXksIHByZXNlbmNlKSA9PiB7XG4gICAgICByZXR1cm4gY2hvb3NlcihrZXksIHByZXNlbmNlKVxuICAgIH0pXG4gIH1cblxuICAvLyBwcml2YXRlXG5cbiAgc3RhdGljIG1hcChvYmosIGZ1bmMpe1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLm1hcChrZXkgPT4gZnVuYyhrZXksIG9ialtrZXldKSlcbiAgfVxuXG4gIHN0YXRpYyBjbG9uZShvYmopeyByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKSB9XG59XG4iLCAiLyogVGhlIGRlZmF1bHQgc2VyaWFsaXplciBmb3IgZW5jb2RpbmcgYW5kIGRlY29kaW5nIG1lc3NhZ2VzICovXG5pbXBvcnQge1xuICBDSEFOTkVMX0VWRU5UU1xufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIEhFQURFUl9MRU5HVEg6IDEsXG4gIE1FVEFfTEVOR1RIOiA0LFxuICBLSU5EUzoge3B1c2g6IDAsIHJlcGx5OiAxLCBicm9hZGNhc3Q6IDJ9LFxuXG4gIGVuY29kZShtc2csIGNhbGxiYWNrKXtcbiAgICBpZihtc2cucGF5bG9hZC5jb25zdHJ1Y3RvciA9PT0gQXJyYXlCdWZmZXIpe1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKHRoaXMuYmluYXJ5RW5jb2RlKG1zZykpXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwYXlsb2FkID0gW21zZy5qb2luX3JlZiwgbXNnLnJlZiwgbXNnLnRvcGljLCBtc2cuZXZlbnQsIG1zZy5wYXlsb2FkXVxuICAgICAgcmV0dXJuIGNhbGxiYWNrKEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKVxuICAgIH1cbiAgfSxcblxuICBkZWNvZGUocmF3UGF5bG9hZCwgY2FsbGJhY2spe1xuICAgIGlmKHJhd1BheWxvYWQuY29uc3RydWN0b3IgPT09IEFycmF5QnVmZmVyKXtcbiAgICAgIHJldHVybiBjYWxsYmFjayh0aGlzLmJpbmFyeURlY29kZShyYXdQYXlsb2FkKSlcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IFtqb2luX3JlZiwgcmVmLCB0b3BpYywgZXZlbnQsIHBheWxvYWRdID0gSlNPTi5wYXJzZShyYXdQYXlsb2FkKVxuICAgICAgcmV0dXJuIGNhbGxiYWNrKHtqb2luX3JlZiwgcmVmLCB0b3BpYywgZXZlbnQsIHBheWxvYWR9KVxuICAgIH1cbiAgfSxcblxuICAvLyBwcml2YXRlXG5cbiAgYmluYXJ5RW5jb2RlKG1lc3NhZ2Upe1xuICAgIGxldCB7am9pbl9yZWYsIHJlZiwgZXZlbnQsIHRvcGljLCBwYXlsb2FkfSA9IG1lc3NhZ2VcbiAgICBsZXQgbWV0YUxlbmd0aCA9IHRoaXMuTUVUQV9MRU5HVEggKyBqb2luX3JlZi5sZW5ndGggKyByZWYubGVuZ3RoICsgdG9waWMubGVuZ3RoICsgZXZlbnQubGVuZ3RoXG4gICAgbGV0IGhlYWRlciA9IG5ldyBBcnJheUJ1ZmZlcih0aGlzLkhFQURFUl9MRU5HVEggKyBtZXRhTGVuZ3RoKVxuICAgIGxldCB2aWV3ID0gbmV3IERhdGFWaWV3KGhlYWRlcilcbiAgICBsZXQgb2Zmc2V0ID0gMFxuXG4gICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgdGhpcy5LSU5EUy5wdXNoKSAvLyBraW5kXG4gICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgam9pbl9yZWYubGVuZ3RoKVxuICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssIHJlZi5sZW5ndGgpXG4gICAgdmlldy5zZXRVaW50OChvZmZzZXQrKywgdG9waWMubGVuZ3RoKVxuICAgIHZpZXcuc2V0VWludDgob2Zmc2V0KyssIGV2ZW50Lmxlbmd0aClcbiAgICBBcnJheS5mcm9tKGpvaW5fcmVmLCBjaGFyID0+IHZpZXcuc2V0VWludDgob2Zmc2V0KyssIGNoYXIuY2hhckNvZGVBdCgwKSkpXG4gICAgQXJyYXkuZnJvbShyZWYsIGNoYXIgPT4gdmlldy5zZXRVaW50OChvZmZzZXQrKywgY2hhci5jaGFyQ29kZUF0KDApKSlcbiAgICBBcnJheS5mcm9tKHRvcGljLCBjaGFyID0+IHZpZXcuc2V0VWludDgob2Zmc2V0KyssIGNoYXIuY2hhckNvZGVBdCgwKSkpXG4gICAgQXJyYXkuZnJvbShldmVudCwgY2hhciA9PiB2aWV3LnNldFVpbnQ4KG9mZnNldCsrLCBjaGFyLmNoYXJDb2RlQXQoMCkpKVxuXG4gICAgdmFyIGNvbWJpbmVkID0gbmV3IFVpbnQ4QXJyYXkoaGVhZGVyLmJ5dGVMZW5ndGggKyBwYXlsb2FkLmJ5dGVMZW5ndGgpXG4gICAgY29tYmluZWQuc2V0KG5ldyBVaW50OEFycmF5KGhlYWRlciksIDApXG4gICAgY29tYmluZWQuc2V0KG5ldyBVaW50OEFycmF5KHBheWxvYWQpLCBoZWFkZXIuYnl0ZUxlbmd0aClcblxuICAgIHJldHVybiBjb21iaW5lZC5idWZmZXJcbiAgfSxcblxuICBiaW5hcnlEZWNvZGUoYnVmZmVyKXtcbiAgICBsZXQgdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpXG4gICAgbGV0IGtpbmQgPSB2aWV3LmdldFVpbnQ4KDApXG4gICAgbGV0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKVxuICAgIHN3aXRjaChraW5kKXtcbiAgICAgIGNhc2UgdGhpcy5LSU5EUy5wdXNoOiByZXR1cm4gdGhpcy5kZWNvZGVQdXNoKGJ1ZmZlciwgdmlldywgZGVjb2RlcilcbiAgICAgIGNhc2UgdGhpcy5LSU5EUy5yZXBseTogcmV0dXJuIHRoaXMuZGVjb2RlUmVwbHkoYnVmZmVyLCB2aWV3LCBkZWNvZGVyKVxuICAgICAgY2FzZSB0aGlzLktJTkRTLmJyb2FkY2FzdDogcmV0dXJuIHRoaXMuZGVjb2RlQnJvYWRjYXN0KGJ1ZmZlciwgdmlldywgZGVjb2RlcilcbiAgICB9XG4gIH0sXG5cbiAgZGVjb2RlUHVzaChidWZmZXIsIHZpZXcsIGRlY29kZXIpe1xuICAgIGxldCBqb2luUmVmU2l6ZSA9IHZpZXcuZ2V0VWludDgoMSlcbiAgICBsZXQgdG9waWNTaXplID0gdmlldy5nZXRVaW50OCgyKVxuICAgIGxldCBldmVudFNpemUgPSB2aWV3LmdldFVpbnQ4KDMpXG4gICAgbGV0IG9mZnNldCA9IHRoaXMuSEVBREVSX0xFTkdUSCArIHRoaXMuTUVUQV9MRU5HVEggLSAxIC8vIHB1c2hlcyBoYXZlIG5vIHJlZlxuICAgIGxldCBqb2luUmVmID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgam9pblJlZlNpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIGpvaW5SZWZTaXplXG4gICAgbGV0IHRvcGljID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgdG9waWNTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyB0b3BpY1NpemVcbiAgICBsZXQgZXZlbnQgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBldmVudFNpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIGV2ZW50U2l6ZVxuICAgIGxldCBkYXRhID0gYnVmZmVyLnNsaWNlKG9mZnNldCwgYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgcmV0dXJuIHtqb2luX3JlZjogam9pblJlZiwgcmVmOiBudWxsLCB0b3BpYzogdG9waWMsIGV2ZW50OiBldmVudCwgcGF5bG9hZDogZGF0YX1cbiAgfSxcblxuICBkZWNvZGVSZXBseShidWZmZXIsIHZpZXcsIGRlY29kZXIpe1xuICAgIGxldCBqb2luUmVmU2l6ZSA9IHZpZXcuZ2V0VWludDgoMSlcbiAgICBsZXQgcmVmU2l6ZSA9IHZpZXcuZ2V0VWludDgoMilcbiAgICBsZXQgdG9waWNTaXplID0gdmlldy5nZXRVaW50OCgzKVxuICAgIGxldCBldmVudFNpemUgPSB2aWV3LmdldFVpbnQ4KDQpXG4gICAgbGV0IG9mZnNldCA9IHRoaXMuSEVBREVSX0xFTkdUSCArIHRoaXMuTUVUQV9MRU5HVEhcbiAgICBsZXQgam9pblJlZiA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIGpvaW5SZWZTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyBqb2luUmVmU2l6ZVxuICAgIGxldCByZWYgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyByZWZTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyByZWZTaXplXG4gICAgbGV0IHRvcGljID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgdG9waWNTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyB0b3BpY1NpemVcbiAgICBsZXQgZXZlbnQgPSBkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBldmVudFNpemUpKVxuICAgIG9mZnNldCA9IG9mZnNldCArIGV2ZW50U2l6ZVxuICAgIGxldCBkYXRhID0gYnVmZmVyLnNsaWNlKG9mZnNldCwgYnVmZmVyLmJ5dGVMZW5ndGgpXG4gICAgbGV0IHBheWxvYWQgPSB7c3RhdHVzOiBldmVudCwgcmVzcG9uc2U6IGRhdGF9XG4gICAgcmV0dXJuIHtqb2luX3JlZjogam9pblJlZiwgcmVmOiByZWYsIHRvcGljOiB0b3BpYywgZXZlbnQ6IENIQU5ORUxfRVZFTlRTLnJlcGx5LCBwYXlsb2FkOiBwYXlsb2FkfVxuICB9LFxuXG4gIGRlY29kZUJyb2FkY2FzdChidWZmZXIsIHZpZXcsIGRlY29kZXIpe1xuICAgIGxldCB0b3BpY1NpemUgPSB2aWV3LmdldFVpbnQ4KDEpXG4gICAgbGV0IGV2ZW50U2l6ZSA9IHZpZXcuZ2V0VWludDgoMilcbiAgICBsZXQgb2Zmc2V0ID0gdGhpcy5IRUFERVJfTEVOR1RIICsgMlxuICAgIGxldCB0b3BpYyA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIHRvcGljU2l6ZSkpXG4gICAgb2Zmc2V0ID0gb2Zmc2V0ICsgdG9waWNTaXplXG4gICAgbGV0IGV2ZW50ID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgZXZlbnRTaXplKSlcbiAgICBvZmZzZXQgPSBvZmZzZXQgKyBldmVudFNpemVcbiAgICBsZXQgZGF0YSA9IGJ1ZmZlci5zbGljZShvZmZzZXQsIGJ1ZmZlci5ieXRlTGVuZ3RoKVxuXG4gICAgcmV0dXJuIHtqb2luX3JlZjogbnVsbCwgcmVmOiBudWxsLCB0b3BpYzogdG9waWMsIGV2ZW50OiBldmVudCwgcGF5bG9hZDogZGF0YX1cbiAgfVxufVxuIiwgImltcG9ydCB7XG4gIGdsb2JhbCxcbiAgcGh4V2luZG93LFxuICBDSEFOTkVMX0VWRU5UUyxcbiAgREVGQVVMVF9USU1FT1VULFxuICBERUZBVUxUX1ZTTixcbiAgU09DS0VUX1NUQVRFUyxcbiAgVFJBTlNQT1JUUyxcbiAgV1NfQ0xPU0VfTk9STUFMXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCB7XG4gIGNsb3N1cmVcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5pbXBvcnQgQWpheCBmcm9tIFwiLi9hamF4XCJcbmltcG9ydCBDaGFubmVsIGZyb20gXCIuL2NoYW5uZWxcIlxuaW1wb3J0IExvbmdQb2xsIGZyb20gXCIuL2xvbmdwb2xsXCJcbmltcG9ydCBTZXJpYWxpemVyIGZyb20gXCIuL3NlcmlhbGl6ZXJcIlxuaW1wb3J0IFRpbWVyIGZyb20gXCIuL3RpbWVyXCJcblxuLyoqIEluaXRpYWxpemVzIHRoZSBTb2NrZXQgKlxuICpcbiAqIEZvciBJRTggc3VwcG9ydCB1c2UgYW4gRVM1LXNoaW0gKGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZW5kUG9pbnQgLSBUaGUgc3RyaW5nIFdlYlNvY2tldCBlbmRwb2ludCwgaWUsIGBcIndzOi8vZXhhbXBsZS5jb20vc29ja2V0XCJgLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBcIndzczovL2V4YW1wbGUuY29tXCJgXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFwiL3NvY2tldFwiYCAoaW5oZXJpdGVkIGhvc3QgJiBwcm90b2NvbClcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0c10gLSBPcHRpb25hbCBjb25maWd1cmF0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy50cmFuc3BvcnRdIC0gVGhlIFdlYnNvY2tldCBUcmFuc3BvcnQsIGZvciBleGFtcGxlIFdlYlNvY2tldCBvciBQaG9lbml4LkxvbmdQb2xsLlxuICpcbiAqIERlZmF1bHRzIHRvIFdlYlNvY2tldCB3aXRoIGF1dG9tYXRpYyBMb25nUG9sbCBmYWxsYmFjay5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtvcHRzLmVuY29kZV0gLSBUaGUgZnVuY3Rpb24gdG8gZW5jb2RlIG91dGdvaW5nIG1lc3NhZ2VzLlxuICpcbiAqIERlZmF1bHRzIHRvIEpTT04gZW5jb2Rlci5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy5kZWNvZGVdIC0gVGhlIGZ1bmN0aW9uIHRvIGRlY29kZSBpbmNvbWluZyBtZXNzYWdlcy5cbiAqXG4gKiBEZWZhdWx0cyB0byBKU09OOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIChwYXlsb2FkLCBjYWxsYmFjaykgPT4gY2FsbGJhY2soSlNPTi5wYXJzZShwYXlsb2FkKSlcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0cy50aW1lb3V0XSAtIFRoZSBkZWZhdWx0IHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIHRyaWdnZXIgcHVzaCB0aW1lb3V0cy5cbiAqXG4gKiBEZWZhdWx0cyBgREVGQVVMVF9USU1FT1VUYFxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLmhlYXJ0YmVhdEludGVydmFsTXNdIC0gVGhlIG1pbGxpc2VjIGludGVydmFsIHRvIHNlbmQgYSBoZWFydGJlYXQgbWVzc2FnZVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLnJlY29ubmVjdEFmdGVyTXNdIC0gVGhlIG9wdGlvbmFsIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbWlsbGlzZWNcbiAqIHNvY2tldCByZWNvbm5lY3QgaW50ZXJ2YWwuXG4gKlxuICogRGVmYXVsdHMgdG8gc3RlcHBlZCBiYWNrb2ZmIG9mOlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGZ1bmN0aW9uKHRyaWVzKXtcbiAqICAgcmV0dXJuIFsxMCwgNTAsIDEwMCwgMTUwLCAyMDAsIDI1MCwgNTAwLCAxMDAwLCAyMDAwXVt0cmllcyAtIDFdIHx8IDUwMDBcbiAqIH1cbiAqIGBgYGBcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdHMucmVqb2luQWZ0ZXJNc10gLSBUaGUgb3B0aW9uYWwgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBtaWxsaXNlY1xuICogcmVqb2luIGludGVydmFsIGZvciBpbmRpdmlkdWFsIGNoYW5uZWxzLlxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIGZ1bmN0aW9uKHRyaWVzKXtcbiAqICAgcmV0dXJuIFsxMDAwLCAyMDAwLCA1MDAwXVt0cmllcyAtIDFdIHx8IDEwMDAwXG4gKiB9XG4gKiBgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMubG9nZ2VyXSAtIFRoZSBvcHRpb25hbCBmdW5jdGlvbiBmb3Igc3BlY2lhbGl6ZWQgbG9nZ2luZywgaWU6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogZnVuY3Rpb24oa2luZCwgbXNnLCBkYXRhKSB7XG4gKiAgIGNvbnNvbGUubG9nKGAke2tpbmR9OiAke21zZ31gLCBkYXRhKVxuICogfVxuICogYGBgXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRzLmxvbmdwb2xsZXJUaW1lb3V0XSAtIFRoZSBtYXhpbXVtIHRpbWVvdXQgb2YgYSBsb25nIHBvbGwgQUpBWCByZXF1ZXN0LlxuICpcbiAqIERlZmF1bHRzIHRvIDIwcyAoZG91YmxlIHRoZSBzZXJ2ZXIgbG9uZyBwb2xsIHRpbWVyKS5cbiAqXG4gKiBAcGFyYW0geyhPYmplY3R8ZnVuY3Rpb24pfSBbb3B0cy5wYXJhbXNdIC0gVGhlIG9wdGlvbmFsIHBhcmFtcyB0byBwYXNzIHdoZW4gY29ubmVjdGluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmJpbmFyeVR5cGVdIC0gVGhlIGJpbmFyeSB0eXBlIHRvIHVzZSBmb3IgYmluYXJ5IFdlYlNvY2tldCBmcmFtZXMuXG4gKlxuICogRGVmYXVsdHMgdG8gXCJhcnJheWJ1ZmZlclwiXG4gKlxuICogQHBhcmFtIHt2c259IFtvcHRzLnZzbl0gLSBUaGUgc2VyaWFsaXplcidzIHByb3RvY29sIHZlcnNpb24gdG8gc2VuZCBvbiBjb25uZWN0LlxuICpcbiAqIERlZmF1bHRzIHRvIERFRkFVTFRfVlNOLlxuKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNvY2tldCB7XG4gIGNvbnN0cnVjdG9yKGVuZFBvaW50LCBvcHRzID0ge30pe1xuICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3MgPSB7b3BlbjogW10sIGNsb3NlOiBbXSwgZXJyb3I6IFtdLCBtZXNzYWdlOiBbXX1cbiAgICB0aGlzLmNoYW5uZWxzID0gW11cbiAgICB0aGlzLnNlbmRCdWZmZXIgPSBbXVxuICAgIHRoaXMucmVmID0gMFxuICAgIHRoaXMudGltZW91dCA9IG9wdHMudGltZW91dCB8fCBERUZBVUxUX1RJTUVPVVRcbiAgICB0aGlzLnRyYW5zcG9ydCA9IG9wdHMudHJhbnNwb3J0IHx8IGdsb2JhbC5XZWJTb2NrZXQgfHwgTG9uZ1BvbGxcbiAgICB0aGlzLmVzdGFibGlzaGVkQ29ubmVjdGlvbnMgPSAwXG4gICAgdGhpcy5kZWZhdWx0RW5jb2RlciA9IFNlcmlhbGl6ZXIuZW5jb2RlLmJpbmQoU2VyaWFsaXplcilcbiAgICB0aGlzLmRlZmF1bHREZWNvZGVyID0gU2VyaWFsaXplci5kZWNvZGUuYmluZChTZXJpYWxpemVyKVxuICAgIHRoaXMuY2xvc2VXYXNDbGVhbiA9IGZhbHNlXG4gICAgdGhpcy5iaW5hcnlUeXBlID0gb3B0cy5iaW5hcnlUeXBlIHx8IFwiYXJyYXlidWZmZXJcIlxuICAgIHRoaXMuY29ubmVjdENsb2NrID0gMVxuICAgIGlmKHRoaXMudHJhbnNwb3J0ICE9PSBMb25nUG9sbCl7XG4gICAgICB0aGlzLmVuY29kZSA9IG9wdHMuZW5jb2RlIHx8IHRoaXMuZGVmYXVsdEVuY29kZXJcbiAgICAgIHRoaXMuZGVjb2RlID0gb3B0cy5kZWNvZGUgfHwgdGhpcy5kZWZhdWx0RGVjb2RlclxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVuY29kZSA9IHRoaXMuZGVmYXVsdEVuY29kZXJcbiAgICAgIHRoaXMuZGVjb2RlID0gdGhpcy5kZWZhdWx0RGVjb2RlclxuICAgIH1cbiAgICBsZXQgYXdhaXRpbmdDb25uZWN0aW9uT25QYWdlU2hvdyA9IG51bGxcbiAgICBpZihwaHhXaW5kb3cgJiYgcGh4V2luZG93LmFkZEV2ZW50TGlzdGVuZXIpe1xuICAgICAgcGh4V2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBfZSA9PiB7XG4gICAgICAgIGlmKHRoaXMuY29ubil7XG4gICAgICAgICAgdGhpcy5kaXNjb25uZWN0KClcbiAgICAgICAgICBhd2FpdGluZ0Nvbm5lY3Rpb25PblBhZ2VTaG93ID0gdGhpcy5jb25uZWN0Q2xvY2tcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIHBoeFdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGFnZXNob3dcIiwgX2UgPT4ge1xuICAgICAgICBpZihhd2FpdGluZ0Nvbm5lY3Rpb25PblBhZ2VTaG93ID09PSB0aGlzLmNvbm5lY3RDbG9jayl7XG4gICAgICAgICAgYXdhaXRpbmdDb25uZWN0aW9uT25QYWdlU2hvdyA9IG51bGxcbiAgICAgICAgICB0aGlzLmNvbm5lY3QoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgICB0aGlzLmhlYXJ0YmVhdEludGVydmFsTXMgPSBvcHRzLmhlYXJ0YmVhdEludGVydmFsTXMgfHwgMzAwMDBcbiAgICB0aGlzLnJlam9pbkFmdGVyTXMgPSAodHJpZXMpID0+IHtcbiAgICAgIGlmKG9wdHMucmVqb2luQWZ0ZXJNcyl7XG4gICAgICAgIHJldHVybiBvcHRzLnJlam9pbkFmdGVyTXModHJpZXMpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gWzEwMDAsIDIwMDAsIDUwMDBdW3RyaWVzIC0gMV0gfHwgMTAwMDBcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5yZWNvbm5lY3RBZnRlck1zID0gKHRyaWVzKSA9PiB7XG4gICAgICBpZihvcHRzLnJlY29ubmVjdEFmdGVyTXMpe1xuICAgICAgICByZXR1cm4gb3B0cy5yZWNvbm5lY3RBZnRlck1zKHRyaWVzKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFsxMCwgNTAsIDEwMCwgMTUwLCAyMDAsIDI1MCwgNTAwLCAxMDAwLCAyMDAwXVt0cmllcyAtIDFdIHx8IDUwMDBcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sb2dnZXIgPSBvcHRzLmxvZ2dlciB8fCBudWxsXG4gICAgdGhpcy5sb25ncG9sbGVyVGltZW91dCA9IG9wdHMubG9uZ3BvbGxlclRpbWVvdXQgfHwgMjAwMDBcbiAgICB0aGlzLnBhcmFtcyA9IGNsb3N1cmUob3B0cy5wYXJhbXMgfHwge30pXG4gICAgdGhpcy5lbmRQb2ludCA9IGAke2VuZFBvaW50fS8ke1RSQU5TUE9SVFMud2Vic29ja2V0fWBcbiAgICB0aGlzLnZzbiA9IG9wdHMudnNuIHx8IERFRkFVTFRfVlNOXG4gICAgdGhpcy5oZWFydGJlYXRUaW1lb3V0VGltZXIgPSBudWxsXG4gICAgdGhpcy5oZWFydGJlYXRUaW1lciA9IG51bGxcbiAgICB0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWYgPSBudWxsXG4gICAgdGhpcy5yZWNvbm5lY3RUaW1lciA9IG5ldyBUaW1lcigoKSA9PiB7XG4gICAgICB0aGlzLnRlYXJkb3duKCgpID0+IHRoaXMuY29ubmVjdCgpKVxuICAgIH0sIHRoaXMucmVjb25uZWN0QWZ0ZXJNcylcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBMb25nUG9sbCB0cmFuc3BvcnQgcmVmZXJlbmNlXG4gICAqL1xuICBnZXRMb25nUG9sbFRyYW5zcG9ydCgpeyByZXR1cm4gTG9uZ1BvbGwgfVxuXG4gIC8qKlxuICAgKiBEaXNjb25uZWN0cyBhbmQgcmVwbGFjZXMgdGhlIGFjdGl2ZSB0cmFuc3BvcnRcbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV3VHJhbnNwb3J0IC0gVGhlIG5ldyB0cmFuc3BvcnQgY2xhc3MgdG8gaW5zdGFudGlhdGVcbiAgICpcbiAgICovXG4gIHJlcGxhY2VUcmFuc3BvcnQobmV3VHJhbnNwb3J0KXtcbiAgICB0aGlzLmNvbm5lY3RDbG9jaysrXG4gICAgdGhpcy5jbG9zZVdhc0NsZWFuID0gdHJ1ZVxuICAgIHRoaXMucmVjb25uZWN0VGltZXIucmVzZXQoKVxuICAgIHRoaXMuc2VuZEJ1ZmZlciA9IFtdXG4gICAgaWYodGhpcy5jb25uKXtcbiAgICAgIHRoaXMuY29ubi5jbG9zZSgpXG4gICAgICB0aGlzLmNvbm4gPSBudWxsXG4gICAgfVxuICAgIHRoaXMudHJhbnNwb3J0ID0gbmV3VHJhbnNwb3J0XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgc29ja2V0IHByb3RvY29sXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBwcm90b2NvbCgpeyByZXR1cm4gbG9jYXRpb24ucHJvdG9jb2wubWF0Y2goL15odHRwcy8pID8gXCJ3c3NcIiA6IFwid3NcIiB9XG5cbiAgLyoqXG4gICAqIFRoZSBmdWxseSBxdWFsaWZpZWQgc29ja2V0IHVybFxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgZW5kUG9pbnRVUkwoKXtcbiAgICBsZXQgdXJpID0gQWpheC5hcHBlbmRQYXJhbXMoXG4gICAgICBBamF4LmFwcGVuZFBhcmFtcyh0aGlzLmVuZFBvaW50LCB0aGlzLnBhcmFtcygpKSwge3ZzbjogdGhpcy52c259KVxuICAgIGlmKHVyaS5jaGFyQXQoMCkgIT09IFwiL1wiKXsgcmV0dXJuIHVyaSB9XG4gICAgaWYodXJpLmNoYXJBdCgxKSA9PT0gXCIvXCIpeyByZXR1cm4gYCR7dGhpcy5wcm90b2NvbCgpfToke3VyaX1gIH1cblxuICAgIHJldHVybiBgJHt0aGlzLnByb3RvY29sKCl9Oi8vJHtsb2NhdGlvbi5ob3N0fSR7dXJpfWBcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNjb25uZWN0cyB0aGUgc29ja2V0XG4gICAqXG4gICAqIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ2xvc2VFdmVudCNTdGF0dXNfY29kZXMgZm9yIHZhbGlkIHN0YXR1cyBjb2Rlcy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBPcHRpb25hbCBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgYWZ0ZXIgc29ja2V0IGlzIGRpc2Nvbm5lY3RlZC5cbiAgICogQHBhcmFtIHtpbnRlZ2VyfSBjb2RlIC0gQSBzdGF0dXMgY29kZSBmb3IgZGlzY29ubmVjdGlvbiAoT3B0aW9uYWwpLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIC0gQSB0ZXh0dWFsIGRlc2NyaXB0aW9uIG9mIHRoZSByZWFzb24gdG8gZGlzY29ubmVjdC4gKE9wdGlvbmFsKVxuICAgKi9cbiAgZGlzY29ubmVjdChjYWxsYmFjaywgY29kZSwgcmVhc29uKXtcbiAgICB0aGlzLmNvbm5lY3RDbG9jaysrXG4gICAgdGhpcy5jbG9zZVdhc0NsZWFuID0gdHJ1ZVxuICAgIHRoaXMucmVjb25uZWN0VGltZXIucmVzZXQoKVxuICAgIHRoaXMudGVhcmRvd24oY2FsbGJhY2ssIGNvZGUsIHJlYXNvbilcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gVGhlIHBhcmFtcyB0byBzZW5kIHdoZW4gY29ubmVjdGluZywgZm9yIGV4YW1wbGUgYHt1c2VyX2lkOiB1c2VyVG9rZW59YFxuICAgKlxuICAgKiBQYXNzaW5nIHBhcmFtcyB0byBjb25uZWN0IGlzIGRlcHJlY2F0ZWQ7IHBhc3MgdGhlbSBpbiB0aGUgU29ja2V0IGNvbnN0cnVjdG9yIGluc3RlYWQ6XG4gICAqIGBuZXcgU29ja2V0KFwiL3NvY2tldFwiLCB7cGFyYW1zOiB7dXNlcl9pZDogdXNlclRva2VufX0pYC5cbiAgICovXG4gIGNvbm5lY3QocGFyYW1zKXtcbiAgICBpZihwYXJhbXMpe1xuICAgICAgY29uc29sZSAmJiBjb25zb2xlLmxvZyhcInBhc3NpbmcgcGFyYW1zIHRvIGNvbm5lY3QgaXMgZGVwcmVjYXRlZC4gSW5zdGVhZCBwYXNzIDpwYXJhbXMgdG8gdGhlIFNvY2tldCBjb25zdHJ1Y3RvclwiKVxuICAgICAgdGhpcy5wYXJhbXMgPSBjbG9zdXJlKHBhcmFtcylcbiAgICB9XG4gICAgaWYodGhpcy5jb25uKXsgcmV0dXJuIH1cblxuICAgIHRoaXMuY29ubmVjdENsb2NrKytcbiAgICB0aGlzLmNsb3NlV2FzQ2xlYW4gPSBmYWxzZVxuICAgIHRoaXMuY29ubiA9IG5ldyB0aGlzLnRyYW5zcG9ydCh0aGlzLmVuZFBvaW50VVJMKCkpXG4gICAgdGhpcy5jb25uLmJpbmFyeVR5cGUgPSB0aGlzLmJpbmFyeVR5cGVcbiAgICB0aGlzLmNvbm4udGltZW91dCA9IHRoaXMubG9uZ3BvbGxlclRpbWVvdXRcbiAgICB0aGlzLmNvbm4ub25vcGVuID0gKCkgPT4gdGhpcy5vbkNvbm5PcGVuKClcbiAgICB0aGlzLmNvbm4ub25lcnJvciA9IGVycm9yID0+IHRoaXMub25Db25uRXJyb3IoZXJyb3IpXG4gICAgdGhpcy5jb25uLm9ubWVzc2FnZSA9IGV2ZW50ID0+IHRoaXMub25Db25uTWVzc2FnZShldmVudClcbiAgICB0aGlzLmNvbm4ub25jbG9zZSA9IGV2ZW50ID0+IHRoaXMub25Db25uQ2xvc2UoZXZlbnQpXG4gIH1cblxuICAvKipcbiAgICogTG9ncyB0aGUgbWVzc2FnZS4gT3ZlcnJpZGUgYHRoaXMubG9nZ2VyYCBmb3Igc3BlY2lhbGl6ZWQgbG9nZ2luZy4gbm9vcHMgYnkgZGVmYXVsdFxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2luZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbXNnXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAqL1xuICBsb2coa2luZCwgbXNnLCBkYXRhKXsgdGhpcy5sb2dnZXIoa2luZCwgbXNnLCBkYXRhKSB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBhIGxvZ2dlciBoYXMgYmVlbiBzZXQgb24gdGhpcyBzb2NrZXQuXG4gICAqL1xuICBoYXNMb2dnZXIoKXsgcmV0dXJuIHRoaXMubG9nZ2VyICE9PSBudWxsIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXJzIGNhbGxiYWNrcyBmb3IgY29ubmVjdGlvbiBvcGVuIGV2ZW50c1xuICAgKlxuICAgKiBAZXhhbXBsZSBzb2NrZXQub25PcGVuKGZ1bmN0aW9uKCl7IGNvbnNvbGUuaW5mbyhcInRoZSBzb2NrZXQgd2FzIG9wZW5lZFwiKSB9KVxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICAgKi9cbiAgb25PcGVuKGNhbGxiYWNrKXtcbiAgICBsZXQgcmVmID0gdGhpcy5tYWtlUmVmKClcbiAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLm9wZW4ucHVzaChbcmVmLCBjYWxsYmFja10pXG4gICAgcmV0dXJuIHJlZlxuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBjYWxsYmFja3MgZm9yIGNvbm5lY3Rpb24gY2xvc2UgZXZlbnRzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBvbkNsb3NlKGNhbGxiYWNrKXtcbiAgICBsZXQgcmVmID0gdGhpcy5tYWtlUmVmKClcbiAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLmNsb3NlLnB1c2goW3JlZiwgY2FsbGJhY2tdKVxuICAgIHJldHVybiByZWZcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgY2FsbGJhY2tzIGZvciBjb25uZWN0aW9uIGVycm9yIGV2ZW50c1xuICAgKlxuICAgKiBAZXhhbXBsZSBzb2NrZXQub25FcnJvcihmdW5jdGlvbihlcnJvcil7IGFsZXJ0KFwiQW4gZXJyb3Igb2NjdXJyZWRcIikgfSlcbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIG9uRXJyb3IoY2FsbGJhY2spe1xuICAgIGxldCByZWYgPSB0aGlzLm1ha2VSZWYoKVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3MuZXJyb3IucHVzaChbcmVmLCBjYWxsYmFja10pXG4gICAgcmV0dXJuIHJlZlxuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBjYWxsYmFja3MgZm9yIGNvbm5lY3Rpb24gbWVzc2FnZSBldmVudHNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICovXG4gIG9uTWVzc2FnZShjYWxsYmFjayl7XG4gICAgbGV0IHJlZiA9IHRoaXMubWFrZVJlZigpXG4gICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5tZXNzYWdlLnB1c2goW3JlZiwgY2FsbGJhY2tdKVxuICAgIHJldHVybiByZWZcbiAgfVxuXG4gIC8qKlxuICAgKiBQaW5ncyB0aGUgc2VydmVyIGFuZCBpbnZva2VzIHRoZSBjYWxsYmFjayB3aXRoIHRoZSBSVFQgaW4gbWlsbGlzZWNvbmRzXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcGluZyB3YXMgcHVzaGVkIG9yIGZhbHNlIGlmIHVuYWJsZSB0byBiZSBwdXNoZWQuXG4gICAqL1xuICBwaW5nKGNhbGxiYWNrKXtcbiAgICBpZighdGhpcy5pc0Nvbm5lY3RlZCgpKXsgcmV0dXJuIGZhbHNlIH1cbiAgICBsZXQgcmVmID0gdGhpcy5tYWtlUmVmKClcbiAgICBsZXQgc3RhcnRUaW1lID0gRGF0ZS5ub3coKVxuICAgIHRoaXMucHVzaCh7dG9waWM6IFwicGhvZW5peFwiLCBldmVudDogXCJoZWFydGJlYXRcIiwgcGF5bG9hZDoge30sIHJlZjogcmVmfSlcbiAgICBsZXQgb25Nc2dSZWYgPSB0aGlzLm9uTWVzc2FnZShtc2cgPT4ge1xuICAgICAgaWYobXNnLnJlZiA9PT0gcmVmKXtcbiAgICAgICAgdGhpcy5vZmYoW29uTXNnUmVmXSlcbiAgICAgICAgY2FsbGJhY2soRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG5cbiAgY2xlYXJIZWFydGJlYXRzKCl7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuaGVhcnRiZWF0VGltZXIpXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuaGVhcnRiZWF0VGltZW91dFRpbWVyKVxuICB9XG5cbiAgb25Db25uT3Blbigpe1xuICAgIGlmKHRoaXMuaGFzTG9nZ2VyKCkpIHRoaXMubG9nKFwidHJhbnNwb3J0XCIsIGBjb25uZWN0ZWQgdG8gJHt0aGlzLmVuZFBvaW50VVJMKCl9YClcbiAgICB0aGlzLmNsb3NlV2FzQ2xlYW4gPSBmYWxzZVxuICAgIHRoaXMuZXN0YWJsaXNoZWRDb25uZWN0aW9ucysrXG4gICAgdGhpcy5mbHVzaFNlbmRCdWZmZXIoKVxuICAgIHRoaXMucmVjb25uZWN0VGltZXIucmVzZXQoKVxuICAgIHRoaXMucmVzZXRIZWFydGJlYXQoKVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3Mub3Blbi5mb3JFYWNoKChbLCBjYWxsYmFja10pID0+IGNhbGxiYWNrKCkpXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG5cbiAgaGVhcnRiZWF0VGltZW91dCgpe1xuICAgIGlmKHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZil7XG4gICAgICB0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWYgPSBudWxsXG4gICAgICBpZih0aGlzLmhhc0xvZ2dlcigpKXsgdGhpcy5sb2coXCJ0cmFuc3BvcnRcIiwgXCJoZWFydGJlYXQgdGltZW91dC4gQXR0ZW1wdGluZyB0byByZS1lc3RhYmxpc2ggY29ubmVjdGlvblwiKSB9XG4gICAgICB0aGlzLnRyaWdnZXJDaGFuRXJyb3IoKVxuICAgICAgdGhpcy5jbG9zZVdhc0NsZWFuID0gZmFsc2VcbiAgICAgIHRoaXMudGVhcmRvd24oKCkgPT4gdGhpcy5yZWNvbm5lY3RUaW1lci5zY2hlZHVsZVRpbWVvdXQoKSwgV1NfQ0xPU0VfTk9STUFMLCBcImhlYXJ0YmVhdCB0aW1lb3V0XCIpXG4gICAgfVxuICB9XG5cbiAgcmVzZXRIZWFydGJlYXQoKXtcbiAgICBpZih0aGlzLmNvbm4gJiYgdGhpcy5jb25uLnNraXBIZWFydGJlYXQpeyByZXR1cm4gfVxuICAgIHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZiA9IG51bGxcbiAgICB0aGlzLmNsZWFySGVhcnRiZWF0cygpXG4gICAgdGhpcy5oZWFydGJlYXRUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZW5kSGVhcnRiZWF0KCksIHRoaXMuaGVhcnRiZWF0SW50ZXJ2YWxNcylcbiAgfVxuXG4gIHRlYXJkb3duKGNhbGxiYWNrLCBjb2RlLCByZWFzb24pe1xuICAgIGlmKCF0aGlzLmNvbm4pe1xuICAgICAgcmV0dXJuIGNhbGxiYWNrICYmIGNhbGxiYWNrKClcbiAgICB9XG5cbiAgICB0aGlzLndhaXRGb3JCdWZmZXJEb25lKCgpID0+IHtcbiAgICAgIGlmKHRoaXMuY29ubil7XG4gICAgICAgIGlmKGNvZGUpeyB0aGlzLmNvbm4uY2xvc2UoY29kZSwgcmVhc29uIHx8IFwiXCIpIH0gZWxzZSB7IHRoaXMuY29ubi5jbG9zZSgpIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy53YWl0Rm9yU29ja2V0Q2xvc2VkKCgpID0+IHtcbiAgICAgICAgaWYodGhpcy5jb25uKXtcbiAgICAgICAgICB0aGlzLmNvbm4ub25vcGVuID0gZnVuY3Rpb24gKCl7IH0gLy8gbm9vcFxuICAgICAgICAgIHRoaXMuY29ubi5vbmVycm9yID0gZnVuY3Rpb24gKCl7IH0gLy8gbm9vcFxuICAgICAgICAgIHRoaXMuY29ubi5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgICAgICAgdGhpcy5jb25uLm9uY2xvc2UgPSBmdW5jdGlvbiAoKXsgfSAvLyBub29wXG4gICAgICAgICAgdGhpcy5jb25uID0gbnVsbFxuICAgICAgICB9XG5cbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgd2FpdEZvckJ1ZmZlckRvbmUoY2FsbGJhY2ssIHRyaWVzID0gMSl7XG4gICAgaWYodHJpZXMgPT09IDUgfHwgIXRoaXMuY29ubiB8fCAhdGhpcy5jb25uLmJ1ZmZlcmVkQW1vdW50KXtcbiAgICAgIGNhbGxiYWNrKClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy53YWl0Rm9yQnVmZmVyRG9uZShjYWxsYmFjaywgdHJpZXMgKyAxKVxuICAgIH0sIDE1MCAqIHRyaWVzKVxuICB9XG5cbiAgd2FpdEZvclNvY2tldENsb3NlZChjYWxsYmFjaywgdHJpZXMgPSAxKXtcbiAgICBpZih0cmllcyA9PT0gNSB8fCAhdGhpcy5jb25uIHx8IHRoaXMuY29ubi5yZWFkeVN0YXRlID09PSBTT0NLRVRfU1RBVEVTLmNsb3NlZCl7XG4gICAgICBjYWxsYmFjaygpXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMud2FpdEZvclNvY2tldENsb3NlZChjYWxsYmFjaywgdHJpZXMgKyAxKVxuICAgIH0sIDE1MCAqIHRyaWVzKVxuICB9XG5cbiAgb25Db25uQ2xvc2UoZXZlbnQpe1xuICAgIGxldCBjbG9zZUNvZGUgPSBldmVudCAmJiBldmVudC5jb2RlXG4gICAgaWYodGhpcy5oYXNMb2dnZXIoKSkgdGhpcy5sb2coXCJ0cmFuc3BvcnRcIiwgXCJjbG9zZVwiLCBldmVudClcbiAgICB0aGlzLnRyaWdnZXJDaGFuRXJyb3IoKVxuICAgIHRoaXMuY2xlYXJIZWFydGJlYXRzKClcbiAgICBpZighdGhpcy5jbG9zZVdhc0NsZWFuICYmIGNsb3NlQ29kZSAhPT0gMTAwMCl7XG4gICAgICB0aGlzLnJlY29ubmVjdFRpbWVyLnNjaGVkdWxlVGltZW91dCgpXG4gICAgfVxuICAgIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3MuY2xvc2UuZm9yRWFjaCgoWywgY2FsbGJhY2tdKSA9PiBjYWxsYmFjayhldmVudCkpXG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIG9uQ29ubkVycm9yKGVycm9yKXtcbiAgICBpZih0aGlzLmhhc0xvZ2dlcigpKSB0aGlzLmxvZyhcInRyYW5zcG9ydFwiLCBlcnJvcilcbiAgICBsZXQgdHJhbnNwb3J0QmVmb3JlID0gdGhpcy50cmFuc3BvcnRcbiAgICBsZXQgZXN0YWJsaXNoZWRCZWZvcmUgPSB0aGlzLmVzdGFibGlzaGVkQ29ubmVjdGlvbnNcbiAgICB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLmVycm9yLmZvckVhY2goKFssIGNhbGxiYWNrXSkgPT4ge1xuICAgICAgY2FsbGJhY2soZXJyb3IsIHRyYW5zcG9ydEJlZm9yZSwgZXN0YWJsaXNoZWRCZWZvcmUpXG4gICAgfSlcbiAgICBpZih0cmFuc3BvcnRCZWZvcmUgPT09IHRoaXMudHJhbnNwb3J0IHx8IGVzdGFibGlzaGVkQmVmb3JlID4gMCl7XG4gICAgICB0aGlzLnRyaWdnZXJDaGFuRXJyb3IoKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdHJpZ2dlckNoYW5FcnJvcigpe1xuICAgIHRoaXMuY2hhbm5lbHMuZm9yRWFjaChjaGFubmVsID0+IHtcbiAgICAgIGlmKCEoY2hhbm5lbC5pc0Vycm9yZWQoKSB8fCBjaGFubmVsLmlzTGVhdmluZygpIHx8IGNoYW5uZWwuaXNDbG9zZWQoKSkpe1xuICAgICAgICBjaGFubmVsLnRyaWdnZXIoQ0hBTk5FTF9FVkVOVFMuZXJyb3IpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgY29ubmVjdGlvblN0YXRlKCl7XG4gICAgc3dpdGNoKHRoaXMuY29ubiAmJiB0aGlzLmNvbm4ucmVhZHlTdGF0ZSl7XG4gICAgICBjYXNlIFNPQ0tFVF9TVEFURVMuY29ubmVjdGluZzogcmV0dXJuIFwiY29ubmVjdGluZ1wiXG4gICAgICBjYXNlIFNPQ0tFVF9TVEFURVMub3BlbjogcmV0dXJuIFwib3BlblwiXG4gICAgICBjYXNlIFNPQ0tFVF9TVEFURVMuY2xvc2luZzogcmV0dXJuIFwiY2xvc2luZ1wiXG4gICAgICBkZWZhdWx0OiByZXR1cm4gXCJjbG9zZWRcIlxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGlzQ29ubmVjdGVkKCl7IHJldHVybiB0aGlzLmNvbm5lY3Rpb25TdGF0ZSgpID09PSBcIm9wZW5cIiB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqXG4gICAqIEBwYXJhbSB7Q2hhbm5lbH1cbiAgICovXG4gIHJlbW92ZShjaGFubmVsKXtcbiAgICB0aGlzLm9mZihjaGFubmVsLnN0YXRlQ2hhbmdlUmVmcylcbiAgICB0aGlzLmNoYW5uZWxzID0gdGhpcy5jaGFubmVscy5maWx0ZXIoYyA9PiBjLmpvaW5SZWYoKSAhPT0gY2hhbm5lbC5qb2luUmVmKCkpXG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBgb25PcGVuYCwgYG9uQ2xvc2VgLCBgb25FcnJvcixgIGFuZCBgb25NZXNzYWdlYCByZWdpc3RyYXRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0ge3JlZnN9IC0gbGlzdCBvZiByZWZzIHJldHVybmVkIGJ5IGNhbGxzIHRvXG4gICAqICAgICAgICAgICAgICAgICBgb25PcGVuYCwgYG9uQ2xvc2VgLCBgb25FcnJvcixgIGFuZCBgb25NZXNzYWdlYFxuICAgKi9cbiAgb2ZmKHJlZnMpe1xuICAgIGZvcihsZXQga2V5IGluIHRoaXMuc3RhdGVDaGFuZ2VDYWxsYmFja3Mpe1xuICAgICAgdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrc1trZXldID0gdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrc1trZXldLmZpbHRlcigoW3JlZl0pID0+IHtcbiAgICAgICAgcmV0dXJuIHJlZnMuaW5kZXhPZihyZWYpID09PSAtMVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhdGVzIGEgbmV3IGNoYW5uZWwgZm9yIHRoZSBnaXZlbiB0b3BpY1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9waWNcbiAgICogQHBhcmFtIHtPYmplY3R9IGNoYW5QYXJhbXMgLSBQYXJhbWV0ZXJzIGZvciB0aGUgY2hhbm5lbFxuICAgKiBAcmV0dXJucyB7Q2hhbm5lbH1cbiAgICovXG4gIGNoYW5uZWwodG9waWMsIGNoYW5QYXJhbXMgPSB7fSl7XG4gICAgbGV0IGNoYW4gPSBuZXcgQ2hhbm5lbCh0b3BpYywgY2hhblBhcmFtcywgdGhpcylcbiAgICB0aGlzLmNoYW5uZWxzLnB1c2goY2hhbilcbiAgICByZXR1cm4gY2hhblxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAqL1xuICBwdXNoKGRhdGEpe1xuICAgIGlmKHRoaXMuaGFzTG9nZ2VyKCkpe1xuICAgICAgbGV0IHt0b3BpYywgZXZlbnQsIHBheWxvYWQsIHJlZiwgam9pbl9yZWZ9ID0gZGF0YVxuICAgICAgdGhpcy5sb2coXCJwdXNoXCIsIGAke3RvcGljfSAke2V2ZW50fSAoJHtqb2luX3JlZn0sICR7cmVmfSlgLCBwYXlsb2FkKVxuICAgIH1cblxuICAgIGlmKHRoaXMuaXNDb25uZWN0ZWQoKSl7XG4gICAgICB0aGlzLmVuY29kZShkYXRhLCByZXN1bHQgPT4gdGhpcy5jb25uLnNlbmQocmVzdWx0KSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZW5kQnVmZmVyLnB1c2goKCkgPT4gdGhpcy5lbmNvZGUoZGF0YSwgcmVzdWx0ID0+IHRoaXMuY29ubi5zZW5kKHJlc3VsdCkpKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIG5leHQgbWVzc2FnZSByZWYsIGFjY291bnRpbmcgZm9yIG92ZXJmbG93c1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgbWFrZVJlZigpe1xuICAgIGxldCBuZXdSZWYgPSB0aGlzLnJlZiArIDFcbiAgICBpZihuZXdSZWYgPT09IHRoaXMucmVmKXsgdGhpcy5yZWYgPSAwIH0gZWxzZSB7IHRoaXMucmVmID0gbmV3UmVmIH1cblxuICAgIHJldHVybiB0aGlzLnJlZi50b1N0cmluZygpXG4gIH1cblxuICBzZW5kSGVhcnRiZWF0KCl7XG4gICAgaWYodGhpcy5wZW5kaW5nSGVhcnRiZWF0UmVmICYmICF0aGlzLmlzQ29ubmVjdGVkKCkpeyByZXR1cm4gfVxuICAgIHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZiA9IHRoaXMubWFrZVJlZigpXG4gICAgdGhpcy5wdXNoKHt0b3BpYzogXCJwaG9lbml4XCIsIGV2ZW50OiBcImhlYXJ0YmVhdFwiLCBwYXlsb2FkOiB7fSwgcmVmOiB0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWZ9KVxuICAgIHRoaXMuaGVhcnRiZWF0VGltZW91dFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB0aGlzLmhlYXJ0YmVhdFRpbWVvdXQoKSwgdGhpcy5oZWFydGJlYXRJbnRlcnZhbE1zKVxuICB9XG5cbiAgZmx1c2hTZW5kQnVmZmVyKCl7XG4gICAgaWYodGhpcy5pc0Nvbm5lY3RlZCgpICYmIHRoaXMuc2VuZEJ1ZmZlci5sZW5ndGggPiAwKXtcbiAgICAgIHRoaXMuc2VuZEJ1ZmZlci5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKCkpXG4gICAgICB0aGlzLnNlbmRCdWZmZXIgPSBbXVxuICAgIH1cbiAgfVxuXG4gIG9uQ29ubk1lc3NhZ2UocmF3TWVzc2FnZSl7XG4gICAgdGhpcy5kZWNvZGUocmF3TWVzc2FnZS5kYXRhLCBtc2cgPT4ge1xuICAgICAgbGV0IHt0b3BpYywgZXZlbnQsIHBheWxvYWQsIHJlZiwgam9pbl9yZWZ9ID0gbXNnXG4gICAgICBpZihyZWYgJiYgcmVmID09PSB0aGlzLnBlbmRpbmdIZWFydGJlYXRSZWYpe1xuICAgICAgICB0aGlzLmNsZWFySGVhcnRiZWF0cygpXG4gICAgICAgIHRoaXMucGVuZGluZ0hlYXJ0YmVhdFJlZiA9IG51bGxcbiAgICAgICAgdGhpcy5oZWFydGJlYXRUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zZW5kSGVhcnRiZWF0KCksIHRoaXMuaGVhcnRiZWF0SW50ZXJ2YWxNcylcbiAgICAgIH1cblxuICAgICAgaWYodGhpcy5oYXNMb2dnZXIoKSkgdGhpcy5sb2coXCJyZWNlaXZlXCIsIGAke3BheWxvYWQuc3RhdHVzIHx8IFwiXCJ9ICR7dG9waWN9ICR7ZXZlbnR9ICR7cmVmICYmIFwiKFwiICsgcmVmICsgXCIpXCIgfHwgXCJcIn1gLCBwYXlsb2FkKVxuXG4gICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGFubmVscy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnN0IGNoYW5uZWwgPSB0aGlzLmNoYW5uZWxzW2ldXG4gICAgICAgIGlmKCFjaGFubmVsLmlzTWVtYmVyKHRvcGljLCBldmVudCwgcGF5bG9hZCwgam9pbl9yZWYpKXsgY29udGludWUgfVxuICAgICAgICBjaGFubmVsLnRyaWdnZXIoZXZlbnQsIHBheWxvYWQsIHJlZiwgam9pbl9yZWYpXG4gICAgICB9XG5cbiAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLnN0YXRlQ2hhbmdlQ2FsbGJhY2tzLm1lc3NhZ2UubGVuZ3RoOyBpKyspe1xuICAgICAgICBsZXQgWywgY2FsbGJhY2tdID0gdGhpcy5zdGF0ZUNoYW5nZUNhbGxiYWNrcy5tZXNzYWdlW2ldXG4gICAgICAgIGNhbGxiYWNrKG1zZylcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgbGVhdmVPcGVuVG9waWModG9waWMpe1xuICAgIGxldCBkdXBDaGFubmVsID0gdGhpcy5jaGFubmVscy5maW5kKGMgPT4gYy50b3BpYyA9PT0gdG9waWMgJiYgKGMuaXNKb2luZWQoKSB8fCBjLmlzSm9pbmluZygpKSlcbiAgICBpZihkdXBDaGFubmVsKXtcbiAgICAgIGlmKHRoaXMuaGFzTG9nZ2VyKCkpIHRoaXMubG9nKFwidHJhbnNwb3J0XCIsIGBsZWF2aW5nIGR1cGxpY2F0ZSB0b3BpYyBcIiR7dG9waWN9XCJgKVxuICAgICAgZHVwQ2hhbm5lbC5sZWF2ZSgpXG4gICAgfVxuICB9XG59XG4iLCAiZXhwb3J0IGNvbnN0IENPTlNFQ1VUSVZFX1JFTE9BRFMgPSBcImNvbnNlY3V0aXZlLXJlbG9hZHNcIlxuZXhwb3J0IGNvbnN0IE1BWF9SRUxPQURTID0gMTBcbmV4cG9ydCBjb25zdCBSRUxPQURfSklUVEVSX01JTiA9IDUwMDBcbmV4cG9ydCBjb25zdCBSRUxPQURfSklUVEVSX01BWCA9IDEwMDAwXG5leHBvcnQgY29uc3QgRkFJTFNBRkVfSklUVEVSID0gMzAwMDBcbmV4cG9ydCBjb25zdCBQSFhfRVZFTlRfQ0xBU1NFUyA9IFtcbiAgXCJwaHgtY2xpY2stbG9hZGluZ1wiLCBcInBoeC1jaGFuZ2UtbG9hZGluZ1wiLCBcInBoeC1zdWJtaXQtbG9hZGluZ1wiLFxuICBcInBoeC1rZXlkb3duLWxvYWRpbmdcIiwgXCJwaHgta2V5dXAtbG9hZGluZ1wiLCBcInBoeC1ibHVyLWxvYWRpbmdcIiwgXCJwaHgtZm9jdXMtbG9hZGluZ1wiXG5dXG5leHBvcnQgY29uc3QgUEhYX0NPTVBPTkVOVCA9IFwiZGF0YS1waHgtY29tcG9uZW50XCJcbmV4cG9ydCBjb25zdCBQSFhfTElWRV9MSU5LID0gXCJkYXRhLXBoeC1saW5rXCJcbmV4cG9ydCBjb25zdCBQSFhfVFJBQ0tfU1RBVElDID0gXCJ0cmFjay1zdGF0aWNcIlxuZXhwb3J0IGNvbnN0IFBIWF9MSU5LX1NUQVRFID0gXCJkYXRhLXBoeC1saW5rLXN0YXRlXCJcbmV4cG9ydCBjb25zdCBQSFhfUkVGID0gXCJkYXRhLXBoeC1yZWZcIlxuZXhwb3J0IGNvbnN0IFBIWF9SRUZfU1JDID0gXCJkYXRhLXBoeC1yZWYtc3JjXCJcbmV4cG9ydCBjb25zdCBQSFhfVFJBQ0tfVVBMT0FEUyA9IFwidHJhY2stdXBsb2Fkc1wiXG5leHBvcnQgY29uc3QgUEhYX1VQTE9BRF9SRUYgPSBcImRhdGEtcGh4LXVwbG9hZC1yZWZcIlxuZXhwb3J0IGNvbnN0IFBIWF9QUkVGTElHSFRFRF9SRUZTID0gXCJkYXRhLXBoeC1wcmVmbGlnaHRlZC1yZWZzXCJcbmV4cG9ydCBjb25zdCBQSFhfRE9ORV9SRUZTID0gXCJkYXRhLXBoeC1kb25lLXJlZnNcIlxuZXhwb3J0IGNvbnN0IFBIWF9EUk9QX1RBUkdFVCA9IFwiZHJvcC10YXJnZXRcIlxuZXhwb3J0IGNvbnN0IFBIWF9BQ1RJVkVfRU5UUllfUkVGUyA9IFwiZGF0YS1waHgtYWN0aXZlLXJlZnNcIlxuZXhwb3J0IGNvbnN0IFBIWF9MSVZFX0ZJTEVfVVBEQVRFRCA9IFwicGh4OmxpdmUtZmlsZTp1cGRhdGVkXCJcbmV4cG9ydCBjb25zdCBQSFhfU0tJUCA9IFwiZGF0YS1waHgtc2tpcFwiXG5leHBvcnQgY29uc3QgUEhYX1BSVU5FID0gXCJkYXRhLXBoeC1wcnVuZVwiXG5leHBvcnQgY29uc3QgUEhYX1BBR0VfTE9BRElORyA9IFwicGFnZS1sb2FkaW5nXCJcbmV4cG9ydCBjb25zdCBQSFhfQ09OTkVDVEVEX0NMQVNTID0gXCJwaHgtY29ubmVjdGVkXCJcbmV4cG9ydCBjb25zdCBQSFhfRElTQ09OTkVDVEVEX0NMQVNTID0gXCJwaHgtbG9hZGluZ1wiXG5leHBvcnQgY29uc3QgUEhYX05PX0ZFRURCQUNLX0NMQVNTID0gXCJwaHgtbm8tZmVlZGJhY2tcIlxuZXhwb3J0IGNvbnN0IFBIWF9FUlJPUl9DTEFTUyA9IFwicGh4LWVycm9yXCJcbmV4cG9ydCBjb25zdCBQSFhfUEFSRU5UX0lEID0gXCJkYXRhLXBoeC1wYXJlbnQtaWRcIlxuZXhwb3J0IGNvbnN0IFBIWF9NQUlOID0gXCJkYXRhLXBoeC1tYWluXCJcbmV4cG9ydCBjb25zdCBQSFhfUk9PVF9JRCA9IFwiZGF0YS1waHgtcm9vdC1pZFwiXG5leHBvcnQgY29uc3QgUEhYX1RSSUdHRVJfQUNUSU9OID0gXCJ0cmlnZ2VyLWFjdGlvblwiXG5leHBvcnQgY29uc3QgUEhYX0ZFRURCQUNLX0ZPUiA9IFwiZmVlZGJhY2stZm9yXCJcbmV4cG9ydCBjb25zdCBQSFhfSEFTX0ZPQ1VTRUQgPSBcInBoeC1oYXMtZm9jdXNlZFwiXG5leHBvcnQgY29uc3QgRk9DVVNBQkxFX0lOUFVUUyA9IFtcInRleHRcIiwgXCJ0ZXh0YXJlYVwiLCBcIm51bWJlclwiLCBcImVtYWlsXCIsIFwicGFzc3dvcmRcIiwgXCJzZWFyY2hcIiwgXCJ0ZWxcIiwgXCJ1cmxcIiwgXCJkYXRlXCIsIFwidGltZVwiLCBcImRhdGV0aW1lLWxvY2FsXCIsIFwiY29sb3JcIiwgXCJyYW5nZVwiXVxuZXhwb3J0IGNvbnN0IENIRUNLQUJMRV9JTlBVVFMgPSBbXCJjaGVja2JveFwiLCBcInJhZGlvXCJdXG5leHBvcnQgY29uc3QgUEhYX0hBU19TVUJNSVRURUQgPSBcInBoeC1oYXMtc3VibWl0dGVkXCJcbmV4cG9ydCBjb25zdCBQSFhfU0VTU0lPTiA9IFwiZGF0YS1waHgtc2Vzc2lvblwiXG5leHBvcnQgY29uc3QgUEhYX1ZJRVdfU0VMRUNUT1IgPSBgWyR7UEhYX1NFU1NJT059XWBcbmV4cG9ydCBjb25zdCBQSFhfU1RJQ0tZID0gXCJkYXRhLXBoeC1zdGlja3lcIlxuZXhwb3J0IGNvbnN0IFBIWF9TVEFUSUMgPSBcImRhdGEtcGh4LXN0YXRpY1wiXG5leHBvcnQgY29uc3QgUEhYX1JFQURPTkxZID0gXCJkYXRhLXBoeC1yZWFkb25seVwiXG5leHBvcnQgY29uc3QgUEhYX0RJU0FCTEVEID0gXCJkYXRhLXBoeC1kaXNhYmxlZFwiXG5leHBvcnQgY29uc3QgUEhYX0RJU0FCTEVfV0lUSCA9IFwiZGlzYWJsZS13aXRoXCJcbmV4cG9ydCBjb25zdCBQSFhfRElTQUJMRV9XSVRIX1JFU1RPUkUgPSBcImRhdGEtcGh4LWRpc2FibGUtd2l0aC1yZXN0b3JlXCJcbmV4cG9ydCBjb25zdCBQSFhfSE9PSyA9IFwiaG9va1wiXG5leHBvcnQgY29uc3QgUEhYX0RFQk9VTkNFID0gXCJkZWJvdW5jZVwiXG5leHBvcnQgY29uc3QgUEhYX1RIUk9UVExFID0gXCJ0aHJvdHRsZVwiXG5leHBvcnQgY29uc3QgUEhYX1VQREFURSA9IFwidXBkYXRlXCJcbmV4cG9ydCBjb25zdCBQSFhfU1RSRUFNID0gXCJzdHJlYW1cIlxuZXhwb3J0IGNvbnN0IFBIWF9LRVkgPSBcImtleVwiXG5leHBvcnQgY29uc3QgUEhYX1BSSVZBVEUgPSBcInBoeFByaXZhdGVcIlxuZXhwb3J0IGNvbnN0IFBIWF9BVVRPX1JFQ09WRVIgPSBcImF1dG8tcmVjb3ZlclwiXG5leHBvcnQgY29uc3QgUEhYX0xWX0RFQlVHID0gXCJwaHg6bGl2ZS1zb2NrZXQ6ZGVidWdcIlxuZXhwb3J0IGNvbnN0IFBIWF9MVl9QUk9GSUxFID0gXCJwaHg6bGl2ZS1zb2NrZXQ6cHJvZmlsaW5nXCJcbmV4cG9ydCBjb25zdCBQSFhfTFZfTEFURU5DWV9TSU0gPSBcInBoeDpsaXZlLXNvY2tldDpsYXRlbmN5LXNpbVwiXG5leHBvcnQgY29uc3QgUEhYX1BST0dSRVNTID0gXCJwcm9ncmVzc1wiXG5leHBvcnQgY29uc3QgUEhYX01PVU5URUQgPSBcIm1vdW50ZWRcIlxuZXhwb3J0IGNvbnN0IExPQURFUl9USU1FT1VUID0gMVxuZXhwb3J0IGNvbnN0IEJFRk9SRV9VTkxPQURfTE9BREVSX1RJTUVPVVQgPSAyMDBcbmV4cG9ydCBjb25zdCBCSU5ESU5HX1BSRUZJWCA9IFwicGh4LVwiXG5leHBvcnQgY29uc3QgUFVTSF9USU1FT1VUID0gMzAwMDBcbmV4cG9ydCBjb25zdCBMSU5LX0hFQURFUiA9IFwieC1yZXF1ZXN0ZWQtd2l0aFwiXG5leHBvcnQgY29uc3QgUkVTUE9OU0VfVVJMX0hFQURFUiA9IFwieC1yZXNwb25zZS11cmxcIlxuZXhwb3J0IGNvbnN0IERFQk9VTkNFX1RSSUdHRVIgPSBcImRlYm91bmNlLXRyaWdnZXJcIlxuZXhwb3J0IGNvbnN0IFRIUk9UVExFRCA9IFwidGhyb3R0bGVkXCJcbmV4cG9ydCBjb25zdCBERUJPVU5DRV9QUkVWX0tFWSA9IFwiZGVib3VuY2UtcHJldi1rZXlcIlxuZXhwb3J0IGNvbnN0IERFRkFVTFRTID0ge1xuICBkZWJvdW5jZTogMzAwLFxuICB0aHJvdHRsZTogMzAwXG59XG5cbi8vIFJlbmRlcmVkXG5leHBvcnQgY29uc3QgRFlOQU1JQ1MgPSBcImRcIlxuZXhwb3J0IGNvbnN0IFNUQVRJQyA9IFwic1wiXG5leHBvcnQgY29uc3QgQ09NUE9ORU5UUyA9IFwiY1wiXG5leHBvcnQgY29uc3QgRVZFTlRTID0gXCJlXCJcbmV4cG9ydCBjb25zdCBSRVBMWSA9IFwiclwiXG5leHBvcnQgY29uc3QgVElUTEUgPSBcInRcIlxuZXhwb3J0IGNvbnN0IFRFTVBMQVRFUyA9IFwicFwiXG5leHBvcnQgY29uc3QgU1RSRUFNID0gXCJzdHJlYW1cIlxuIiwgImltcG9ydCB7XG4gIGxvZ0Vycm9yXG59IGZyb20gXCIuL3V0aWxzXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRW50cnlVcGxvYWRlciB7XG4gIGNvbnN0cnVjdG9yKGVudHJ5LCBjaHVua1NpemUsIGxpdmVTb2NrZXQpe1xuICAgIHRoaXMubGl2ZVNvY2tldCA9IGxpdmVTb2NrZXRcbiAgICB0aGlzLmVudHJ5ID0gZW50cnlcbiAgICB0aGlzLm9mZnNldCA9IDBcbiAgICB0aGlzLmNodW5rU2l6ZSA9IGNodW5rU2l6ZVxuICAgIHRoaXMuY2h1bmtUaW1lciA9IG51bGxcbiAgICB0aGlzLnVwbG9hZENoYW5uZWwgPSBsaXZlU29ja2V0LmNoYW5uZWwoYGx2dToke2VudHJ5LnJlZn1gLCB7dG9rZW46IGVudHJ5Lm1ldGFkYXRhKCl9KVxuICB9XG5cbiAgZXJyb3IocmVhc29uKXtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5jaHVua1RpbWVyKVxuICAgIHRoaXMudXBsb2FkQ2hhbm5lbC5sZWF2ZSgpXG4gICAgdGhpcy5lbnRyeS5lcnJvcihyZWFzb24pXG4gIH1cblxuICB1cGxvYWQoKXtcbiAgICB0aGlzLnVwbG9hZENoYW5uZWwub25FcnJvcihyZWFzb24gPT4gdGhpcy5lcnJvcihyZWFzb24pKVxuICAgIHRoaXMudXBsb2FkQ2hhbm5lbC5qb2luKClcbiAgICAgIC5yZWNlaXZlKFwib2tcIiwgX2RhdGEgPT4gdGhpcy5yZWFkTmV4dENodW5rKCkpXG4gICAgICAucmVjZWl2ZShcImVycm9yXCIsIHJlYXNvbiA9PiB0aGlzLmVycm9yKHJlYXNvbikpXG4gIH1cblxuICBpc0RvbmUoKXsgcmV0dXJuIHRoaXMub2Zmc2V0ID49IHRoaXMuZW50cnkuZmlsZS5zaXplIH1cblxuICByZWFkTmV4dENodW5rKCl7XG4gICAgbGV0IHJlYWRlciA9IG5ldyB3aW5kb3cuRmlsZVJlYWRlcigpXG4gICAgbGV0IGJsb2IgPSB0aGlzLmVudHJ5LmZpbGUuc2xpY2UodGhpcy5vZmZzZXQsIHRoaXMuY2h1bmtTaXplICsgdGhpcy5vZmZzZXQpXG4gICAgcmVhZGVyLm9ubG9hZCA9IChlKSA9PiB7XG4gICAgICBpZihlLnRhcmdldC5lcnJvciA9PT0gbnVsbCl7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IGUudGFyZ2V0LnJlc3VsdC5ieXRlTGVuZ3RoXG4gICAgICAgIHRoaXMucHVzaENodW5rKGUudGFyZ2V0LnJlc3VsdClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBsb2dFcnJvcihcIlJlYWQgZXJyb3I6IFwiICsgZS50YXJnZXQuZXJyb3IpXG4gICAgICB9XG4gICAgfVxuICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKVxuICB9XG5cbiAgcHVzaENodW5rKGNodW5rKXtcbiAgICBpZighdGhpcy51cGxvYWRDaGFubmVsLmlzSm9pbmVkKCkpeyByZXR1cm4gfVxuICAgIHRoaXMudXBsb2FkQ2hhbm5lbC5wdXNoKFwiY2h1bmtcIiwgY2h1bmspXG4gICAgICAucmVjZWl2ZShcIm9rXCIsICgpID0+IHtcbiAgICAgICAgdGhpcy5lbnRyeS5wcm9ncmVzcygodGhpcy5vZmZzZXQgLyB0aGlzLmVudHJ5LmZpbGUuc2l6ZSkgKiAxMDApXG4gICAgICAgIGlmKCF0aGlzLmlzRG9uZSgpKXtcbiAgICAgICAgICB0aGlzLmNodW5rVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMucmVhZE5leHRDaHVuaygpLCB0aGlzLmxpdmVTb2NrZXQuZ2V0TGF0ZW5jeVNpbSgpIHx8IDApXG4gICAgICAgIH1cbiAgICAgIH0pXG4gIH1cbn1cbiIsICJpbXBvcnQge1xuICBQSFhfVklFV19TRUxFQ1RPUlxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQgRW50cnlVcGxvYWRlciBmcm9tIFwiLi9lbnRyeV91cGxvYWRlclwiXG5cbmV4cG9ydCBsZXQgbG9nRXJyb3IgPSAobXNnLCBvYmopID0+IGNvbnNvbGUuZXJyb3IgJiYgY29uc29sZS5lcnJvcihtc2csIG9iailcblxuZXhwb3J0IGxldCBpc0NpZCA9IChjaWQpID0+IHtcbiAgbGV0IHR5cGUgPSB0eXBlb2YoY2lkKVxuICByZXR1cm4gdHlwZSA9PT0gXCJudW1iZXJcIiB8fCAodHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAvXigwfFsxLTldXFxkKikkLy50ZXN0KGNpZCkpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3REdXBsaWNhdGVJZHMoKXtcbiAgbGV0IGlkcyA9IG5ldyBTZXQoKVxuICBsZXQgZWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiKltpZF1cIilcbiAgZm9yKGxldCBpID0gMCwgbGVuID0gZWxlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspe1xuICAgIGlmKGlkcy5oYXMoZWxlbXNbaV0uaWQpKXtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYE11bHRpcGxlIElEcyBkZXRlY3RlZDogJHtlbGVtc1tpXS5pZH0uIEVuc3VyZSB1bmlxdWUgZWxlbWVudCBpZHMuYClcbiAgICB9IGVsc2Uge1xuICAgICAgaWRzLmFkZChlbGVtc1tpXS5pZClcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGxldCBkZWJ1ZyA9ICh2aWV3LCBraW5kLCBtc2csIG9iaikgPT4ge1xuICBpZih2aWV3LmxpdmVTb2NrZXQuaXNEZWJ1Z0VuYWJsZWQoKSl7XG4gICAgY29uc29sZS5sb2coYCR7dmlldy5pZH0gJHtraW5kfTogJHttc2d9IC0gYCwgb2JqKVxuICB9XG59XG5cbi8vIHdyYXBzIHZhbHVlIGluIGNsb3N1cmUgb3IgcmV0dXJucyBjbG9zdXJlXG5leHBvcnQgbGV0IGNsb3N1cmUgPSAodmFsKSA9PiB0eXBlb2YgdmFsID09PSBcImZ1bmN0aW9uXCIgPyB2YWwgOiBmdW5jdGlvbiAoKXsgcmV0dXJuIHZhbCB9XG5cbmV4cG9ydCBsZXQgY2xvbmUgPSAob2JqKSA9PiB7IHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpIH1cblxuZXhwb3J0IGxldCBjbG9zZXN0UGh4QmluZGluZyA9IChlbCwgYmluZGluZywgYm9yZGVyRWwpID0+IHtcbiAgZG8ge1xuICAgIGlmKGVsLm1hdGNoZXMoYFske2JpbmRpbmd9XWApICYmICFlbC5kaXNhYmxlZCl7IHJldHVybiBlbCB9XG4gICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50IHx8IGVsLnBhcmVudE5vZGVcbiAgfSB3aGlsZShlbCAhPT0gbnVsbCAmJiBlbC5ub2RlVHlwZSA9PT0gMSAmJiAhKChib3JkZXJFbCAmJiBib3JkZXJFbC5pc1NhbWVOb2RlKGVsKSkgfHwgZWwubWF0Y2hlcyhQSFhfVklFV19TRUxFQ1RPUikpKVxuICByZXR1cm4gbnVsbFxufVxuXG5leHBvcnQgbGV0IGlzT2JqZWN0ID0gKG9iaikgPT4ge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgJiYgIShvYmogaW5zdGFuY2VvZiBBcnJheSlcbn1cblxuZXhwb3J0IGxldCBpc0VxdWFsT2JqID0gKG9iajEsIG9iajIpID0+IEpTT04uc3RyaW5naWZ5KG9iajEpID09PSBKU09OLnN0cmluZ2lmeShvYmoyKVxuXG5leHBvcnQgbGV0IGlzRW1wdHkgPSAob2JqKSA9PiB7XG4gIGZvcihsZXQgeCBpbiBvYmopeyByZXR1cm4gZmFsc2UgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5leHBvcnQgbGV0IG1heWJlID0gKGVsLCBjYWxsYmFjaykgPT4gZWwgJiYgY2FsbGJhY2soZWwpXG5cbmV4cG9ydCBsZXQgY2hhbm5lbFVwbG9hZGVyID0gZnVuY3Rpb24gKGVudHJpZXMsIG9uRXJyb3IsIHJlc3AsIGxpdmVTb2NrZXQpe1xuICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xuICAgIGxldCBlbnRyeVVwbG9hZGVyID0gbmV3IEVudHJ5VXBsb2FkZXIoZW50cnksIHJlc3AuY29uZmlnLmNodW5rX3NpemUsIGxpdmVTb2NrZXQpXG4gICAgZW50cnlVcGxvYWRlci51cGxvYWQoKVxuICB9KVxufVxuIiwgImxldCBCcm93c2VyID0ge1xuICBjYW5QdXNoU3RhdGUoKXsgcmV0dXJuICh0eXBlb2YgKGhpc3RvcnkucHVzaFN0YXRlKSAhPT0gXCJ1bmRlZmluZWRcIikgfSxcblxuICBkcm9wTG9jYWwobG9jYWxTdG9yYWdlLCBuYW1lc3BhY2UsIHN1YmtleSl7XG4gICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKHRoaXMubG9jYWxLZXkobmFtZXNwYWNlLCBzdWJrZXkpKVxuICB9LFxuXG4gIHVwZGF0ZUxvY2FsKGxvY2FsU3RvcmFnZSwgbmFtZXNwYWNlLCBzdWJrZXksIGluaXRpYWwsIGZ1bmMpe1xuICAgIGxldCBjdXJyZW50ID0gdGhpcy5nZXRMb2NhbChsb2NhbFN0b3JhZ2UsIG5hbWVzcGFjZSwgc3Via2V5KVxuICAgIGxldCBrZXkgPSB0aGlzLmxvY2FsS2V5KG5hbWVzcGFjZSwgc3Via2V5KVxuICAgIGxldCBuZXdWYWwgPSBjdXJyZW50ID09PSBudWxsID8gaW5pdGlhbCA6IGZ1bmMoY3VycmVudClcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KG5ld1ZhbCkpXG4gICAgcmV0dXJuIG5ld1ZhbFxuICB9LFxuXG4gIGdldExvY2FsKGxvY2FsU3RvcmFnZSwgbmFtZXNwYWNlLCBzdWJrZXkpe1xuICAgIHJldHVybiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMubG9jYWxLZXkobmFtZXNwYWNlLCBzdWJrZXkpKSlcbiAgfSxcblxuICB1cGRhdGVDdXJyZW50U3RhdGUoY2FsbGJhY2spe1xuICAgIGlmKCF0aGlzLmNhblB1c2hTdGF0ZSgpKXsgcmV0dXJuIH1cbiAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZShjYWxsYmFjayhoaXN0b3J5LnN0YXRlIHx8IHt9KSwgXCJcIiwgd2luZG93LmxvY2F0aW9uLmhyZWYpXG4gIH0sXG5cbiAgcHVzaFN0YXRlKGtpbmQsIG1ldGEsIHRvKXtcbiAgICBpZih0aGlzLmNhblB1c2hTdGF0ZSgpKXtcbiAgICAgIGlmKHRvICE9PSB3aW5kb3cubG9jYXRpb24uaHJlZil7XG4gICAgICAgIGlmKG1ldGEudHlwZSA9PSBcInJlZGlyZWN0XCIgJiYgbWV0YS5zY3JvbGwpe1xuICAgICAgICAgIC8vIElmIHdlJ3JlIHJlZGlyZWN0aW5nIHN0b3JlIHRoZSBjdXJyZW50IHNjcm9sbFkgZm9yIHRoZSBjdXJyZW50IGhpc3Rvcnkgc3RhdGUuXG4gICAgICAgICAgbGV0IGN1cnJlbnRTdGF0ZSA9IGhpc3Rvcnkuc3RhdGUgfHwge31cbiAgICAgICAgICBjdXJyZW50U3RhdGUuc2Nyb2xsID0gbWV0YS5zY3JvbGxcbiAgICAgICAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZShjdXJyZW50U3RhdGUsIFwiXCIsIHdpbmRvdy5sb2NhdGlvbi5ocmVmKVxuICAgICAgICB9XG5cbiAgICAgICAgZGVsZXRlIG1ldGEuc2Nyb2xsIC8vIE9ubHkgc3RvcmUgdGhlIHNjcm9sbCBpbiB0aGUgcmVkaXJlY3QgY2FzZS5cbiAgICAgICAgaGlzdG9yeVtraW5kICsgXCJTdGF0ZVwiXShtZXRhLCBcIlwiLCB0byB8fCBudWxsKSAvLyBJRSB3aWxsIGNvZXJjZSB1bmRlZmluZWQgdG8gc3RyaW5nXG4gICAgICAgIGxldCBoYXNoRWwgPSB0aGlzLmdldEhhc2hUYXJnZXRFbCh3aW5kb3cubG9jYXRpb24uaGFzaClcblxuICAgICAgICBpZihoYXNoRWwpe1xuICAgICAgICAgIGhhc2hFbC5zY3JvbGxJbnRvVmlldygpXG4gICAgICAgIH0gZWxzZSBpZihtZXRhLnR5cGUgPT09IFwicmVkaXJlY3RcIil7XG4gICAgICAgICAgd2luZG93LnNjcm9sbCgwLCAwKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVkaXJlY3QodG8pXG4gICAgfVxuICB9LFxuXG4gIHNldENvb2tpZShuYW1lLCB2YWx1ZSl7XG4gICAgZG9jdW1lbnQuY29va2llID0gYCR7bmFtZX09JHt2YWx1ZX1gXG4gIH0sXG5cbiAgZ2V0Q29va2llKG5hbWUpe1xuICAgIHJldHVybiBkb2N1bWVudC5jb29raWUucmVwbGFjZShuZXcgUmVnRXhwKGAoPzooPzpefC4qO1xccyopJHtuYW1lfVxccypcXD1cXHMqKFteO10qKS4qJCl8Xi4qJGApLCBcIiQxXCIpXG4gIH0sXG5cbiAgcmVkaXJlY3QodG9VUkwsIGZsYXNoKXtcbiAgICBpZihmbGFzaCl7IEJyb3dzZXIuc2V0Q29va2llKFwiX19waG9lbml4X2ZsYXNoX19cIiwgZmxhc2ggKyBcIjsgbWF4LWFnZT02MDAwMDsgcGF0aD0vXCIpIH1cbiAgICB3aW5kb3cubG9jYXRpb24gPSB0b1VSTFxuICB9LFxuXG4gIGxvY2FsS2V5KG5hbWVzcGFjZSwgc3Via2V5KXsgcmV0dXJuIGAke25hbWVzcGFjZX0tJHtzdWJrZXl9YCB9LFxuXG4gIGdldEhhc2hUYXJnZXRFbChtYXliZUhhc2gpe1xuICAgIGxldCBoYXNoID0gbWF5YmVIYXNoLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDEpXG4gICAgaWYoaGFzaCA9PT0gXCJcIil7IHJldHVybiB9XG4gICAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGhhc2gpIHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYGFbbmFtZT1cIiR7aGFzaH1cIl1gKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJyb3dzZXJcbiIsICJpbXBvcnQge1xuICBDSEVDS0FCTEVfSU5QVVRTLFxuICBERUJPVU5DRV9QUkVWX0tFWSxcbiAgREVCT1VOQ0VfVFJJR0dFUixcbiAgRk9DVVNBQkxFX0lOUFVUUyxcbiAgUEhYX0NPTVBPTkVOVCxcbiAgUEhYX0VWRU5UX0NMQVNTRVMsXG4gIFBIWF9IQVNfRk9DVVNFRCxcbiAgUEhYX0hBU19TVUJNSVRURUQsXG4gIFBIWF9NQUlOLFxuICBQSFhfTk9fRkVFREJBQ0tfQ0xBU1MsXG4gIFBIWF9QQVJFTlRfSUQsXG4gIFBIWF9QUklWQVRFLFxuICBQSFhfUkVGLFxuICBQSFhfUkVGX1NSQyxcbiAgUEhYX1JPT1RfSUQsXG4gIFBIWF9TRVNTSU9OLFxuICBQSFhfU1RBVElDLFxuICBQSFhfVVBMT0FEX1JFRixcbiAgUEhYX1ZJRVdfU0VMRUNUT1IsXG4gIFBIWF9TVElDS1ksXG4gIFRIUk9UVExFRFxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQge1xuICBsb2dFcnJvclxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmxldCBET00gPSB7XG4gIGJ5SWQoaWQpeyByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpIHx8IGxvZ0Vycm9yKGBubyBpZCBmb3VuZCBmb3IgJHtpZH1gKSB9LFxuXG4gIHJlbW92ZUNsYXNzKGVsLCBjbGFzc05hbWUpe1xuICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKVxuICAgIGlmKGVsLmNsYXNzTGlzdC5sZW5ndGggPT09IDApeyBlbC5yZW1vdmVBdHRyaWJ1dGUoXCJjbGFzc1wiKSB9XG4gIH0sXG5cbiAgYWxsKG5vZGUsIHF1ZXJ5LCBjYWxsYmFjayl7XG4gICAgaWYoIW5vZGUpeyByZXR1cm4gW10gfVxuICAgIGxldCBhcnJheSA9IEFycmF5LmZyb20obm9kZS5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJ5KSlcbiAgICByZXR1cm4gY2FsbGJhY2sgPyBhcnJheS5mb3JFYWNoKGNhbGxiYWNrKSA6IGFycmF5XG4gIH0sXG5cbiAgY2hpbGROb2RlTGVuZ3RoKGh0bWwpe1xuICAgIGxldCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKVxuICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IGh0bWxcbiAgICByZXR1cm4gdGVtcGxhdGUuY29udGVudC5jaGlsZEVsZW1lbnRDb3VudFxuICB9LFxuXG4gIGlzVXBsb2FkSW5wdXQoZWwpeyByZXR1cm4gZWwudHlwZSA9PT0gXCJmaWxlXCIgJiYgZWwuZ2V0QXR0cmlidXRlKFBIWF9VUExPQURfUkVGKSAhPT0gbnVsbCB9LFxuXG4gIGZpbmRVcGxvYWRJbnB1dHMobm9kZSl7IHJldHVybiB0aGlzLmFsbChub2RlLCBgaW5wdXRbdHlwZT1cImZpbGVcIl1bJHtQSFhfVVBMT0FEX1JFRn1dYCkgfSxcblxuICBmaW5kQ29tcG9uZW50Tm9kZUxpc3Qobm9kZSwgY2lkKXtcbiAgICByZXR1cm4gdGhpcy5maWx0ZXJXaXRoaW5TYW1lTGl2ZVZpZXcodGhpcy5hbGwobm9kZSwgYFske1BIWF9DT01QT05FTlR9PVwiJHtjaWR9XCJdYCksIG5vZGUpXG4gIH0sXG5cbiAgaXNQaHhEZXN0cm95ZWQobm9kZSl7XG4gICAgcmV0dXJuIG5vZGUuaWQgJiYgRE9NLnByaXZhdGUobm9kZSwgXCJkZXN0cm95ZWRcIikgPyB0cnVlIDogZmFsc2VcbiAgfSxcblxuICB3YW50c05ld1RhYihlKXtcbiAgICBsZXQgd2FudHNOZXdUYWIgPSBlLmN0cmxLZXkgfHwgZS5zaGlmdEtleSB8fCBlLm1ldGFLZXkgfHwgKGUuYnV0dG9uICYmIGUuYnV0dG9uID09PSAxKVxuICAgIHJldHVybiB3YW50c05ld1RhYiB8fCBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJ0YXJnZXRcIikgPT09IFwiX2JsYW5rXCJcbiAgfSxcblxuICBpc1VubG9hZGFibGVGb3JtU3VibWl0KGUpe1xuICAgIHJldHVybiAhZS5kZWZhdWx0UHJldmVudGVkICYmICF0aGlzLndhbnRzTmV3VGFiKGUpXG4gIH0sXG5cbiAgaXNOZXdQYWdlSHJlZihocmVmLCBjdXJyZW50TG9jYXRpb24pe1xuICAgIGxldCB1cmxcbiAgICB0cnkge1xuICAgICAgdXJsID0gbmV3IFVSTChocmVmKVxuICAgIH0gY2F0Y2goZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdXJsID0gbmV3IFVSTChocmVmLCBjdXJyZW50TG9jYXRpb24pXG4gICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgLy8gYmFkIFVSTCwgZmFsbGJhY2sgdG8gbGV0IGJyb3dzZXIgdHJ5IGl0IGFzIGV4dGVybmFsXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYodXJsLmhvc3QgPT09IGN1cnJlbnRMb2NhdGlvbi5ob3N0ICYmIHVybC5wcm90b2NvbCA9PT0gY3VycmVudExvY2F0aW9uLnByb3RvY29sKXtcbiAgICAgIGlmKHVybC5wYXRobmFtZSA9PT0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lICYmIHVybC5zZWFyY2ggPT09IGN1cnJlbnRMb2NhdGlvbi5zZWFyY2gpe1xuICAgICAgICByZXR1cm4gdXJsLmhhc2ggPT09IFwiXCIgJiYgIXVybC5ocmVmLmVuZHNXaXRoKFwiI1wiKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9LFxuXG4gIG1hcmtQaHhDaGlsZERlc3Ryb3llZChlbCl7XG4gICAgaWYodGhpcy5pc1BoeENoaWxkKGVsKSl7IGVsLnNldEF0dHJpYnV0ZShQSFhfU0VTU0lPTiwgXCJcIikgfVxuICAgIHRoaXMucHV0UHJpdmF0ZShlbCwgXCJkZXN0cm95ZWRcIiwgdHJ1ZSlcbiAgfSxcblxuICBmaW5kUGh4Q2hpbGRyZW5JbkZyYWdtZW50KGh0bWwsIHBhcmVudElkKXtcbiAgICBsZXQgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIilcbiAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBodG1sXG4gICAgcmV0dXJuIHRoaXMuZmluZFBoeENoaWxkcmVuKHRlbXBsYXRlLmNvbnRlbnQsIHBhcmVudElkKVxuICB9LFxuXG4gIGlzSWdub3JlZChlbCwgcGh4VXBkYXRlKXtcbiAgICByZXR1cm4gKGVsLmdldEF0dHJpYnV0ZShwaHhVcGRhdGUpIHx8IGVsLmdldEF0dHJpYnV0ZShcImRhdGEtcGh4LXVwZGF0ZVwiKSkgPT09IFwiaWdub3JlXCJcbiAgfSxcblxuICBpc1BoeFVwZGF0ZShlbCwgcGh4VXBkYXRlLCB1cGRhdGVUeXBlcyl7XG4gICAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZSAmJiB1cGRhdGVUeXBlcy5pbmRleE9mKGVsLmdldEF0dHJpYnV0ZShwaHhVcGRhdGUpKSA+PSAwXG4gIH0sXG5cbiAgZmluZFBoeFN0aWNreShlbCl7IHJldHVybiB0aGlzLmFsbChlbCwgYFske1BIWF9TVElDS1l9XWApIH0sXG5cbiAgZmluZFBoeENoaWxkcmVuKGVsLCBwYXJlbnRJZCl7XG4gICAgcmV0dXJuIHRoaXMuYWxsKGVsLCBgJHtQSFhfVklFV19TRUxFQ1RPUn1bJHtQSFhfUEFSRU5UX0lEfT1cIiR7cGFyZW50SWR9XCJdYClcbiAgfSxcblxuICBmaW5kUGFyZW50Q0lEcyhub2RlLCBjaWRzKXtcbiAgICBsZXQgaW5pdGlhbCA9IG5ldyBTZXQoY2lkcylcbiAgICBsZXQgcGFyZW50Q2lkcyA9XG4gICAgICBjaWRzLnJlZHVjZSgoYWNjLCBjaWQpID0+IHtcbiAgICAgICAgbGV0IHNlbGVjdG9yID0gYFske1BIWF9DT01QT05FTlR9PVwiJHtjaWR9XCJdIFske1BIWF9DT01QT05FTlR9XWBcblxuICAgICAgICB0aGlzLmZpbHRlcldpdGhpblNhbWVMaXZlVmlldyh0aGlzLmFsbChub2RlLCBzZWxlY3RvciksIG5vZGUpXG4gICAgICAgICAgLm1hcChlbCA9PiBwYXJzZUludChlbC5nZXRBdHRyaWJ1dGUoUEhYX0NPTVBPTkVOVCkpKVxuICAgICAgICAgIC5mb3JFYWNoKGNoaWxkQ0lEID0+IGFjYy5kZWxldGUoY2hpbGRDSUQpKVxuXG4gICAgICAgIHJldHVybiBhY2NcbiAgICAgIH0sIGluaXRpYWwpXG5cbiAgICByZXR1cm4gcGFyZW50Q2lkcy5zaXplID09PSAwID8gbmV3IFNldChjaWRzKSA6IHBhcmVudENpZHNcbiAgfSxcblxuICBmaWx0ZXJXaXRoaW5TYW1lTGl2ZVZpZXcobm9kZXMsIHBhcmVudCl7XG4gICAgaWYocGFyZW50LnF1ZXJ5U2VsZWN0b3IoUEhYX1ZJRVdfU0VMRUNUT1IpKXtcbiAgICAgIHJldHVybiBub2Rlcy5maWx0ZXIoZWwgPT4gdGhpcy53aXRoaW5TYW1lTGl2ZVZpZXcoZWwsIHBhcmVudCkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBub2Rlc1xuICAgIH1cbiAgfSxcblxuICB3aXRoaW5TYW1lTGl2ZVZpZXcobm9kZSwgcGFyZW50KXtcbiAgICB3aGlsZShub2RlID0gbm9kZS5wYXJlbnROb2RlKXtcbiAgICAgIGlmKG5vZGUuaXNTYW1lTm9kZShwYXJlbnQpKXsgcmV0dXJuIHRydWUgfVxuICAgICAgaWYobm9kZS5nZXRBdHRyaWJ1dGUoUEhYX1NFU1NJT04pICE9PSBudWxsKXsgcmV0dXJuIGZhbHNlIH1cbiAgICB9XG4gIH0sXG5cbiAgcHJpdmF0ZShlbCwga2V5KXsgcmV0dXJuIGVsW1BIWF9QUklWQVRFXSAmJiBlbFtQSFhfUFJJVkFURV1ba2V5XSB9LFxuXG4gIGRlbGV0ZVByaXZhdGUoZWwsIGtleSl7IGVsW1BIWF9QUklWQVRFXSAmJiBkZWxldGUgKGVsW1BIWF9QUklWQVRFXVtrZXldKSB9LFxuXG4gIHB1dFByaXZhdGUoZWwsIGtleSwgdmFsdWUpe1xuICAgIGlmKCFlbFtQSFhfUFJJVkFURV0peyBlbFtQSFhfUFJJVkFURV0gPSB7fSB9XG4gICAgZWxbUEhYX1BSSVZBVEVdW2tleV0gPSB2YWx1ZVxuICB9LFxuXG4gIHVwZGF0ZVByaXZhdGUoZWwsIGtleSwgZGVmYXVsdFZhbCwgdXBkYXRlRnVuYyl7XG4gICAgbGV0IGV4aXN0aW5nID0gdGhpcy5wcml2YXRlKGVsLCBrZXkpXG4gICAgaWYoZXhpc3RpbmcgPT09IHVuZGVmaW5lZCl7XG4gICAgICB0aGlzLnB1dFByaXZhdGUoZWwsIGtleSwgdXBkYXRlRnVuYyhkZWZhdWx0VmFsKSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wdXRQcml2YXRlKGVsLCBrZXksIHVwZGF0ZUZ1bmMoZXhpc3RpbmcpKVxuICAgIH1cbiAgfSxcblxuICBjb3B5UHJpdmF0ZXModGFyZ2V0LCBzb3VyY2Upe1xuICAgIGlmKHNvdXJjZVtQSFhfUFJJVkFURV0pe1xuICAgICAgdGFyZ2V0W1BIWF9QUklWQVRFXSA9IHNvdXJjZVtQSFhfUFJJVkFURV1cbiAgICB9XG4gIH0sXG5cbiAgcHV0VGl0bGUoc3RyKXtcbiAgICBsZXQgdGl0bGVFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJ0aXRsZVwiKVxuICAgIGlmKHRpdGxlRWwpe1xuICAgICAgbGV0IHtwcmVmaXgsIHN1ZmZpeH0gPSB0aXRsZUVsLmRhdGFzZXRcbiAgICAgIGRvY3VtZW50LnRpdGxlID0gYCR7cHJlZml4IHx8IFwiXCJ9JHtzdHJ9JHtzdWZmaXggfHwgXCJcIn1gXG4gICAgfSBlbHNlIHtcbiAgICAgIGRvY3VtZW50LnRpdGxlID0gc3RyXG4gICAgfVxuICB9LFxuXG4gIGRlYm91bmNlKGVsLCBldmVudCwgcGh4RGVib3VuY2UsIGRlZmF1bHREZWJvdW5jZSwgcGh4VGhyb3R0bGUsIGRlZmF1bHRUaHJvdHRsZSwgYXN5bmNGaWx0ZXIsIGNhbGxiYWNrKXtcbiAgICBsZXQgZGVib3VuY2UgPSBlbC5nZXRBdHRyaWJ1dGUocGh4RGVib3VuY2UpXG4gICAgbGV0IHRocm90dGxlID0gZWwuZ2V0QXR0cmlidXRlKHBoeFRocm90dGxlKVxuICAgIGlmKGRlYm91bmNlID09PSBcIlwiKXsgZGVib3VuY2UgPSBkZWZhdWx0RGVib3VuY2UgfVxuICAgIGlmKHRocm90dGxlID09PSBcIlwiKXsgdGhyb3R0bGUgPSBkZWZhdWx0VGhyb3R0bGUgfVxuICAgIGxldCB2YWx1ZSA9IGRlYm91bmNlIHx8IHRocm90dGxlXG4gICAgc3dpdGNoKHZhbHVlKXtcbiAgICAgIGNhc2UgbnVsbDogcmV0dXJuIGNhbGxiYWNrKClcblxuICAgICAgY2FzZSBcImJsdXJcIjpcbiAgICAgICAgaWYodGhpcy5vbmNlKGVsLCBcImRlYm91bmNlLWJsdXJcIikpe1xuICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsICgpID0+IGNhbGxiYWNrKCkpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGxldCB0aW1lb3V0ID0gcGFyc2VJbnQodmFsdWUpXG4gICAgICAgIGxldCB0cmlnZ2VyID0gKCkgPT4gdGhyb3R0bGUgPyB0aGlzLmRlbGV0ZVByaXZhdGUoZWwsIFRIUk9UVExFRCkgOiBjYWxsYmFjaygpXG4gICAgICAgIGxldCBjdXJyZW50Q3ljbGUgPSB0aGlzLmluY0N5Y2xlKGVsLCBERUJPVU5DRV9UUklHR0VSLCB0cmlnZ2VyKVxuICAgICAgICBpZihpc05hTih0aW1lb3V0KSl7IHJldHVybiBsb2dFcnJvcihgaW52YWxpZCB0aHJvdHRsZS9kZWJvdW5jZSB2YWx1ZTogJHt2YWx1ZX1gKSB9XG4gICAgICAgIGlmKHRocm90dGxlKXtcbiAgICAgICAgICBsZXQgbmV3S2V5RG93biA9IGZhbHNlXG4gICAgICAgICAgaWYoZXZlbnQudHlwZSA9PT0gXCJrZXlkb3duXCIpe1xuICAgICAgICAgICAgbGV0IHByZXZLZXkgPSB0aGlzLnByaXZhdGUoZWwsIERFQk9VTkNFX1BSRVZfS0VZKVxuICAgICAgICAgICAgdGhpcy5wdXRQcml2YXRlKGVsLCBERUJPVU5DRV9QUkVWX0tFWSwgZXZlbnQua2V5KVxuICAgICAgICAgICAgbmV3S2V5RG93biA9IHByZXZLZXkgIT09IGV2ZW50LmtleVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmKCFuZXdLZXlEb3duICYmIHRoaXMucHJpdmF0ZShlbCwgVEhST1RUTEVEKSl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FsbGJhY2soKVxuICAgICAgICAgICAgdGhpcy5wdXRQcml2YXRlKGVsLCBUSFJPVFRMRUQsIHRydWUpXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgaWYoYXN5bmNGaWx0ZXIoKSl7IHRoaXMudHJpZ2dlckN5Y2xlKGVsLCBERUJPVU5DRV9UUklHR0VSKSB9XG4gICAgICAgICAgICB9LCB0aW1lb3V0KVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGlmKGFzeW5jRmlsdGVyKCkpeyB0aGlzLnRyaWdnZXJDeWNsZShlbCwgREVCT1VOQ0VfVFJJR0dFUiwgY3VycmVudEN5Y2xlKSB9XG4gICAgICAgICAgfSwgdGltZW91dClcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBmb3JtID0gZWwuZm9ybVxuICAgICAgICBpZihmb3JtICYmIHRoaXMub25jZShmb3JtLCBcImJpbmQtZGVib3VuY2VcIikpe1xuICAgICAgICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBBcnJheS5mcm9tKChuZXcgRm9ybURhdGEoZm9ybSkpLmVudHJpZXMoKSwgKFtuYW1lXSkgPT4ge1xuICAgICAgICAgICAgICBsZXQgaW5wdXQgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoYFtuYW1lPVwiJHtuYW1lfVwiXWApXG4gICAgICAgICAgICAgIHRoaXMuaW5jQ3ljbGUoaW5wdXQsIERFQk9VTkNFX1RSSUdHRVIpXG4gICAgICAgICAgICAgIHRoaXMuZGVsZXRlUHJpdmF0ZShpbnB1dCwgVEhST1RUTEVEKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIGlmKHRoaXMub25jZShlbCwgXCJiaW5kLWRlYm91bmNlXCIpKXtcbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCAoKSA9PiB0aGlzLnRyaWdnZXJDeWNsZShlbCwgREVCT1VOQ0VfVFJJR0dFUikpXG4gICAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgdHJpZ2dlckN5Y2xlKGVsLCBrZXksIGN1cnJlbnRDeWNsZSl7XG4gICAgbGV0IFtjeWNsZSwgdHJpZ2dlcl0gPSB0aGlzLnByaXZhdGUoZWwsIGtleSlcbiAgICBpZighY3VycmVudEN5Y2xlKXsgY3VycmVudEN5Y2xlID0gY3ljbGUgfVxuICAgIGlmKGN1cnJlbnRDeWNsZSA9PT0gY3ljbGUpe1xuICAgICAgdGhpcy5pbmNDeWNsZShlbCwga2V5KVxuICAgICAgdHJpZ2dlcigpXG4gICAgfVxuICB9LFxuXG4gIG9uY2UoZWwsIGtleSl7XG4gICAgaWYodGhpcy5wcml2YXRlKGVsLCBrZXkpID09PSB0cnVlKXsgcmV0dXJuIGZhbHNlIH1cbiAgICB0aGlzLnB1dFByaXZhdGUoZWwsIGtleSwgdHJ1ZSlcbiAgICByZXR1cm4gdHJ1ZVxuICB9LFxuXG4gIGluY0N5Y2xlKGVsLCBrZXksIHRyaWdnZXIgPSBmdW5jdGlvbiAoKXsgfSl7XG4gICAgbGV0IFtjdXJyZW50Q3ljbGVdID0gdGhpcy5wcml2YXRlKGVsLCBrZXkpIHx8IFswLCB0cmlnZ2VyXVxuICAgIGN1cnJlbnRDeWNsZSsrXG4gICAgdGhpcy5wdXRQcml2YXRlKGVsLCBrZXksIFtjdXJyZW50Q3ljbGUsIHRyaWdnZXJdKVxuICAgIHJldHVybiBjdXJyZW50Q3ljbGVcbiAgfSxcblxuICBkaXNjYXJkRXJyb3IoY29udGFpbmVyLCBlbCwgcGh4RmVlZGJhY2tGb3Ipe1xuICAgIGxldCBmaWVsZCA9IGVsLmdldEF0dHJpYnV0ZSAmJiBlbC5nZXRBdHRyaWJ1dGUocGh4RmVlZGJhY2tGb3IpXG4gICAgLy8gVE9ETzogUmVtb3ZlIGlkIGxvb2t1cCBhZnRlciB3ZSB1cGRhdGUgUGhvZW5peCB0byB1c2UgaW5wdXRfbmFtZSBpbnN0ZWFkIG9mIGlucHV0X2lkXG4gICAgbGV0IGlucHV0ID0gZmllbGQgJiYgY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoYFtpZD1cIiR7ZmllbGR9XCJdLCBbbmFtZT1cIiR7ZmllbGR9XCJdLCBbbmFtZT1cIiR7ZmllbGR9W11cIl1gKVxuICAgIGlmKCFpbnB1dCl7IHJldHVybiB9XG5cbiAgICBpZighKHRoaXMucHJpdmF0ZShpbnB1dCwgUEhYX0hBU19GT0NVU0VEKSB8fCB0aGlzLnByaXZhdGUoaW5wdXQsIFBIWF9IQVNfU1VCTUlUVEVEKSkpe1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZChQSFhfTk9fRkVFREJBQ0tfQ0xBU1MpXG4gICAgfVxuICB9LFxuXG4gIHJlc2V0Rm9ybShmb3JtLCBwaHhGZWVkYmFja0Zvcil7XG4gICAgQXJyYXkuZnJvbShmb3JtLmVsZW1lbnRzKS5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgIGxldCBxdWVyeSA9IGBbJHtwaHhGZWVkYmFja0Zvcn09XCIke2lucHV0LmlkfVwiXSxcbiAgICAgICAgICAgICAgICAgICBbJHtwaHhGZWVkYmFja0Zvcn09XCIke2lucHV0Lm5hbWV9XCJdLFxuICAgICAgICAgICAgICAgICAgIFske3BoeEZlZWRiYWNrRm9yfT1cIiR7aW5wdXQubmFtZS5yZXBsYWNlKC9cXFtcXF0kLywgXCJcIil9XCJdYFxuXG4gICAgICB0aGlzLmRlbGV0ZVByaXZhdGUoaW5wdXQsIFBIWF9IQVNfRk9DVVNFRClcbiAgICAgIHRoaXMuZGVsZXRlUHJpdmF0ZShpbnB1dCwgUEhYX0hBU19TVUJNSVRURUQpXG4gICAgICB0aGlzLmFsbChkb2N1bWVudCwgcXVlcnksIGZlZWRiYWNrRWwgPT4ge1xuICAgICAgICBmZWVkYmFja0VsLmNsYXNzTGlzdC5hZGQoUEhYX05PX0ZFRURCQUNLX0NMQVNTKVxuICAgICAgfSlcbiAgICB9KVxuICB9LFxuXG4gIHNob3dFcnJvcihpbnB1dEVsLCBwaHhGZWVkYmFja0Zvcil7XG4gICAgaWYoaW5wdXRFbC5pZCB8fCBpbnB1dEVsLm5hbWUpe1xuICAgICAgdGhpcy5hbGwoaW5wdXRFbC5mb3JtLCBgWyR7cGh4RmVlZGJhY2tGb3J9PVwiJHtpbnB1dEVsLmlkfVwiXSwgWyR7cGh4RmVlZGJhY2tGb3J9PVwiJHtpbnB1dEVsLm5hbWV9XCJdYCwgKGVsKSA9PiB7XG4gICAgICAgIHRoaXMucmVtb3ZlQ2xhc3MoZWwsIFBIWF9OT19GRUVEQkFDS19DTEFTUylcbiAgICAgIH0pXG4gICAgfVxuICB9LFxuXG4gIGlzUGh4Q2hpbGQobm9kZSl7XG4gICAgcmV0dXJuIG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKFBIWF9QQVJFTlRfSUQpXG4gIH0sXG5cbiAgaXNQaHhTdGlja3kobm9kZSl7XG4gICAgcmV0dXJuIG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKFBIWF9TVElDS1kpICE9PSBudWxsXG4gIH0sXG5cbiAgZmlyc3RQaHhDaGlsZChlbCl7XG4gICAgcmV0dXJuIHRoaXMuaXNQaHhDaGlsZChlbCkgPyBlbCA6IHRoaXMuYWxsKGVsLCBgWyR7UEhYX1BBUkVOVF9JRH1dYClbMF1cbiAgfSxcblxuICBkaXNwYXRjaEV2ZW50KHRhcmdldCwgbmFtZSwgb3B0cyA9IHt9KXtcbiAgICBsZXQgYnViYmxlcyA9IG9wdHMuYnViYmxlcyA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6ICEhb3B0cy5idWJibGVzXG4gICAgbGV0IGV2ZW50T3B0cyA9IHtidWJibGVzOiBidWJibGVzLCBjYW5jZWxhYmxlOiB0cnVlLCBkZXRhaWw6IG9wdHMuZGV0YWlsIHx8IHt9fVxuICAgIGxldCBldmVudCA9IG5hbWUgPT09IFwiY2xpY2tcIiA/IG5ldyBNb3VzZUV2ZW50KFwiY2xpY2tcIiwgZXZlbnRPcHRzKSA6IG5ldyBDdXN0b21FdmVudChuYW1lLCBldmVudE9wdHMpXG4gICAgdGFyZ2V0LmRpc3BhdGNoRXZlbnQoZXZlbnQpXG4gIH0sXG5cbiAgY2xvbmVOb2RlKG5vZGUsIGh0bWwpe1xuICAgIGlmKHR5cGVvZiAoaHRtbCkgPT09IFwidW5kZWZpbmVkXCIpe1xuICAgICAgcmV0dXJuIG5vZGUuY2xvbmVOb2RlKHRydWUpXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBjbG9uZWQgPSBub2RlLmNsb25lTm9kZShmYWxzZSlcbiAgICAgIGNsb25lZC5pbm5lckhUTUwgPSBodG1sXG4gICAgICByZXR1cm4gY2xvbmVkXG4gICAgfVxuICB9LFxuXG4gIG1lcmdlQXR0cnModGFyZ2V0LCBzb3VyY2UsIG9wdHMgPSB7fSl7XG4gICAgbGV0IGV4Y2x1ZGUgPSBvcHRzLmV4Y2x1ZGUgfHwgW11cbiAgICBsZXQgaXNJZ25vcmVkID0gb3B0cy5pc0lnbm9yZWRcbiAgICBsZXQgc291cmNlQXR0cnMgPSBzb3VyY2UuYXR0cmlidXRlc1xuICAgIGZvcihsZXQgaSA9IHNvdXJjZUF0dHJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKXtcbiAgICAgIGxldCBuYW1lID0gc291cmNlQXR0cnNbaV0ubmFtZVxuICAgICAgaWYoZXhjbHVkZS5pbmRleE9mKG5hbWUpIDwgMCl7IHRhcmdldC5zZXRBdHRyaWJ1dGUobmFtZSwgc291cmNlLmdldEF0dHJpYnV0ZShuYW1lKSkgfVxuICAgIH1cblxuICAgIGxldCB0YXJnZXRBdHRycyA9IHRhcmdldC5hdHRyaWJ1dGVzXG4gICAgZm9yKGxldCBpID0gdGFyZ2V0QXR0cnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pe1xuICAgICAgbGV0IG5hbWUgPSB0YXJnZXRBdHRyc1tpXS5uYW1lXG4gICAgICBpZihpc0lnbm9yZWQpe1xuICAgICAgICBpZihuYW1lLnN0YXJ0c1dpdGgoXCJkYXRhLVwiKSAmJiAhc291cmNlLmhhc0F0dHJpYnV0ZShuYW1lKSl7IHRhcmdldC5yZW1vdmVBdHRyaWJ1dGUobmFtZSkgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYoIXNvdXJjZS5oYXNBdHRyaWJ1dGUobmFtZSkpeyB0YXJnZXQucmVtb3ZlQXR0cmlidXRlKG5hbWUpIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgbWVyZ2VGb2N1c2VkSW5wdXQodGFyZ2V0LCBzb3VyY2Upe1xuICAgIC8vIHNraXAgc2VsZWN0cyBiZWNhdXNlIEZGIHdpbGwgcmVzZXQgaGlnaGxpZ2h0ZWQgaW5kZXggZm9yIGFueSBzZXRBdHRyaWJ1dGVcbiAgICBpZighKHRhcmdldCBpbnN0YW5jZW9mIEhUTUxTZWxlY3RFbGVtZW50KSl7IERPTS5tZXJnZUF0dHJzKHRhcmdldCwgc291cmNlLCB7ZXhjbHVkZTogW1widmFsdWVcIl19KSB9XG4gICAgaWYoc291cmNlLnJlYWRPbmx5KXtcbiAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJyZWFkb25seVwiLCB0cnVlKVxuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXQucmVtb3ZlQXR0cmlidXRlKFwicmVhZG9ubHlcIilcbiAgICB9XG4gIH0sXG5cbiAgaGFzU2VsZWN0aW9uUmFuZ2UoZWwpe1xuICAgIHJldHVybiBlbC5zZXRTZWxlY3Rpb25SYW5nZSAmJiAoZWwudHlwZSA9PT0gXCJ0ZXh0XCIgfHwgZWwudHlwZSA9PT0gXCJ0ZXh0YXJlYVwiKVxuICB9LFxuXG4gIHJlc3RvcmVGb2N1cyhmb2N1c2VkLCBzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kKXtcbiAgICBpZighRE9NLmlzVGV4dHVhbElucHV0KGZvY3VzZWQpKXsgcmV0dXJuIH1cbiAgICBsZXQgd2FzRm9jdXNlZCA9IGZvY3VzZWQubWF0Y2hlcyhcIjpmb2N1c1wiKVxuICAgIGlmKGZvY3VzZWQucmVhZE9ubHkpeyBmb2N1c2VkLmJsdXIoKSB9XG4gICAgaWYoIXdhc0ZvY3VzZWQpeyBmb2N1c2VkLmZvY3VzKCkgfVxuICAgIGlmKHRoaXMuaGFzU2VsZWN0aW9uUmFuZ2UoZm9jdXNlZCkpe1xuICAgICAgZm9jdXNlZC5zZXRTZWxlY3Rpb25SYW5nZShzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kKVxuICAgIH1cbiAgfSxcblxuICBpc0Zvcm1JbnB1dChlbCl7IHJldHVybiAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYSkkL2kudGVzdChlbC50YWdOYW1lKSAmJiBlbC50eXBlICE9PSBcImJ1dHRvblwiIH0sXG5cbiAgc3luY0F0dHJzVG9Qcm9wcyhlbCl7XG4gICAgaWYoZWwgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50ICYmIENIRUNLQUJMRV9JTlBVVFMuaW5kZXhPZihlbC50eXBlLnRvTG9jYWxlTG93ZXJDYXNlKCkpID49IDApe1xuICAgICAgZWwuY2hlY2tlZCA9IGVsLmdldEF0dHJpYnV0ZShcImNoZWNrZWRcIikgIT09IG51bGxcbiAgICB9XG4gIH0sXG5cbiAgaXNUZXh0dWFsSW5wdXQoZWwpeyByZXR1cm4gRk9DVVNBQkxFX0lOUFVUUy5pbmRleE9mKGVsLnR5cGUpID49IDAgfSxcblxuICBpc05vd1RyaWdnZXJGb3JtRXh0ZXJuYWwoZWwsIHBoeFRyaWdnZXJFeHRlcm5hbCl7XG4gICAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZSAmJiBlbC5nZXRBdHRyaWJ1dGUocGh4VHJpZ2dlckV4dGVybmFsKSAhPT0gbnVsbFxuICB9LFxuXG4gIHN5bmNQZW5kaW5nUmVmKGZyb21FbCwgdG9FbCwgZGlzYWJsZVdpdGgpe1xuICAgIGxldCByZWYgPSBmcm9tRWwuZ2V0QXR0cmlidXRlKFBIWF9SRUYpXG4gICAgaWYocmVmID09PSBudWxsKXsgcmV0dXJuIHRydWUgfVxuICAgIGxldCByZWZTcmMgPSBmcm9tRWwuZ2V0QXR0cmlidXRlKFBIWF9SRUZfU1JDKVxuXG4gICAgaWYoRE9NLmlzRm9ybUlucHV0KGZyb21FbCkgfHwgZnJvbUVsLmdldEF0dHJpYnV0ZShkaXNhYmxlV2l0aCkgIT09IG51bGwpe1xuICAgICAgaWYoRE9NLmlzVXBsb2FkSW5wdXQoZnJvbUVsKSl7IERPTS5tZXJnZUF0dHJzKGZyb21FbCwgdG9FbCwge2lzSWdub3JlZDogdHJ1ZX0pIH1cbiAgICAgIERPTS5wdXRQcml2YXRlKGZyb21FbCwgUEhYX1JFRiwgdG9FbClcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSB7XG4gICAgICBQSFhfRVZFTlRfQ0xBU1NFUy5mb3JFYWNoKGNsYXNzTmFtZSA9PiB7XG4gICAgICAgIGZyb21FbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSAmJiB0b0VsLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKVxuICAgICAgfSlcbiAgICAgIHRvRWwuc2V0QXR0cmlidXRlKFBIWF9SRUYsIHJlZilcbiAgICAgIHRvRWwuc2V0QXR0cmlidXRlKFBIWF9SRUZfU1JDLCByZWZTcmMpXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfSxcblxuICBjbGVhbkNoaWxkTm9kZXMoY29udGFpbmVyLCBwaHhVcGRhdGUpe1xuICAgIGlmKERPTS5pc1BoeFVwZGF0ZShjb250YWluZXIsIHBoeFVwZGF0ZSwgW1wiYXBwZW5kXCIsIFwicHJlcGVuZFwiXSkpe1xuICAgICAgbGV0IHRvUmVtb3ZlID0gW11cbiAgICAgIGNvbnRhaW5lci5jaGlsZE5vZGVzLmZvckVhY2goY2hpbGROb2RlID0+IHtcbiAgICAgICAgaWYoIWNoaWxkTm9kZS5pZCl7XG4gICAgICAgICAgLy8gU2tpcCB3YXJuaW5nIGlmIGl0J3MgYW4gZW1wdHkgdGV4dCBub2RlIChlLmcuIGEgbmV3LWxpbmUpXG4gICAgICAgICAgbGV0IGlzRW1wdHlUZXh0Tm9kZSA9IGNoaWxkTm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUgJiYgY2hpbGROb2RlLm5vZGVWYWx1ZS50cmltKCkgPT09IFwiXCJcbiAgICAgICAgICBpZighaXNFbXB0eVRleHROb2RlKXtcbiAgICAgICAgICAgIGxvZ0Vycm9yKFwib25seSBIVE1MIGVsZW1lbnQgdGFncyB3aXRoIGFuIGlkIGFyZSBhbGxvd2VkIGluc2lkZSBjb250YWluZXJzIHdpdGggcGh4LXVwZGF0ZS5cXG5cXG5cIiArXG4gICAgICAgICAgICAgIGByZW1vdmluZyBpbGxlZ2FsIG5vZGU6IFwiJHsoY2hpbGROb2RlLm91dGVySFRNTCB8fCBjaGlsZE5vZGUubm9kZVZhbHVlKS50cmltKCl9XCJcXG5cXG5gKVxuICAgICAgICAgIH1cbiAgICAgICAgICB0b1JlbW92ZS5wdXNoKGNoaWxkTm9kZSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIHRvUmVtb3ZlLmZvckVhY2goY2hpbGROb2RlID0+IGNoaWxkTm9kZS5yZW1vdmUoKSlcbiAgICB9XG4gIH0sXG5cbiAgcmVwbGFjZVJvb3RDb250YWluZXIoY29udGFpbmVyLCB0YWdOYW1lLCBhdHRycyl7XG4gICAgbGV0IHJldGFpbmVkQXR0cnMgPSBuZXcgU2V0KFtcImlkXCIsIFBIWF9TRVNTSU9OLCBQSFhfU1RBVElDLCBQSFhfTUFJTiwgUEhYX1JPT1RfSURdKVxuICAgIGlmKGNvbnRhaW5lci50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IHRhZ05hbWUudG9Mb3dlckNhc2UoKSl7XG4gICAgICBBcnJheS5mcm9tKGNvbnRhaW5lci5hdHRyaWJ1dGVzKVxuICAgICAgICAuZmlsdGVyKGF0dHIgPT4gIXJldGFpbmVkQXR0cnMuaGFzKGF0dHIubmFtZS50b0xvd2VyQ2FzZSgpKSlcbiAgICAgICAgLmZvckVhY2goYXR0ciA9PiBjb250YWluZXIucmVtb3ZlQXR0cmlidXRlKGF0dHIubmFtZSkpXG5cbiAgICAgIE9iamVjdC5rZXlzKGF0dHJzKVxuICAgICAgICAuZmlsdGVyKG5hbWUgPT4gIXJldGFpbmVkQXR0cnMuaGFzKG5hbWUudG9Mb3dlckNhc2UoKSkpXG4gICAgICAgIC5mb3JFYWNoKGF0dHIgPT4gY29udGFpbmVyLnNldEF0dHJpYnV0ZShhdHRyLCBhdHRyc1thdHRyXSkpXG5cbiAgICAgIHJldHVybiBjb250YWluZXJcblxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgbmV3Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKVxuICAgICAgT2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goYXR0ciA9PiBuZXdDb250YWluZXIuc2V0QXR0cmlidXRlKGF0dHIsIGF0dHJzW2F0dHJdKSlcbiAgICAgIHJldGFpbmVkQXR0cnMuZm9yRWFjaChhdHRyID0+IG5ld0NvbnRhaW5lci5zZXRBdHRyaWJ1dGUoYXR0ciwgY29udGFpbmVyLmdldEF0dHJpYnV0ZShhdHRyKSkpXG4gICAgICBuZXdDb250YWluZXIuaW5uZXJIVE1MID0gY29udGFpbmVyLmlubmVySFRNTFxuICAgICAgY29udGFpbmVyLnJlcGxhY2VXaXRoKG5ld0NvbnRhaW5lcilcbiAgICAgIHJldHVybiBuZXdDb250YWluZXJcbiAgICB9XG4gIH0sXG5cbiAgZ2V0U3RpY2t5KGVsLCBuYW1lLCBkZWZhdWx0VmFsKXtcbiAgICBsZXQgb3AgPSAoRE9NLnByaXZhdGUoZWwsIFwic3RpY2t5XCIpIHx8IFtdKS5maW5kKChbZXhpc3RpbmdOYW1lLCBdKSA9PiBuYW1lID09PSBleGlzdGluZ05hbWUpXG4gICAgaWYob3Ape1xuICAgICAgbGV0IFtfbmFtZSwgX29wLCBzdGFzaGVkUmVzdWx0XSA9IG9wXG4gICAgICByZXR1cm4gc3Rhc2hlZFJlc3VsdFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHlwZW9mKGRlZmF1bHRWYWwpID09PSBcImZ1bmN0aW9uXCIgPyBkZWZhdWx0VmFsKCkgOiBkZWZhdWx0VmFsXG4gICAgfVxuICB9LFxuXG4gIGRlbGV0ZVN0aWNreShlbCwgbmFtZSl7XG4gICAgdGhpcy51cGRhdGVQcml2YXRlKGVsLCBcInN0aWNreVwiLCBbXSwgb3BzID0+IHtcbiAgICAgIHJldHVybiBvcHMuZmlsdGVyKChbZXhpc3RpbmdOYW1lLCBfXSkgPT4gZXhpc3RpbmdOYW1lICE9PSBuYW1lKVxuICAgIH0pXG4gIH0sXG5cbiAgcHV0U3RpY2t5KGVsLCBuYW1lLCBvcCl7XG4gICAgbGV0IHN0YXNoZWRSZXN1bHQgPSBvcChlbClcbiAgICB0aGlzLnVwZGF0ZVByaXZhdGUoZWwsIFwic3RpY2t5XCIsIFtdLCBvcHMgPT4ge1xuICAgICAgbGV0IGV4aXN0aW5nSW5kZXggPSBvcHMuZmluZEluZGV4KChbZXhpc3RpbmdOYW1lLCBdKSA9PiBuYW1lID09PSBleGlzdGluZ05hbWUpXG4gICAgICBpZihleGlzdGluZ0luZGV4ID49IDApe1xuICAgICAgICBvcHNbZXhpc3RpbmdJbmRleF0gPSBbbmFtZSwgb3AsIHN0YXNoZWRSZXN1bHRdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHMucHVzaChbbmFtZSwgb3AsIHN0YXNoZWRSZXN1bHRdKVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9wc1xuICAgIH0pXG4gIH0sXG5cbiAgYXBwbHlTdGlja3lPcGVyYXRpb25zKGVsKXtcbiAgICBsZXQgb3BzID0gRE9NLnByaXZhdGUoZWwsIFwic3RpY2t5XCIpXG4gICAgaWYoIW9wcyl7IHJldHVybiB9XG5cbiAgICBvcHMuZm9yRWFjaCgoW25hbWUsIG9wLCBfc3Rhc2hlZF0pID0+IHRoaXMucHV0U3RpY2t5KGVsLCBuYW1lLCBvcCkpXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRE9NIiwgImltcG9ydCB7XG4gIFBIWF9BQ1RJVkVfRU5UUllfUkVGUyxcbiAgUEhYX0xJVkVfRklMRV9VUERBVEVELFxuICBQSFhfUFJFRkxJR0hURURfUkVGU1xufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQge1xuICBjaGFubmVsVXBsb2FkZXIsXG4gIGxvZ0Vycm9yXG59IGZyb20gXCIuL3V0aWxzXCJcblxuaW1wb3J0IExpdmVVcGxvYWRlciBmcm9tIFwiLi9saXZlX3VwbG9hZGVyXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXBsb2FkRW50cnkge1xuICBzdGF0aWMgaXNBY3RpdmUoZmlsZUVsLCBmaWxlKXtcbiAgICBsZXQgaXNOZXcgPSBmaWxlLl9waHhSZWYgPT09IHVuZGVmaW5lZFxuICAgIGxldCBhY3RpdmVSZWZzID0gZmlsZUVsLmdldEF0dHJpYnV0ZShQSFhfQUNUSVZFX0VOVFJZX1JFRlMpLnNwbGl0KFwiLFwiKVxuICAgIGxldCBpc0FjdGl2ZSA9IGFjdGl2ZVJlZnMuaW5kZXhPZihMaXZlVXBsb2FkZXIuZ2VuRmlsZVJlZihmaWxlKSkgPj0gMFxuICAgIHJldHVybiBmaWxlLnNpemUgPiAwICYmIChpc05ldyB8fCBpc0FjdGl2ZSlcbiAgfVxuXG4gIHN0YXRpYyBpc1ByZWZsaWdodGVkKGZpbGVFbCwgZmlsZSl7XG4gICAgbGV0IHByZWZsaWdodGVkUmVmcyA9IGZpbGVFbC5nZXRBdHRyaWJ1dGUoUEhYX1BSRUZMSUdIVEVEX1JFRlMpLnNwbGl0KFwiLFwiKVxuICAgIGxldCBpc1ByZWZsaWdodGVkID0gcHJlZmxpZ2h0ZWRSZWZzLmluZGV4T2YoTGl2ZVVwbG9hZGVyLmdlbkZpbGVSZWYoZmlsZSkpID49IDBcbiAgICByZXR1cm4gaXNQcmVmbGlnaHRlZCAmJiB0aGlzLmlzQWN0aXZlKGZpbGVFbCwgZmlsZSlcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGZpbGVFbCwgZmlsZSwgdmlldyl7XG4gICAgdGhpcy5yZWYgPSBMaXZlVXBsb2FkZXIuZ2VuRmlsZVJlZihmaWxlKVxuICAgIHRoaXMuZmlsZUVsID0gZmlsZUVsXG4gICAgdGhpcy5maWxlID0gZmlsZVxuICAgIHRoaXMudmlldyA9IHZpZXdcbiAgICB0aGlzLm1ldGEgPSBudWxsXG4gICAgdGhpcy5faXNDYW5jZWxsZWQgPSBmYWxzZVxuICAgIHRoaXMuX2lzRG9uZSA9IGZhbHNlXG4gICAgdGhpcy5fcHJvZ3Jlc3MgPSAwXG4gICAgdGhpcy5fbGFzdFByb2dyZXNzU2VudCA9IC0xXG4gICAgdGhpcy5fb25Eb25lID0gZnVuY3Rpb24gKCl7IH1cbiAgICB0aGlzLl9vbkVsVXBkYXRlZCA9IHRoaXMub25FbFVwZGF0ZWQuYmluZCh0aGlzKVxuICAgIHRoaXMuZmlsZUVsLmFkZEV2ZW50TGlzdGVuZXIoUEhYX0xJVkVfRklMRV9VUERBVEVELCB0aGlzLl9vbkVsVXBkYXRlZClcbiAgfVxuXG4gIG1ldGFkYXRhKCl7IHJldHVybiB0aGlzLm1ldGEgfVxuXG4gIHByb2dyZXNzKHByb2dyZXNzKXtcbiAgICB0aGlzLl9wcm9ncmVzcyA9IE1hdGguZmxvb3IocHJvZ3Jlc3MpXG4gICAgaWYodGhpcy5fcHJvZ3Jlc3MgPiB0aGlzLl9sYXN0UHJvZ3Jlc3NTZW50KXtcbiAgICAgIGlmKHRoaXMuX3Byb2dyZXNzID49IDEwMCl7XG4gICAgICAgIHRoaXMuX3Byb2dyZXNzID0gMTAwXG4gICAgICAgIHRoaXMuX2xhc3RQcm9ncmVzc1NlbnQgPSAxMDBcbiAgICAgICAgdGhpcy5faXNEb25lID0gdHJ1ZVxuICAgICAgICB0aGlzLnZpZXcucHVzaEZpbGVQcm9ncmVzcyh0aGlzLmZpbGVFbCwgdGhpcy5yZWYsIDEwMCwgKCkgPT4ge1xuICAgICAgICAgIExpdmVVcGxvYWRlci51bnRyYWNrRmlsZSh0aGlzLmZpbGVFbCwgdGhpcy5maWxlKVxuICAgICAgICAgIHRoaXMuX29uRG9uZSgpXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9sYXN0UHJvZ3Jlc3NTZW50ID0gdGhpcy5fcHJvZ3Jlc3NcbiAgICAgICAgdGhpcy52aWV3LnB1c2hGaWxlUHJvZ3Jlc3ModGhpcy5maWxlRWwsIHRoaXMucmVmLCB0aGlzLl9wcm9ncmVzcylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjYW5jZWwoKXtcbiAgICB0aGlzLl9pc0NhbmNlbGxlZCA9IHRydWVcbiAgICB0aGlzLl9pc0RvbmUgPSB0cnVlXG4gICAgdGhpcy5fb25Eb25lKClcbiAgfVxuXG4gIGlzRG9uZSgpeyByZXR1cm4gdGhpcy5faXNEb25lIH1cblxuICBlcnJvcihyZWFzb24gPSBcImZhaWxlZFwiKXtcbiAgICB0aGlzLmZpbGVFbC5yZW1vdmVFdmVudExpc3RlbmVyKFBIWF9MSVZFX0ZJTEVfVVBEQVRFRCwgdGhpcy5fb25FbFVwZGF0ZWQpXG4gICAgdGhpcy52aWV3LnB1c2hGaWxlUHJvZ3Jlc3ModGhpcy5maWxlRWwsIHRoaXMucmVmLCB7ZXJyb3I6IHJlYXNvbn0pXG4gICAgTGl2ZVVwbG9hZGVyLmNsZWFyRmlsZXModGhpcy5maWxlRWwpXG4gIH1cblxuICAvL3ByaXZhdGVcblxuICBvbkRvbmUoY2FsbGJhY2spe1xuICAgIHRoaXMuX29uRG9uZSA9ICgpID0+IHtcbiAgICAgIHRoaXMuZmlsZUVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoUEhYX0xJVkVfRklMRV9VUERBVEVELCB0aGlzLl9vbkVsVXBkYXRlZClcbiAgICAgIGNhbGxiYWNrKClcbiAgICB9XG4gIH1cblxuICBvbkVsVXBkYXRlZCgpe1xuICAgIGxldCBhY3RpdmVSZWZzID0gdGhpcy5maWxlRWwuZ2V0QXR0cmlidXRlKFBIWF9BQ1RJVkVfRU5UUllfUkVGUykuc3BsaXQoXCIsXCIpXG4gICAgaWYoYWN0aXZlUmVmcy5pbmRleE9mKHRoaXMucmVmKSA9PT0gLTEpeyB0aGlzLmNhbmNlbCgpIH1cbiAgfVxuXG4gIHRvUHJlZmxpZ2h0UGF5bG9hZCgpe1xuICAgIHJldHVybiB7XG4gICAgICBsYXN0X21vZGlmaWVkOiB0aGlzLmZpbGUubGFzdE1vZGlmaWVkLFxuICAgICAgbmFtZTogdGhpcy5maWxlLm5hbWUsXG4gICAgICByZWxhdGl2ZV9wYXRoOiB0aGlzLmZpbGUud2Via2l0UmVsYXRpdmVQYXRoLFxuICAgICAgc2l6ZTogdGhpcy5maWxlLnNpemUsXG4gICAgICB0eXBlOiB0aGlzLmZpbGUudHlwZSxcbiAgICAgIHJlZjogdGhpcy5yZWZcbiAgICB9XG4gIH1cblxuICB1cGxvYWRlcih1cGxvYWRlcnMpe1xuICAgIGlmKHRoaXMubWV0YS51cGxvYWRlcil7XG4gICAgICBsZXQgY2FsbGJhY2sgPSB1cGxvYWRlcnNbdGhpcy5tZXRhLnVwbG9hZGVyXSB8fCBsb2dFcnJvcihgbm8gdXBsb2FkZXIgY29uZmlndXJlZCBmb3IgJHt0aGlzLm1ldGEudXBsb2FkZXJ9YClcbiAgICAgIHJldHVybiB7bmFtZTogdGhpcy5tZXRhLnVwbG9hZGVyLCBjYWxsYmFjazogY2FsbGJhY2t9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7bmFtZTogXCJjaGFubmVsXCIsIGNhbGxiYWNrOiBjaGFubmVsVXBsb2FkZXJ9XG4gICAgfVxuICB9XG5cbiAgemlwUG9zdEZsaWdodChyZXNwKXtcbiAgICB0aGlzLm1ldGEgPSByZXNwLmVudHJpZXNbdGhpcy5yZWZdXG4gICAgaWYoIXRoaXMubWV0YSl7IGxvZ0Vycm9yKGBubyBwcmVmbGlnaHQgdXBsb2FkIHJlc3BvbnNlIHJldHVybmVkIHdpdGggcmVmICR7dGhpcy5yZWZ9YCwge2lucHV0OiB0aGlzLmZpbGVFbCwgcmVzcG9uc2U6IHJlc3B9KSB9XG4gIH1cbn1cbiIsICJpbXBvcnQge1xuICBQSFhfRE9ORV9SRUZTLFxuICBQSFhfUFJFRkxJR0hURURfUkVGUyxcbiAgUEhYX1VQTE9BRF9SRUZcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IHtcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5pbXBvcnQgRE9NIGZyb20gXCIuL2RvbVwiXG5pbXBvcnQgVXBsb2FkRW50cnkgZnJvbSBcIi4vdXBsb2FkX2VudHJ5XCJcblxubGV0IGxpdmVVcGxvYWRlckZpbGVSZWYgPSAwXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpdmVVcGxvYWRlciB7XG4gIHN0YXRpYyBnZW5GaWxlUmVmKGZpbGUpe1xuICAgIGxldCByZWYgPSBmaWxlLl9waHhSZWZcbiAgICBpZihyZWYgIT09IHVuZGVmaW5lZCl7XG4gICAgICByZXR1cm4gcmVmXG4gICAgfSBlbHNlIHtcbiAgICAgIGZpbGUuX3BoeFJlZiA9IChsaXZlVXBsb2FkZXJGaWxlUmVmKyspLnRvU3RyaW5nKClcbiAgICAgIHJldHVybiBmaWxlLl9waHhSZWZcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0RW50cnlEYXRhVVJMKGlucHV0RWwsIHJlZiwgY2FsbGJhY2spe1xuICAgIGxldCBmaWxlID0gdGhpcy5hY3RpdmVGaWxlcyhpbnB1dEVsKS5maW5kKGZpbGUgPT4gdGhpcy5nZW5GaWxlUmVmKGZpbGUpID09PSByZWYpXG4gICAgY2FsbGJhY2soVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlKSlcbiAgfVxuXG4gIHN0YXRpYyBoYXNVcGxvYWRzSW5Qcm9ncmVzcyhmb3JtRWwpe1xuICAgIGxldCBhY3RpdmUgPSAwXG4gICAgRE9NLmZpbmRVcGxvYWRJbnB1dHMoZm9ybUVsKS5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgIGlmKGlucHV0LmdldEF0dHJpYnV0ZShQSFhfUFJFRkxJR0hURURfUkVGUykgIT09IGlucHV0LmdldEF0dHJpYnV0ZShQSFhfRE9ORV9SRUZTKSl7XG4gICAgICAgIGFjdGl2ZSsrXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gYWN0aXZlID4gMFxuICB9XG5cbiAgc3RhdGljIHNlcmlhbGl6ZVVwbG9hZHMoaW5wdXRFbCl7XG4gICAgbGV0IGZpbGVzID0gdGhpcy5hY3RpdmVGaWxlcyhpbnB1dEVsKVxuICAgIGxldCBmaWxlRGF0YSA9IHt9XG4gICAgZmlsZXMuZm9yRWFjaChmaWxlID0+IHtcbiAgICAgIGxldCBlbnRyeSA9IHtwYXRoOiBpbnB1dEVsLm5hbWV9XG4gICAgICBsZXQgdXBsb2FkUmVmID0gaW5wdXRFbC5nZXRBdHRyaWJ1dGUoUEhYX1VQTE9BRF9SRUYpXG4gICAgICBmaWxlRGF0YVt1cGxvYWRSZWZdID0gZmlsZURhdGFbdXBsb2FkUmVmXSB8fCBbXVxuICAgICAgZW50cnkucmVmID0gdGhpcy5nZW5GaWxlUmVmKGZpbGUpXG4gICAgICBlbnRyeS5sYXN0X21vZGlmaWVkID0gZmlsZS5sYXN0TW9kaWZpZWRcbiAgICAgIGVudHJ5Lm5hbWUgPSBmaWxlLm5hbWUgfHwgZW50cnkucmVmXG4gICAgICBlbnRyeS5yZWxhdGl2ZV9wYXRoID0gZmlsZS53ZWJraXRSZWxhdGl2ZVBhdGhcbiAgICAgIGVudHJ5LnR5cGUgPSBmaWxlLnR5cGVcbiAgICAgIGVudHJ5LnNpemUgPSBmaWxlLnNpemVcbiAgICAgIGZpbGVEYXRhW3VwbG9hZFJlZl0ucHVzaChlbnRyeSlcbiAgICB9KVxuICAgIHJldHVybiBmaWxlRGF0YVxuICB9XG5cbiAgc3RhdGljIGNsZWFyRmlsZXMoaW5wdXRFbCl7XG4gICAgaW5wdXRFbC52YWx1ZSA9IG51bGxcbiAgICBpbnB1dEVsLnJlbW92ZUF0dHJpYnV0ZShQSFhfVVBMT0FEX1JFRilcbiAgICBET00ucHV0UHJpdmF0ZShpbnB1dEVsLCBcImZpbGVzXCIsIFtdKVxuICB9XG5cbiAgc3RhdGljIHVudHJhY2tGaWxlKGlucHV0RWwsIGZpbGUpe1xuICAgIERPTS5wdXRQcml2YXRlKGlucHV0RWwsIFwiZmlsZXNcIiwgRE9NLnByaXZhdGUoaW5wdXRFbCwgXCJmaWxlc1wiKS5maWx0ZXIoZiA9PiAhT2JqZWN0LmlzKGYsIGZpbGUpKSlcbiAgfVxuXG4gIHN0YXRpYyB0cmFja0ZpbGVzKGlucHV0RWwsIGZpbGVzLCBkYXRhVHJhbnNmZXIpe1xuICAgIGlmKGlucHV0RWwuZ2V0QXR0cmlidXRlKFwibXVsdGlwbGVcIikgIT09IG51bGwpe1xuICAgICAgbGV0IG5ld0ZpbGVzID0gZmlsZXMuZmlsdGVyKGZpbGUgPT4gIXRoaXMuYWN0aXZlRmlsZXMoaW5wdXRFbCkuZmluZChmID0+IE9iamVjdC5pcyhmLCBmaWxlKSkpXG4gICAgICBET00ucHV0UHJpdmF0ZShpbnB1dEVsLCBcImZpbGVzXCIsIHRoaXMuYWN0aXZlRmlsZXMoaW5wdXRFbCkuY29uY2F0KG5ld0ZpbGVzKSlcbiAgICAgIGlucHV0RWwudmFsdWUgPSBudWxsXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlc2V0IGlucHV0RWwgZmlsZXMgdG8gYWxpZ24gb3V0cHV0IHdpdGggcHJvZ3JhbW1hdGljIGNoYW5nZXMgKGkuZS4gZHJhZyBhbmQgZHJvcClcbiAgICAgIGlmKGRhdGFUcmFuc2ZlciAmJiBkYXRhVHJhbnNmZXIuZmlsZXMubGVuZ3RoID4gMCl7IGlucHV0RWwuZmlsZXMgPSBkYXRhVHJhbnNmZXIuZmlsZXMgfVxuICAgICAgRE9NLnB1dFByaXZhdGUoaW5wdXRFbCwgXCJmaWxlc1wiLCBmaWxlcylcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYWN0aXZlRmlsZUlucHV0cyhmb3JtRWwpe1xuICAgIGxldCBmaWxlSW5wdXRzID0gRE9NLmZpbmRVcGxvYWRJbnB1dHMoZm9ybUVsKVxuICAgIHJldHVybiBBcnJheS5mcm9tKGZpbGVJbnB1dHMpLmZpbHRlcihlbCA9PiBlbC5maWxlcyAmJiB0aGlzLmFjdGl2ZUZpbGVzKGVsKS5sZW5ndGggPiAwKVxuICB9XG5cbiAgc3RhdGljIGFjdGl2ZUZpbGVzKGlucHV0KXtcbiAgICByZXR1cm4gKERPTS5wcml2YXRlKGlucHV0LCBcImZpbGVzXCIpIHx8IFtdKS5maWx0ZXIoZiA9PiBVcGxvYWRFbnRyeS5pc0FjdGl2ZShpbnB1dCwgZikpXG4gIH1cblxuICBzdGF0aWMgaW5wdXRzQXdhaXRpbmdQcmVmbGlnaHQoZm9ybUVsKXtcbiAgICBsZXQgZmlsZUlucHV0cyA9IERPTS5maW5kVXBsb2FkSW5wdXRzKGZvcm1FbClcbiAgICByZXR1cm4gQXJyYXkuZnJvbShmaWxlSW5wdXRzKS5maWx0ZXIoaW5wdXQgPT4gdGhpcy5maWxlc0F3YWl0aW5nUHJlZmxpZ2h0KGlucHV0KS5sZW5ndGggPiAwKVxuICB9XG5cbiAgc3RhdGljIGZpbGVzQXdhaXRpbmdQcmVmbGlnaHQoaW5wdXQpe1xuICAgIHJldHVybiB0aGlzLmFjdGl2ZUZpbGVzKGlucHV0KS5maWx0ZXIoZiA9PiAhVXBsb2FkRW50cnkuaXNQcmVmbGlnaHRlZChpbnB1dCwgZikpXG4gIH1cblxuICBjb25zdHJ1Y3RvcihpbnB1dEVsLCB2aWV3LCBvbkNvbXBsZXRlKXtcbiAgICB0aGlzLnZpZXcgPSB2aWV3XG4gICAgdGhpcy5vbkNvbXBsZXRlID0gb25Db21wbGV0ZVxuICAgIHRoaXMuX2VudHJpZXMgPVxuICAgICAgQXJyYXkuZnJvbShMaXZlVXBsb2FkZXIuZmlsZXNBd2FpdGluZ1ByZWZsaWdodChpbnB1dEVsKSB8fCBbXSlcbiAgICAgICAgLm1hcChmaWxlID0+IG5ldyBVcGxvYWRFbnRyeShpbnB1dEVsLCBmaWxlLCB2aWV3KSlcblxuICAgIHRoaXMubnVtRW50cmllc0luUHJvZ3Jlc3MgPSB0aGlzLl9lbnRyaWVzLmxlbmd0aFxuICB9XG5cbiAgZW50cmllcygpeyByZXR1cm4gdGhpcy5fZW50cmllcyB9XG5cbiAgaW5pdEFkYXB0ZXJVcGxvYWQocmVzcCwgb25FcnJvciwgbGl2ZVNvY2tldCl7XG4gICAgdGhpcy5fZW50cmllcyA9XG4gICAgICB0aGlzLl9lbnRyaWVzLm1hcChlbnRyeSA9PiB7XG4gICAgICAgIGVudHJ5LnppcFBvc3RGbGlnaHQocmVzcClcbiAgICAgICAgZW50cnkub25Eb25lKCgpID0+IHtcbiAgICAgICAgICB0aGlzLm51bUVudHJpZXNJblByb2dyZXNzLS1cbiAgICAgICAgICBpZih0aGlzLm51bUVudHJpZXNJblByb2dyZXNzID09PSAwKXsgdGhpcy5vbkNvbXBsZXRlKCkgfVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gZW50cnlcbiAgICAgIH0pXG5cbiAgICBsZXQgZ3JvdXBlZEVudHJpZXMgPSB0aGlzLl9lbnRyaWVzLnJlZHVjZSgoYWNjLCBlbnRyeSkgPT4ge1xuICAgICAgbGV0IHtuYW1lLCBjYWxsYmFja30gPSBlbnRyeS51cGxvYWRlcihsaXZlU29ja2V0LnVwbG9hZGVycylcbiAgICAgIGFjY1tuYW1lXSA9IGFjY1tuYW1lXSB8fCB7Y2FsbGJhY2s6IGNhbGxiYWNrLCBlbnRyaWVzOiBbXX1cbiAgICAgIGFjY1tuYW1lXS5lbnRyaWVzLnB1c2goZW50cnkpXG4gICAgICByZXR1cm4gYWNjXG4gICAgfSwge30pXG5cbiAgICBmb3IobGV0IG5hbWUgaW4gZ3JvdXBlZEVudHJpZXMpe1xuICAgICAgbGV0IHtjYWxsYmFjaywgZW50cmllc30gPSBncm91cGVkRW50cmllc1tuYW1lXVxuICAgICAgY2FsbGJhY2soZW50cmllcywgb25FcnJvciwgcmVzcCwgbGl2ZVNvY2tldClcbiAgICB9XG4gIH1cbn1cbiIsICJsZXQgQVJJQSA9IHtcbiAgZm9jdXNNYWluKCl7XG4gICAgbGV0IHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJtYWluIGgxLCBtYWluLCBoMVwiKVxuICAgIGlmKHRhcmdldCl7XG4gICAgICBsZXQgb3JpZ1RhYkluZGV4ID0gdGFyZ2V0LnRhYkluZGV4XG4gICAgICB0YXJnZXQudGFiSW5kZXggPSAtMVxuICAgICAgdGFyZ2V0LmZvY3VzKClcbiAgICAgIHRhcmdldC50YWJJbmRleCA9IG9yaWdUYWJJbmRleFxuICAgIH1cbiAgfSxcblxuICBhbnlPZihpbnN0YW5jZSwgY2xhc3Nlcyl7IHJldHVybiBjbGFzc2VzLmZpbmQobmFtZSA9PiBpbnN0YW5jZSBpbnN0YW5jZW9mIG5hbWUpIH0sXG5cbiAgaXNGb2N1c2FibGUoZWwsIGludGVyYWN0aXZlT25seSl7XG4gICAgcmV0dXJuKFxuICAgICAgKGVsIGluc3RhbmNlb2YgSFRNTEFuY2hvckVsZW1lbnQgJiYgZWwucmVsICE9PSBcImlnbm9yZVwiKSB8fFxuICAgICAgKGVsIGluc3RhbmNlb2YgSFRNTEFyZWFFbGVtZW50ICYmIGVsLmhyZWYgIT09IHVuZGVmaW5lZCkgfHxcbiAgICAgICghZWwuZGlzYWJsZWQgJiYgKHRoaXMuYW55T2YoZWwsIFtIVE1MSW5wdXRFbGVtZW50LCBIVE1MU2VsZWN0RWxlbWVudCwgSFRNTFRleHRBcmVhRWxlbWVudCwgSFRNTEJ1dHRvbkVsZW1lbnRdKSkpIHx8XG4gICAgICAoZWwgaW5zdGFuY2VvZiBIVE1MSUZyYW1lRWxlbWVudCkgfHxcbiAgICAgIChlbC50YWJJbmRleCA+IDAgfHwgKCFpbnRlcmFjdGl2ZU9ubHkgJiYgZWwudGFiSW5kZXggPT09IDAgJiYgZWwuZ2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIikgIT09IG51bGwgJiYgZWwuZ2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIikgIT09IFwidHJ1ZVwiKSlcbiAgICApXG4gIH0sXG5cbiAgYXR0ZW1wdEZvY3VzKGVsLCBpbnRlcmFjdGl2ZU9ubHkpe1xuICAgIGlmKHRoaXMuaXNGb2N1c2FibGUoZWwsIGludGVyYWN0aXZlT25seSkpeyB0cnl7IGVsLmZvY3VzKCkgfSBjYXRjaChlKXt9IH1cbiAgICByZXR1cm4gISFkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuaXNTYW1lTm9kZShlbClcbiAgfSxcblxuICBmb2N1c0ZpcnN0SW50ZXJhY3RpdmUoZWwpe1xuICAgIGxldCBjaGlsZCA9IGVsLmZpcnN0RWxlbWVudENoaWxkXG4gICAgd2hpbGUoY2hpbGQpe1xuICAgICAgaWYodGhpcy5hdHRlbXB0Rm9jdXMoY2hpbGQsIHRydWUpIHx8IHRoaXMuZm9jdXNGaXJzdEludGVyYWN0aXZlKGNoaWxkLCB0cnVlKSl7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICBjaGlsZCA9IGNoaWxkLm5leHRFbGVtZW50U2libGluZ1xuICAgIH1cbiAgfSxcblxuICBmb2N1c0ZpcnN0KGVsKXtcbiAgICBsZXQgY2hpbGQgPSBlbC5maXJzdEVsZW1lbnRDaGlsZFxuICAgIHdoaWxlKGNoaWxkKXtcbiAgICAgIGlmKHRoaXMuYXR0ZW1wdEZvY3VzKGNoaWxkKSB8fCB0aGlzLmZvY3VzRmlyc3QoY2hpbGQpKXtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIGNoaWxkID0gY2hpbGQubmV4dEVsZW1lbnRTaWJsaW5nXG4gICAgfVxuICB9LFxuXG4gIGZvY3VzTGFzdChlbCl7XG4gICAgbGV0IGNoaWxkID0gZWwubGFzdEVsZW1lbnRDaGlsZFxuICAgIHdoaWxlKGNoaWxkKXtcbiAgICAgIGlmKHRoaXMuYXR0ZW1wdEZvY3VzKGNoaWxkKSB8fCB0aGlzLmZvY3VzTGFzdChjaGlsZCkpe1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgICAgY2hpbGQgPSBjaGlsZC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXG4gICAgfVxuICB9XG59XG5leHBvcnQgZGVmYXVsdCBBUklBIiwgImltcG9ydCB7XG4gIFBIWF9BQ1RJVkVfRU5UUllfUkVGUyxcbiAgUEhYX0xJVkVfRklMRV9VUERBVEVELFxuICBQSFhfUFJFRkxJR0hURURfUkVGUyxcbiAgUEhYX1VQTE9BRF9SRUZcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IExpdmVVcGxvYWRlciBmcm9tIFwiLi9saXZlX3VwbG9hZGVyXCJcbmltcG9ydCBBUklBIGZyb20gXCIuL2FyaWFcIlxuXG5sZXQgSG9va3MgPSB7XG4gIExpdmVGaWxlVXBsb2FkOiB7XG4gICAgYWN0aXZlUmVmcygpeyByZXR1cm4gdGhpcy5lbC5nZXRBdHRyaWJ1dGUoUEhYX0FDVElWRV9FTlRSWV9SRUZTKSB9LFxuXG4gICAgcHJlZmxpZ2h0ZWRSZWZzKCl7IHJldHVybiB0aGlzLmVsLmdldEF0dHJpYnV0ZShQSFhfUFJFRkxJR0hURURfUkVGUykgfSxcblxuICAgIG1vdW50ZWQoKXsgdGhpcy5wcmVmbGlnaHRlZFdhcyA9IHRoaXMucHJlZmxpZ2h0ZWRSZWZzKCkgfSxcblxuICAgIHVwZGF0ZWQoKXtcbiAgICAgIGxldCBuZXdQcmVmbGlnaHRzID0gdGhpcy5wcmVmbGlnaHRlZFJlZnMoKVxuICAgICAgaWYodGhpcy5wcmVmbGlnaHRlZFdhcyAhPT0gbmV3UHJlZmxpZ2h0cyl7XG4gICAgICAgIHRoaXMucHJlZmxpZ2h0ZWRXYXMgPSBuZXdQcmVmbGlnaHRzXG4gICAgICAgIGlmKG5ld1ByZWZsaWdodHMgPT09IFwiXCIpe1xuICAgICAgICAgIHRoaXMuX192aWV3LmNhbmNlbFN1Ym1pdCh0aGlzLmVsLmZvcm0pXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYodGhpcy5hY3RpdmVSZWZzKCkgPT09IFwiXCIpeyB0aGlzLmVsLnZhbHVlID0gbnVsbCB9XG4gICAgICB0aGlzLmVsLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFBIWF9MSVZFX0ZJTEVfVVBEQVRFRCkpXG4gICAgfVxuICB9LFxuXG4gIExpdmVJbWdQcmV2aWV3OiB7XG4gICAgbW91bnRlZCgpe1xuICAgICAgdGhpcy5yZWYgPSB0aGlzLmVsLmdldEF0dHJpYnV0ZShcImRhdGEtcGh4LWVudHJ5LXJlZlwiKVxuICAgICAgdGhpcy5pbnB1dEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5lbC5nZXRBdHRyaWJ1dGUoUEhYX1VQTE9BRF9SRUYpKVxuICAgICAgTGl2ZVVwbG9hZGVyLmdldEVudHJ5RGF0YVVSTCh0aGlzLmlucHV0RWwsIHRoaXMucmVmLCB1cmwgPT4ge1xuICAgICAgICB0aGlzLnVybCA9IHVybFxuICAgICAgICB0aGlzLmVsLnNyYyA9IHVybFxuICAgICAgfSlcbiAgICB9LFxuICAgIGRlc3Ryb3llZCgpe1xuICAgICAgVVJMLnJldm9rZU9iamVjdFVSTCh0aGlzLnVybClcbiAgICB9XG4gIH0sXG4gIEZvY3VzV3JhcDoge1xuICAgIG1vdW50ZWQoKXtcbiAgICAgIHRoaXMuZm9jdXNTdGFydCA9IHRoaXMuZWwuZmlyc3RFbGVtZW50Q2hpbGRcbiAgICAgIHRoaXMuZm9jdXNFbmQgPSB0aGlzLmVsLmxhc3RFbGVtZW50Q2hpbGRcbiAgICAgIHRoaXMuZm9jdXNTdGFydC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgKCkgPT4gQVJJQS5mb2N1c0xhc3QodGhpcy5lbCkpXG4gICAgICB0aGlzLmZvY3VzRW5kLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCAoKSA9PiBBUklBLmZvY3VzRmlyc3QodGhpcy5lbCkpXG4gICAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoXCJwaHg6c2hvdy1lbmRcIiwgKCkgPT4gdGhpcy5lbC5mb2N1cygpKVxuICAgICAgaWYod2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5lbCkuZGlzcGxheSAhPT0gXCJub25lXCIpe1xuICAgICAgICBBUklBLmZvY3VzRmlyc3QodGhpcy5lbClcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSG9va3NcbiIsICJpbXBvcnQge1xuICBtYXliZVxufSBmcm9tIFwiLi91dGlsc1wiXG5cbmltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRE9NUG9zdE1vcnBoUmVzdG9yZXIge1xuICBjb25zdHJ1Y3Rvcihjb250YWluZXJCZWZvcmUsIGNvbnRhaW5lckFmdGVyLCB1cGRhdGVUeXBlKXtcbiAgICBsZXQgaWRzQmVmb3JlID0gbmV3IFNldCgpXG4gICAgbGV0IGlkc0FmdGVyID0gbmV3IFNldChbLi4uY29udGFpbmVyQWZ0ZXIuY2hpbGRyZW5dLm1hcChjaGlsZCA9PiBjaGlsZC5pZCkpXG5cbiAgICBsZXQgZWxlbWVudHNUb01vZGlmeSA9IFtdXG5cbiAgICBBcnJheS5mcm9tKGNvbnRhaW5lckJlZm9yZS5jaGlsZHJlbikuZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICBpZihjaGlsZC5pZCl7IC8vIGFsbCBvZiBvdXIgY2hpbGRyZW4gc2hvdWxkIGJlIGVsZW1lbnRzIHdpdGggaWRzXG4gICAgICAgIGlkc0JlZm9yZS5hZGQoY2hpbGQuaWQpXG4gICAgICAgIGlmKGlkc0FmdGVyLmhhcyhjaGlsZC5pZCkpe1xuICAgICAgICAgIGxldCBwcmV2aW91c0VsZW1lbnRJZCA9IGNoaWxkLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgJiYgY2hpbGQucHJldmlvdXNFbGVtZW50U2libGluZy5pZFxuICAgICAgICAgIGVsZW1lbnRzVG9Nb2RpZnkucHVzaCh7ZWxlbWVudElkOiBjaGlsZC5pZCwgcHJldmlvdXNFbGVtZW50SWQ6IHByZXZpb3VzRWxlbWVudElkfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG5cbiAgICB0aGlzLmNvbnRhaW5lcklkID0gY29udGFpbmVyQWZ0ZXIuaWRcbiAgICB0aGlzLnVwZGF0ZVR5cGUgPSB1cGRhdGVUeXBlXG4gICAgdGhpcy5lbGVtZW50c1RvTW9kaWZ5ID0gZWxlbWVudHNUb01vZGlmeVxuICAgIHRoaXMuZWxlbWVudElkc1RvQWRkID0gWy4uLmlkc0FmdGVyXS5maWx0ZXIoaWQgPT4gIWlkc0JlZm9yZS5oYXMoaWQpKVxuICB9XG5cbiAgLy8gV2UgZG8gdGhlIGZvbGxvd2luZyB0byBvcHRpbWl6ZSBhcHBlbmQvcHJlcGVuZCBvcGVyYXRpb25zOlxuICAvLyAgIDEpIFRyYWNrIGlkcyBvZiBtb2RpZmllZCBlbGVtZW50cyAmIG9mIG5ldyBlbGVtZW50c1xuICAvLyAgIDIpIEFsbCB0aGUgbW9kaWZpZWQgZWxlbWVudHMgYXJlIHB1dCBiYWNrIGluIHRoZSBjb3JyZWN0IHBvc2l0aW9uIGluIHRoZSBET00gdHJlZVxuICAvLyAgICAgIGJ5IHN0b3JpbmcgdGhlIGlkIG9mIHRoZWlyIHByZXZpb3VzIHNpYmxpbmdcbiAgLy8gICAzKSBOZXcgZWxlbWVudHMgYXJlIGdvaW5nIHRvIGJlIHB1dCBpbiB0aGUgcmlnaHQgcGxhY2UgYnkgbW9ycGhkb20gZHVyaW5nIGFwcGVuZC5cbiAgLy8gICAgICBGb3IgcHJlcGVuZCwgd2UgbW92ZSB0aGVtIHRvIHRoZSBmaXJzdCBwb3NpdGlvbiBpbiB0aGUgY29udGFpbmVyXG4gIHBlcmZvcm0oKXtcbiAgICBsZXQgY29udGFpbmVyID0gRE9NLmJ5SWQodGhpcy5jb250YWluZXJJZClcbiAgICB0aGlzLmVsZW1lbnRzVG9Nb2RpZnkuZm9yRWFjaChlbGVtZW50VG9Nb2RpZnkgPT4ge1xuICAgICAgaWYoZWxlbWVudFRvTW9kaWZ5LnByZXZpb3VzRWxlbWVudElkKXtcbiAgICAgICAgbWF5YmUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZWxlbWVudFRvTW9kaWZ5LnByZXZpb3VzRWxlbWVudElkKSwgcHJldmlvdXNFbGVtID0+IHtcbiAgICAgICAgICBtYXliZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50VG9Nb2RpZnkuZWxlbWVudElkKSwgZWxlbSA9PiB7XG4gICAgICAgICAgICBsZXQgaXNJblJpZ2h0UGxhY2UgPSBlbGVtLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgJiYgZWxlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nLmlkID09IHByZXZpb3VzRWxlbS5pZFxuICAgICAgICAgICAgaWYoIWlzSW5SaWdodFBsYWNlKXtcbiAgICAgICAgICAgICAgcHJldmlvdXNFbGVtLmluc2VydEFkamFjZW50RWxlbWVudChcImFmdGVyZW5kXCIsIGVsZW0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRoaXMgaXMgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIGNvbnRhaW5lclxuICAgICAgICBtYXliZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50VG9Nb2RpZnkuZWxlbWVudElkKSwgZWxlbSA9PiB7XG4gICAgICAgICAgbGV0IGlzSW5SaWdodFBsYWNlID0gZWxlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nID09IG51bGxcbiAgICAgICAgICBpZighaXNJblJpZ2h0UGxhY2Upe1xuICAgICAgICAgICAgY29udGFpbmVyLmluc2VydEFkamFjZW50RWxlbWVudChcImFmdGVyYmVnaW5cIiwgZWxlbSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcblxuICAgIGlmKHRoaXMudXBkYXRlVHlwZSA9PSBcInByZXBlbmRcIil7XG4gICAgICB0aGlzLmVsZW1lbnRJZHNUb0FkZC5yZXZlcnNlKCkuZm9yRWFjaChlbGVtSWQgPT4ge1xuICAgICAgICBtYXliZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtSWQpLCBlbGVtID0+IGNvbnRhaW5lci5pbnNlcnRBZGphY2VudEVsZW1lbnQoXCJhZnRlcmJlZ2luXCIsIGVsZW0pKVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn1cbiIsICJ2YXIgRE9DVU1FTlRfRlJBR01FTlRfTk9ERSA9IDExO1xuXG5mdW5jdGlvbiBtb3JwaEF0dHJzKGZyb21Ob2RlLCB0b05vZGUpIHtcbiAgICB2YXIgdG9Ob2RlQXR0cnMgPSB0b05vZGUuYXR0cmlidXRlcztcbiAgICB2YXIgYXR0cjtcbiAgICB2YXIgYXR0ck5hbWU7XG4gICAgdmFyIGF0dHJOYW1lc3BhY2VVUkk7XG4gICAgdmFyIGF0dHJWYWx1ZTtcbiAgICB2YXIgZnJvbVZhbHVlO1xuXG4gICAgLy8gZG9jdW1lbnQtZnJhZ21lbnRzIGRvbnQgaGF2ZSBhdHRyaWJ1dGVzIHNvIGxldHMgbm90IGRvIGFueXRoaW5nXG4gICAgaWYgKHRvTm9kZS5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERSB8fCBmcm9tTm9kZS5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIHVwZGF0ZSBhdHRyaWJ1dGVzIG9uIG9yaWdpbmFsIERPTSBlbGVtZW50XG4gICAgZm9yICh2YXIgaSA9IHRvTm9kZUF0dHJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGF0dHIgPSB0b05vZGVBdHRyc1tpXTtcbiAgICAgICAgYXR0ck5hbWUgPSBhdHRyLm5hbWU7XG4gICAgICAgIGF0dHJOYW1lc3BhY2VVUkkgPSBhdHRyLm5hbWVzcGFjZVVSSTtcbiAgICAgICAgYXR0clZhbHVlID0gYXR0ci52YWx1ZTtcblxuICAgICAgICBpZiAoYXR0ck5hbWVzcGFjZVVSSSkge1xuICAgICAgICAgICAgYXR0ck5hbWUgPSBhdHRyLmxvY2FsTmFtZSB8fCBhdHRyTmFtZTtcbiAgICAgICAgICAgIGZyb21WYWx1ZSA9IGZyb21Ob2RlLmdldEF0dHJpYnV0ZU5TKGF0dHJOYW1lc3BhY2VVUkksIGF0dHJOYW1lKTtcblxuICAgICAgICAgICAgaWYgKGZyb21WYWx1ZSAhPT0gYXR0clZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGF0dHIucHJlZml4ID09PSAneG1sbnMnKXtcbiAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWUgPSBhdHRyLm5hbWU7IC8vIEl0J3Mgbm90IGFsbG93ZWQgdG8gc2V0IGFuIGF0dHJpYnV0ZSB3aXRoIHRoZSBYTUxOUyBuYW1lc3BhY2Ugd2l0aG91dCBzcGVjaWZ5aW5nIHRoZSBgeG1sbnNgIHByZWZpeFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmcm9tTm9kZS5zZXRBdHRyaWJ1dGVOUyhhdHRyTmFtZXNwYWNlVVJJLCBhdHRyTmFtZSwgYXR0clZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZyb21WYWx1ZSA9IGZyb21Ob2RlLmdldEF0dHJpYnV0ZShhdHRyTmFtZSk7XG5cbiAgICAgICAgICAgIGlmIChmcm9tVmFsdWUgIT09IGF0dHJWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGZyb21Ob2RlLnNldEF0dHJpYnV0ZShhdHRyTmFtZSwgYXR0clZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSBhbnkgZXh0cmEgYXR0cmlidXRlcyBmb3VuZCBvbiB0aGUgb3JpZ2luYWwgRE9NIGVsZW1lbnQgdGhhdFxuICAgIC8vIHdlcmVuJ3QgZm91bmQgb24gdGhlIHRhcmdldCBlbGVtZW50LlxuICAgIHZhciBmcm9tTm9kZUF0dHJzID0gZnJvbU5vZGUuYXR0cmlidXRlcztcblxuICAgIGZvciAodmFyIGQgPSBmcm9tTm9kZUF0dHJzLmxlbmd0aCAtIDE7IGQgPj0gMDsgZC0tKSB7XG4gICAgICAgIGF0dHIgPSBmcm9tTm9kZUF0dHJzW2RdO1xuICAgICAgICBhdHRyTmFtZSA9IGF0dHIubmFtZTtcbiAgICAgICAgYXR0ck5hbWVzcGFjZVVSSSA9IGF0dHIubmFtZXNwYWNlVVJJO1xuXG4gICAgICAgIGlmIChhdHRyTmFtZXNwYWNlVVJJKSB7XG4gICAgICAgICAgICBhdHRyTmFtZSA9IGF0dHIubG9jYWxOYW1lIHx8IGF0dHJOYW1lO1xuXG4gICAgICAgICAgICBpZiAoIXRvTm9kZS5oYXNBdHRyaWJ1dGVOUyhhdHRyTmFtZXNwYWNlVVJJLCBhdHRyTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBmcm9tTm9kZS5yZW1vdmVBdHRyaWJ1dGVOUyhhdHRyTmFtZXNwYWNlVVJJLCBhdHRyTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXRvTm9kZS5oYXNBdHRyaWJ1dGUoYXR0ck5hbWUpKSB7XG4gICAgICAgICAgICAgICAgZnJvbU5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxudmFyIHJhbmdlOyAvLyBDcmVhdGUgYSByYW5nZSBvYmplY3QgZm9yIGVmZmljZW50bHkgcmVuZGVyaW5nIHN0cmluZ3MgdG8gZWxlbWVudHMuXG52YXIgTlNfWEhUTUwgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCc7XG5cbnZhciBkb2MgPSB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogZG9jdW1lbnQ7XG52YXIgSEFTX1RFTVBMQVRFX1NVUFBPUlQgPSAhIWRvYyAmJiAnY29udGVudCcgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJyk7XG52YXIgSEFTX1JBTkdFX1NVUFBPUlQgPSAhIWRvYyAmJiBkb2MuY3JlYXRlUmFuZ2UgJiYgJ2NyZWF0ZUNvbnRleHR1YWxGcmFnbWVudCcgaW4gZG9jLmNyZWF0ZVJhbmdlKCk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50RnJvbVRlbXBsYXRlKHN0cikge1xuICAgIHZhciB0ZW1wbGF0ZSA9IGRvYy5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xuICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IHN0cjtcbiAgICByZXR1cm4gdGVtcGxhdGUuY29udGVudC5jaGlsZE5vZGVzWzBdO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGcmFnbWVudEZyb21SYW5nZShzdHIpIHtcbiAgICBpZiAoIXJhbmdlKSB7XG4gICAgICAgIHJhbmdlID0gZG9jLmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgIHJhbmdlLnNlbGVjdE5vZGUoZG9jLmJvZHkpO1xuICAgIH1cblxuICAgIHZhciBmcmFnbWVudCA9IHJhbmdlLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudChzdHIpO1xuICAgIHJldHVybiBmcmFnbWVudC5jaGlsZE5vZGVzWzBdO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGcmFnbWVudEZyb21XcmFwKHN0cikge1xuICAgIHZhciBmcmFnbWVudCA9IGRvYy5jcmVhdGVFbGVtZW50KCdib2R5Jyk7XG4gICAgZnJhZ21lbnQuaW5uZXJIVE1MID0gc3RyO1xuICAgIHJldHVybiBmcmFnbWVudC5jaGlsZE5vZGVzWzBdO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgYWJvdXQgdGhlIHNhbWVcbiAqIHZhciBodG1sID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhzdHIsICd0ZXh0L2h0bWwnKTtcbiAqIHJldHVybiBodG1sLmJvZHkuZmlyc3RDaGlsZDtcbiAqXG4gKiBAbWV0aG9kIHRvRWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICovXG5mdW5jdGlvbiB0b0VsZW1lbnQoc3RyKSB7XG4gICAgc3RyID0gc3RyLnRyaW0oKTtcbiAgICBpZiAoSEFTX1RFTVBMQVRFX1NVUFBPUlQpIHtcbiAgICAgIC8vIGF2b2lkIHJlc3RyaWN0aW9ucyBvbiBjb250ZW50IGZvciB0aGluZ3MgbGlrZSBgPHRyPjx0aD5IaTwvdGg+PC90cj5gIHdoaWNoXG4gICAgICAvLyBjcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQgZG9lc24ndCBzdXBwb3J0XG4gICAgICAvLyA8dGVtcGxhdGU+IHN1cHBvcnQgbm90IGF2YWlsYWJsZSBpbiBJRVxuICAgICAgcmV0dXJuIGNyZWF0ZUZyYWdtZW50RnJvbVRlbXBsYXRlKHN0cik7XG4gICAgfSBlbHNlIGlmIChIQVNfUkFOR0VfU1VQUE9SVCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUZyYWdtZW50RnJvbVJhbmdlKHN0cik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWF0ZUZyYWdtZW50RnJvbVdyYXAoc3RyKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdHdvIG5vZGUncyBuYW1lcyBhcmUgdGhlIHNhbWUuXG4gKlxuICogTk9URTogV2UgZG9uJ3QgYm90aGVyIGNoZWNraW5nIGBuYW1lc3BhY2VVUklgIGJlY2F1c2UgeW91IHdpbGwgbmV2ZXIgZmluZCB0d28gSFRNTCBlbGVtZW50cyB3aXRoIHRoZSBzYW1lXG4gKiAgICAgICBub2RlTmFtZSBhbmQgZGlmZmVyZW50IG5hbWVzcGFjZSBVUklzLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiIFRoZSB0YXJnZXQgZWxlbWVudFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gY29tcGFyZU5vZGVOYW1lcyhmcm9tRWwsIHRvRWwpIHtcbiAgICB2YXIgZnJvbU5vZGVOYW1lID0gZnJvbUVsLm5vZGVOYW1lO1xuICAgIHZhciB0b05vZGVOYW1lID0gdG9FbC5ub2RlTmFtZTtcbiAgICB2YXIgZnJvbUNvZGVTdGFydCwgdG9Db2RlU3RhcnQ7XG5cbiAgICBpZiAoZnJvbU5vZGVOYW1lID09PSB0b05vZGVOYW1lKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZyb21Db2RlU3RhcnQgPSBmcm9tTm9kZU5hbWUuY2hhckNvZGVBdCgwKTtcbiAgICB0b0NvZGVTdGFydCA9IHRvTm9kZU5hbWUuY2hhckNvZGVBdCgwKTtcblxuICAgIC8vIElmIHRoZSB0YXJnZXQgZWxlbWVudCBpcyBhIHZpcnR1YWwgRE9NIG5vZGUgb3IgU1ZHIG5vZGUgdGhlbiB3ZSBtYXlcbiAgICAvLyBuZWVkIHRvIG5vcm1hbGl6ZSB0aGUgdGFnIG5hbWUgYmVmb3JlIGNvbXBhcmluZy4gTm9ybWFsIEhUTUwgZWxlbWVudHMgdGhhdCBhcmVcbiAgICAvLyBpbiB0aGUgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJcbiAgICAvLyBhcmUgY29udmVydGVkIHRvIHVwcGVyIGNhc2VcbiAgICBpZiAoZnJvbUNvZGVTdGFydCA8PSA5MCAmJiB0b0NvZGVTdGFydCA+PSA5NykgeyAvLyBmcm9tIGlzIHVwcGVyIGFuZCB0byBpcyBsb3dlclxuICAgICAgICByZXR1cm4gZnJvbU5vZGVOYW1lID09PSB0b05vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgfSBlbHNlIGlmICh0b0NvZGVTdGFydCA8PSA5MCAmJiBmcm9tQ29kZVN0YXJ0ID49IDk3KSB7IC8vIHRvIGlzIHVwcGVyIGFuZCBmcm9tIGlzIGxvd2VyXG4gICAgICAgIHJldHVybiB0b05vZGVOYW1lID09PSBmcm9tTm9kZU5hbWUudG9VcHBlckNhc2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBlbGVtZW50LCBvcHRpb25hbGx5IHdpdGggYSBrbm93biBuYW1lc3BhY2UgVVJJLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHRoZSBlbGVtZW50IG5hbWUsIGUuZy4gJ2Rpdicgb3IgJ3N2ZydcbiAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZXNwYWNlVVJJXSB0aGUgZWxlbWVudCdzIG5hbWVzcGFjZSBVUkksIGkuZS4gdGhlIHZhbHVlIG9mXG4gKiBpdHMgYHhtbG5zYCBhdHRyaWJ1dGUgb3IgaXRzIGluZmVycmVkIG5hbWVzcGFjZS5cbiAqXG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICovXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50TlMobmFtZSwgbmFtZXNwYWNlVVJJKSB7XG4gICAgcmV0dXJuICFuYW1lc3BhY2VVUkkgfHwgbmFtZXNwYWNlVVJJID09PSBOU19YSFRNTCA/XG4gICAgICAgIGRvYy5jcmVhdGVFbGVtZW50KG5hbWUpIDpcbiAgICAgICAgZG9jLmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VVUkksIG5hbWUpO1xufVxuXG4vKipcbiAqIENvcGllcyB0aGUgY2hpbGRyZW4gb2Ygb25lIERPTSBlbGVtZW50IHRvIGFub3RoZXIgRE9NIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gbW92ZUNoaWxkcmVuKGZyb21FbCwgdG9FbCkge1xuICAgIHZhciBjdXJDaGlsZCA9IGZyb21FbC5maXJzdENoaWxkO1xuICAgIHdoaWxlIChjdXJDaGlsZCkge1xuICAgICAgICB2YXIgbmV4dENoaWxkID0gY3VyQ2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgIHRvRWwuYXBwZW5kQ2hpbGQoY3VyQ2hpbGQpO1xuICAgICAgICBjdXJDaGlsZCA9IG5leHRDaGlsZDtcbiAgICB9XG4gICAgcmV0dXJuIHRvRWw7XG59XG5cbmZ1bmN0aW9uIHN5bmNCb29sZWFuQXR0clByb3AoZnJvbUVsLCB0b0VsLCBuYW1lKSB7XG4gICAgaWYgKGZyb21FbFtuYW1lXSAhPT0gdG9FbFtuYW1lXSkge1xuICAgICAgICBmcm9tRWxbbmFtZV0gPSB0b0VsW25hbWVdO1xuICAgICAgICBpZiAoZnJvbUVsW25hbWVdKSB7XG4gICAgICAgICAgICBmcm9tRWwuc2V0QXR0cmlidXRlKG5hbWUsICcnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZyb21FbC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbnZhciBzcGVjaWFsRWxIYW5kbGVycyA9IHtcbiAgICBPUFRJT046IGZ1bmN0aW9uKGZyb21FbCwgdG9FbCkge1xuICAgICAgICB2YXIgcGFyZW50Tm9kZSA9IGZyb21FbC5wYXJlbnROb2RlO1xuICAgICAgICBpZiAocGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgdmFyIHBhcmVudE5hbWUgPSBwYXJlbnROb2RlLm5vZGVOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICBpZiAocGFyZW50TmFtZSA9PT0gJ09QVEdST1VQJykge1xuICAgICAgICAgICAgICAgIHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgcGFyZW50TmFtZSA9IHBhcmVudE5vZGUgJiYgcGFyZW50Tm9kZS5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcmVudE5hbWUgPT09ICdTRUxFQ1QnICYmICFwYXJlbnROb2RlLmhhc0F0dHJpYnV0ZSgnbXVsdGlwbGUnKSkge1xuICAgICAgICAgICAgICAgIGlmIChmcm9tRWwuaGFzQXR0cmlidXRlKCdzZWxlY3RlZCcpICYmICF0b0VsLnNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdvcmthcm91bmQgZm9yIE1TIEVkZ2UgYnVnIHdoZXJlIHRoZSAnc2VsZWN0ZWQnIGF0dHJpYnV0ZSBjYW4gb25seSBiZVxuICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmVkIGlmIHNldCB0byBhIG5vbi1lbXB0eSB2YWx1ZTpcbiAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubWljcm9zb2Z0LmNvbS9lbi11cy9taWNyb3NvZnQtZWRnZS9wbGF0Zm9ybS9pc3N1ZXMvMTIwODc2NzkvXG4gICAgICAgICAgICAgICAgICAgIGZyb21FbC5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIGZyb21FbC5yZW1vdmVBdHRyaWJ1dGUoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgdG8gcmVzZXQgc2VsZWN0IGVsZW1lbnQncyBzZWxlY3RlZEluZGV4IHRvIC0xLCBvdGhlcndpc2Ugc2V0dGluZ1xuICAgICAgICAgICAgICAgIC8vIGZyb21FbC5zZWxlY3RlZCB1c2luZyB0aGUgc3luY0Jvb2xlYW5BdHRyUHJvcCBiZWxvdyBoYXMgbm8gZWZmZWN0LlxuICAgICAgICAgICAgICAgIC8vIFRoZSBjb3JyZWN0IHNlbGVjdGVkSW5kZXggd2lsbCBiZSBzZXQgaW4gdGhlIFNFTEVDVCBzcGVjaWFsIGhhbmRsZXIgYmVsb3cuXG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4ID0gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3luY0Jvb2xlYW5BdHRyUHJvcChmcm9tRWwsIHRvRWwsICdzZWxlY3RlZCcpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogVGhlIFwidmFsdWVcIiBhdHRyaWJ1dGUgaXMgc3BlY2lhbCBmb3IgdGhlIDxpbnB1dD4gZWxlbWVudCBzaW5jZSBpdCBzZXRzXG4gICAgICogdGhlIGluaXRpYWwgdmFsdWUuIENoYW5naW5nIHRoZSBcInZhbHVlXCIgYXR0cmlidXRlIHdpdGhvdXQgY2hhbmdpbmcgdGhlXG4gICAgICogXCJ2YWx1ZVwiIHByb3BlcnR5IHdpbGwgaGF2ZSBubyBlZmZlY3Qgc2luY2UgaXQgaXMgb25seSB1c2VkIHRvIHRoZSBzZXQgdGhlXG4gICAgICogaW5pdGlhbCB2YWx1ZS4gIFNpbWlsYXIgZm9yIHRoZSBcImNoZWNrZWRcIiBhdHRyaWJ1dGUsIGFuZCBcImRpc2FibGVkXCIuXG4gICAgICovXG4gICAgSU5QVVQ6IGZ1bmN0aW9uKGZyb21FbCwgdG9FbCkge1xuICAgICAgICBzeW5jQm9vbGVhbkF0dHJQcm9wKGZyb21FbCwgdG9FbCwgJ2NoZWNrZWQnKTtcbiAgICAgICAgc3luY0Jvb2xlYW5BdHRyUHJvcChmcm9tRWwsIHRvRWwsICdkaXNhYmxlZCcpO1xuXG4gICAgICAgIGlmIChmcm9tRWwudmFsdWUgIT09IHRvRWwudmFsdWUpIHtcbiAgICAgICAgICAgIGZyb21FbC52YWx1ZSA9IHRvRWwudmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRvRWwuaGFzQXR0cmlidXRlKCd2YWx1ZScpKSB7XG4gICAgICAgICAgICBmcm9tRWwucmVtb3ZlQXR0cmlidXRlKCd2YWx1ZScpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIFRFWFRBUkVBOiBmdW5jdGlvbihmcm9tRWwsIHRvRWwpIHtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gdG9FbC52YWx1ZTtcbiAgICAgICAgaWYgKGZyb21FbC52YWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIGZyb21FbC52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGZpcnN0Q2hpbGQgPSBmcm9tRWwuZmlyc3RDaGlsZDtcbiAgICAgICAgaWYgKGZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgIC8vIE5lZWRlZCBmb3IgSUUuIEFwcGFyZW50bHkgSUUgc2V0cyB0aGUgcGxhY2Vob2xkZXIgYXMgdGhlXG4gICAgICAgICAgICAvLyBub2RlIHZhbHVlIGFuZCB2aXNlIHZlcnNhLiBUaGlzIGlnbm9yZXMgYW4gZW1wdHkgdXBkYXRlLlxuICAgICAgICAgICAgdmFyIG9sZFZhbHVlID0gZmlyc3RDaGlsZC5ub2RlVmFsdWU7XG5cbiAgICAgICAgICAgIGlmIChvbGRWYWx1ZSA9PSBuZXdWYWx1ZSB8fCAoIW5ld1ZhbHVlICYmIG9sZFZhbHVlID09IGZyb21FbC5wbGFjZWhvbGRlcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZpcnN0Q2hpbGQubm9kZVZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIFNFTEVDVDogZnVuY3Rpb24oZnJvbUVsLCB0b0VsKSB7XG4gICAgICAgIGlmICghdG9FbC5oYXNBdHRyaWJ1dGUoJ211bHRpcGxlJykpIHtcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZEluZGV4ID0gLTE7XG4gICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICAvLyBXZSBoYXZlIHRvIGxvb3AgdGhyb3VnaCBjaGlsZHJlbiBvZiBmcm9tRWwsIG5vdCB0b0VsIHNpbmNlIG5vZGVzIGNhbiBiZSBtb3ZlZFxuICAgICAgICAgICAgLy8gZnJvbSB0b0VsIHRvIGZyb21FbCBkaXJlY3RseSB3aGVuIG1vcnBoaW5nLlxuICAgICAgICAgICAgLy8gQXQgdGhlIHRpbWUgdGhpcyBzcGVjaWFsIGhhbmRsZXIgaXMgaW52b2tlZCwgYWxsIGNoaWxkcmVuIGhhdmUgYWxyZWFkeSBiZWVuIG1vcnBoZWRcbiAgICAgICAgICAgIC8vIGFuZCBhcHBlbmRlZCB0byAvIHJlbW92ZWQgZnJvbSBmcm9tRWwsIHNvIHVzaW5nIGZyb21FbCBoZXJlIGlzIHNhZmUgYW5kIGNvcnJlY3QuXG4gICAgICAgICAgICB2YXIgY3VyQ2hpbGQgPSBmcm9tRWwuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIHZhciBvcHRncm91cDtcbiAgICAgICAgICAgIHZhciBub2RlTmFtZTtcbiAgICAgICAgICAgIHdoaWxlKGN1ckNoaWxkKSB7XG4gICAgICAgICAgICAgICAgbm9kZU5hbWUgPSBjdXJDaGlsZC5ub2RlTmFtZSAmJiBjdXJDaGlsZC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIGlmIChub2RlTmFtZSA9PT0gJ09QVEdST1VQJykge1xuICAgICAgICAgICAgICAgICAgICBvcHRncm91cCA9IGN1ckNoaWxkO1xuICAgICAgICAgICAgICAgICAgICBjdXJDaGlsZCA9IG9wdGdyb3VwLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGVOYW1lID09PSAnT1BUSU9OJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1ckNoaWxkLmhhc0F0dHJpYnV0ZSgnc2VsZWN0ZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkSW5kZXggPSBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGN1ckNoaWxkID0gY3VyQ2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY3VyQ2hpbGQgJiYgb3B0Z3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckNoaWxkID0gb3B0Z3JvdXAubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRncm91cCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZyb21FbC5zZWxlY3RlZEluZGV4ID0gc2VsZWN0ZWRJbmRleDtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBFTEVNRU5UX05PREUgPSAxO1xudmFyIERPQ1VNRU5UX0ZSQUdNRU5UX05PREUkMSA9IDExO1xudmFyIFRFWFRfTk9ERSA9IDM7XG52YXIgQ09NTUVOVF9OT0RFID0gODtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIGRlZmF1bHRHZXROb2RlS2V5KG5vZGUpIHtcbiAgaWYgKG5vZGUpIHtcbiAgICByZXR1cm4gKG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKCdpZCcpKSB8fCBub2RlLmlkO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1vcnBoZG9tRmFjdG9yeShtb3JwaEF0dHJzKSB7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIG1vcnBoZG9tKGZyb21Ob2RlLCB0b05vZGUsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHRvTm9kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmIChmcm9tTm9kZS5ub2RlTmFtZSA9PT0gJyNkb2N1bWVudCcgfHwgZnJvbU5vZGUubm9kZU5hbWUgPT09ICdIVE1MJyB8fCBmcm9tTm9kZS5ub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgICAgIHZhciB0b05vZGVIdG1sID0gdG9Ob2RlO1xuICAgICAgICB0b05vZGUgPSBkb2MuY3JlYXRlRWxlbWVudCgnaHRtbCcpO1xuICAgICAgICB0b05vZGUuaW5uZXJIVE1MID0gdG9Ob2RlSHRtbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRvTm9kZSA9IHRvRWxlbWVudCh0b05vZGUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodG9Ob2RlLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFJDEpIHtcbiAgICAgIHRvTm9kZSA9IHRvTm9kZS5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICB9XG5cbiAgICB2YXIgZ2V0Tm9kZUtleSA9IG9wdGlvbnMuZ2V0Tm9kZUtleSB8fCBkZWZhdWx0R2V0Tm9kZUtleTtcbiAgICB2YXIgb25CZWZvcmVOb2RlQWRkZWQgPSBvcHRpb25zLm9uQmVmb3JlTm9kZUFkZGVkIHx8IG5vb3A7XG4gICAgdmFyIG9uTm9kZUFkZGVkID0gb3B0aW9ucy5vbk5vZGVBZGRlZCB8fCBub29wO1xuICAgIHZhciBvbkJlZm9yZUVsVXBkYXRlZCA9IG9wdGlvbnMub25CZWZvcmVFbFVwZGF0ZWQgfHwgbm9vcDtcbiAgICB2YXIgb25FbFVwZGF0ZWQgPSBvcHRpb25zLm9uRWxVcGRhdGVkIHx8IG5vb3A7XG4gICAgdmFyIG9uQmVmb3JlTm9kZURpc2NhcmRlZCA9IG9wdGlvbnMub25CZWZvcmVOb2RlRGlzY2FyZGVkIHx8IG5vb3A7XG4gICAgdmFyIG9uTm9kZURpc2NhcmRlZCA9IG9wdGlvbnMub25Ob2RlRGlzY2FyZGVkIHx8IG5vb3A7XG4gICAgdmFyIG9uQmVmb3JlRWxDaGlsZHJlblVwZGF0ZWQgPSBvcHRpb25zLm9uQmVmb3JlRWxDaGlsZHJlblVwZGF0ZWQgfHwgbm9vcDtcbiAgICB2YXIgc2tpcEZyb21DaGlsZHJlbiA9IG9wdGlvbnMuc2tpcEZyb21DaGlsZHJlbiB8fCBub29wO1xuICAgIHZhciBhZGRDaGlsZCA9IG9wdGlvbnMuYWRkQ2hpbGQgfHwgZnVuY3Rpb24ocGFyZW50LCBjaGlsZCl7IHJldHVybiBwYXJlbnQuYXBwZW5kQ2hpbGQoY2hpbGQpOyB9O1xuICAgIHZhciBjaGlsZHJlbk9ubHkgPSBvcHRpb25zLmNoaWxkcmVuT25seSA9PT0gdHJ1ZTtcblxuICAgIC8vIFRoaXMgb2JqZWN0IGlzIHVzZWQgYXMgYSBsb29rdXAgdG8gcXVpY2tseSBmaW5kIGFsbCBrZXllZCBlbGVtZW50cyBpbiB0aGUgb3JpZ2luYWwgRE9NIHRyZWUuXG4gICAgdmFyIGZyb21Ob2Rlc0xvb2t1cCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIGtleWVkUmVtb3ZhbExpc3QgPSBbXTtcblxuICAgIGZ1bmN0aW9uIGFkZEtleWVkUmVtb3ZhbChrZXkpIHtcbiAgICAgIGtleWVkUmVtb3ZhbExpc3QucHVzaChrZXkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHdhbGtEaXNjYXJkZWRDaGlsZE5vZGVzKG5vZGUsIHNraXBLZXllZE5vZGVzKSB7XG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgIHZhciBjdXJDaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgICAgICAgd2hpbGUgKGN1ckNoaWxkKSB7XG5cbiAgICAgICAgICB2YXIga2V5ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKHNraXBLZXllZE5vZGVzICYmIChrZXkgPSBnZXROb2RlS2V5KGN1ckNoaWxkKSkpIHtcbiAgICAgICAgICAgIC8vIElmIHdlIGFyZSBza2lwcGluZyBrZXllZCBub2RlcyB0aGVuIHdlIGFkZCB0aGUga2V5XG4gICAgICAgICAgICAvLyB0byBhIGxpc3Qgc28gdGhhdCBpdCBjYW4gYmUgaGFuZGxlZCBhdCB0aGUgdmVyeSBlbmQuXG4gICAgICAgICAgICBhZGRLZXllZFJlbW92YWwoa2V5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gT25seSByZXBvcnQgdGhlIG5vZGUgYXMgZGlzY2FyZGVkIGlmIGl0IGlzIG5vdCBrZXllZC4gV2UgZG8gdGhpcyBiZWNhdXNlXG4gICAgICAgICAgICAvLyBhdCB0aGUgZW5kIHdlIGxvb3AgdGhyb3VnaCBhbGwga2V5ZWQgZWxlbWVudHMgdGhhdCB3ZXJlIHVubWF0Y2hlZFxuICAgICAgICAgICAgLy8gYW5kIHRoZW4gZGlzY2FyZCB0aGVtIGluIG9uZSBmaW5hbCBwYXNzLlxuICAgICAgICAgICAgb25Ob2RlRGlzY2FyZGVkKGN1ckNoaWxkKTtcbiAgICAgICAgICAgIGlmIChjdXJDaGlsZC5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgIHdhbGtEaXNjYXJkZWRDaGlsZE5vZGVzKGN1ckNoaWxkLCBza2lwS2V5ZWROb2Rlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3VyQ2hpbGQgPSBjdXJDaGlsZC5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICogUmVtb3ZlcyBhIERPTSBub2RlIG91dCBvZiB0aGUgb3JpZ2luYWwgRE9NXG4gICAgKlxuICAgICogQHBhcmFtICB7Tm9kZX0gbm9kZSBUaGUgbm9kZSB0byByZW1vdmVcbiAgICAqIEBwYXJhbSAge05vZGV9IHBhcmVudE5vZGUgVGhlIG5vZGVzIHBhcmVudFxuICAgICogQHBhcmFtICB7Qm9vbGVhbn0gc2tpcEtleWVkTm9kZXMgSWYgdHJ1ZSB0aGVuIGVsZW1lbnRzIHdpdGgga2V5cyB3aWxsIGJlIHNraXBwZWQgYW5kIG5vdCBkaXNjYXJkZWQuXG4gICAgKiBAcmV0dXJuIHt1bmRlZmluZWR9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZW1vdmVOb2RlKG5vZGUsIHBhcmVudE5vZGUsIHNraXBLZXllZE5vZGVzKSB7XG4gICAgICBpZiAob25CZWZvcmVOb2RlRGlzY2FyZGVkKG5vZGUpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJlbnROb2RlKSB7XG4gICAgICAgIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgICB9XG5cbiAgICAgIG9uTm9kZURpc2NhcmRlZChub2RlKTtcbiAgICAgIHdhbGtEaXNjYXJkZWRDaGlsZE5vZGVzKG5vZGUsIHNraXBLZXllZE5vZGVzKTtcbiAgICB9XG5cbiAgICAvLyAvLyBUcmVlV2Fsa2VyIGltcGxlbWVudGF0aW9uIGlzIG5vIGZhc3RlciwgYnV0IGtlZXBpbmcgdGhpcyBhcm91bmQgaW4gY2FzZSB0aGlzIGNoYW5nZXMgaW4gdGhlIGZ1dHVyZVxuICAgIC8vIGZ1bmN0aW9uIGluZGV4VHJlZShyb290KSB7XG4gICAgLy8gICAgIHZhciB0cmVlV2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihcbiAgICAvLyAgICAgICAgIHJvb3QsXG4gICAgLy8gICAgICAgICBOb2RlRmlsdGVyLlNIT1dfRUxFTUVOVCk7XG4gICAgLy9cbiAgICAvLyAgICAgdmFyIGVsO1xuICAgIC8vICAgICB3aGlsZSgoZWwgPSB0cmVlV2Fsa2VyLm5leHROb2RlKCkpKSB7XG4gICAgLy8gICAgICAgICB2YXIga2V5ID0gZ2V0Tm9kZUtleShlbCk7XG4gICAgLy8gICAgICAgICBpZiAoa2V5KSB7XG4gICAgLy8gICAgICAgICAgICAgZnJvbU5vZGVzTG9va3VwW2tleV0gPSBlbDtcbiAgICAvLyAgICAgICAgIH1cbiAgICAvLyAgICAgfVxuICAgIC8vIH1cblxuICAgIC8vIC8vIE5vZGVJdGVyYXRvciBpbXBsZW1lbnRhdGlvbiBpcyBubyBmYXN0ZXIsIGJ1dCBrZWVwaW5nIHRoaXMgYXJvdW5kIGluIGNhc2UgdGhpcyBjaGFuZ2VzIGluIHRoZSBmdXR1cmVcbiAgICAvL1xuICAgIC8vIGZ1bmN0aW9uIGluZGV4VHJlZShub2RlKSB7XG4gICAgLy8gICAgIHZhciBub2RlSXRlcmF0b3IgPSBkb2N1bWVudC5jcmVhdGVOb2RlSXRlcmF0b3Iobm9kZSwgTm9kZUZpbHRlci5TSE9XX0VMRU1FTlQpO1xuICAgIC8vICAgICB2YXIgZWw7XG4gICAgLy8gICAgIHdoaWxlKChlbCA9IG5vZGVJdGVyYXRvci5uZXh0Tm9kZSgpKSkge1xuICAgIC8vICAgICAgICAgdmFyIGtleSA9IGdldE5vZGVLZXkoZWwpO1xuICAgIC8vICAgICAgICAgaWYgKGtleSkge1xuICAgIC8vICAgICAgICAgICAgIGZyb21Ob2Rlc0xvb2t1cFtrZXldID0gZWw7XG4gICAgLy8gICAgICAgICB9XG4gICAgLy8gICAgIH1cbiAgICAvLyB9XG5cbiAgICBmdW5jdGlvbiBpbmRleFRyZWUobm9kZSkge1xuICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSB8fCBub2RlLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFJDEpIHtcbiAgICAgICAgdmFyIGN1ckNoaWxkID0gbm9kZS5maXJzdENoaWxkO1xuICAgICAgICB3aGlsZSAoY3VyQ2hpbGQpIHtcbiAgICAgICAgICB2YXIga2V5ID0gZ2V0Tm9kZUtleShjdXJDaGlsZCk7XG4gICAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgZnJvbU5vZGVzTG9va3VwW2tleV0gPSBjdXJDaGlsZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBXYWxrIHJlY3Vyc2l2ZWx5XG4gICAgICAgICAgaW5kZXhUcmVlKGN1ckNoaWxkKTtcblxuICAgICAgICAgIGN1ckNoaWxkID0gY3VyQ2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbmRleFRyZWUoZnJvbU5vZGUpO1xuXG4gICAgZnVuY3Rpb24gaGFuZGxlTm9kZUFkZGVkKGVsKSB7XG4gICAgICBvbk5vZGVBZGRlZChlbCk7XG5cbiAgICAgIHZhciBjdXJDaGlsZCA9IGVsLmZpcnN0Q2hpbGQ7XG4gICAgICB3aGlsZSAoY3VyQ2hpbGQpIHtcbiAgICAgICAgdmFyIG5leHRTaWJsaW5nID0gY3VyQ2hpbGQubmV4dFNpYmxpbmc7XG5cbiAgICAgICAgdmFyIGtleSA9IGdldE5vZGVLZXkoY3VyQ2hpbGQpO1xuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgdmFyIHVubWF0Y2hlZEZyb21FbCA9IGZyb21Ob2Rlc0xvb2t1cFtrZXldO1xuICAgICAgICAgIC8vIGlmIHdlIGZpbmQgYSBkdXBsaWNhdGUgI2lkIG5vZGUgaW4gY2FjaGUsIHJlcGxhY2UgYGVsYCB3aXRoIGNhY2hlIHZhbHVlXG4gICAgICAgICAgLy8gYW5kIG1vcnBoIGl0IHRvIHRoZSBjaGlsZCBub2RlLlxuICAgICAgICAgIGlmICh1bm1hdGNoZWRGcm9tRWwgJiYgY29tcGFyZU5vZGVOYW1lcyhjdXJDaGlsZCwgdW5tYXRjaGVkRnJvbUVsKSkge1xuICAgICAgICAgICAgY3VyQ2hpbGQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQodW5tYXRjaGVkRnJvbUVsLCBjdXJDaGlsZCk7XG4gICAgICAgICAgICBtb3JwaEVsKHVubWF0Y2hlZEZyb21FbCwgY3VyQ2hpbGQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoYW5kbGVOb2RlQWRkZWQoY3VyQ2hpbGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyByZWN1cnNpdmVseSBjYWxsIGZvciBjdXJDaGlsZCBhbmQgaXQncyBjaGlsZHJlbiB0byBzZWUgaWYgd2UgZmluZCBzb21ldGhpbmcgaW5cbiAgICAgICAgICAvLyBmcm9tTm9kZXNMb29rdXBcbiAgICAgICAgICBoYW5kbGVOb2RlQWRkZWQoY3VyQ2hpbGQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VyQ2hpbGQgPSBuZXh0U2libGluZztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhbnVwRnJvbUVsKGZyb21FbCwgY3VyRnJvbU5vZGVDaGlsZCwgY3VyRnJvbU5vZGVLZXkpIHtcbiAgICAgIC8vIFdlIGhhdmUgcHJvY2Vzc2VkIGFsbCBvZiB0aGUgXCJ0byBub2Rlc1wiLiBJZiBjdXJGcm9tTm9kZUNoaWxkIGlzXG4gICAgICAvLyBub24tbnVsbCB0aGVuIHdlIHN0aWxsIGhhdmUgc29tZSBmcm9tIG5vZGVzIGxlZnQgb3ZlciB0aGF0IG5lZWRcbiAgICAgIC8vIHRvIGJlIHJlbW92ZWRcbiAgICAgIHdoaWxlIChjdXJGcm9tTm9kZUNoaWxkKSB7XG4gICAgICAgIHZhciBmcm9tTmV4dFNpYmxpbmcgPSBjdXJGcm9tTm9kZUNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICBpZiAoKGN1ckZyb21Ob2RlS2V5ID0gZ2V0Tm9kZUtleShjdXJGcm9tTm9kZUNoaWxkKSkpIHtcbiAgICAgICAgICAvLyBTaW5jZSB0aGUgbm9kZSBpcyBrZXllZCBpdCBtaWdodCBiZSBtYXRjaGVkIHVwIGxhdGVyIHNvIHdlIGRlZmVyXG4gICAgICAgICAgLy8gdGhlIGFjdHVhbCByZW1vdmFsIHRvIGxhdGVyXG4gICAgICAgICAgYWRkS2V5ZWRSZW1vdmFsKGN1ckZyb21Ob2RlS2V5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBOT1RFOiB3ZSBza2lwIG5lc3RlZCBrZXllZCBub2RlcyBmcm9tIGJlaW5nIHJlbW92ZWQgc2luY2UgdGhlcmUgaXNcbiAgICAgICAgICAvLyAgICAgICBzdGlsbCBhIGNoYW5jZSB0aGV5IHdpbGwgYmUgbWF0Y2hlZCB1cCBsYXRlclxuICAgICAgICAgIHJlbW92ZU5vZGUoY3VyRnJvbU5vZGVDaGlsZCwgZnJvbUVsLCB0cnVlIC8qIHNraXAga2V5ZWQgbm9kZXMgKi8pO1xuICAgICAgICB9XG4gICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQgPSBmcm9tTmV4dFNpYmxpbmc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9ycGhFbChmcm9tRWwsIHRvRWwsIGNoaWxkcmVuT25seSkge1xuICAgICAgdmFyIHRvRWxLZXkgPSBnZXROb2RlS2V5KHRvRWwpO1xuXG4gICAgICBpZiAodG9FbEtleSkge1xuICAgICAgICAvLyBJZiBhbiBlbGVtZW50IHdpdGggYW4gSUQgaXMgYmVpbmcgbW9ycGhlZCB0aGVuIGl0IHdpbGwgYmUgaW4gdGhlIGZpbmFsXG4gICAgICAgIC8vIERPTSBzbyBjbGVhciBpdCBvdXQgb2YgdGhlIHNhdmVkIGVsZW1lbnRzIGNvbGxlY3Rpb25cbiAgICAgICAgZGVsZXRlIGZyb21Ob2Rlc0xvb2t1cFt0b0VsS2V5XTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFjaGlsZHJlbk9ubHkpIHtcbiAgICAgICAgLy8gb3B0aW9uYWxcbiAgICAgICAgaWYgKG9uQmVmb3JlRWxVcGRhdGVkKGZyb21FbCwgdG9FbCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIGF0dHJpYnV0ZXMgb24gb3JpZ2luYWwgRE9NIGVsZW1lbnQgZmlyc3RcbiAgICAgICAgbW9ycGhBdHRycyhmcm9tRWwsIHRvRWwpO1xuICAgICAgICAvLyBvcHRpb25hbFxuICAgICAgICBvbkVsVXBkYXRlZChmcm9tRWwpO1xuXG4gICAgICAgIGlmIChvbkJlZm9yZUVsQ2hpbGRyZW5VcGRhdGVkKGZyb21FbCwgdG9FbCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmcm9tRWwubm9kZU5hbWUgIT09ICdURVhUQVJFQScpIHtcbiAgICAgICAgbW9ycGhDaGlsZHJlbihmcm9tRWwsIHRvRWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3BlY2lhbEVsSGFuZGxlcnMuVEVYVEFSRUEoZnJvbUVsLCB0b0VsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3JwaENoaWxkcmVuKGZyb21FbCwgdG9FbCkge1xuICAgICAgdmFyIHNraXBGcm9tID0gc2tpcEZyb21DaGlsZHJlbihmcm9tRWwpO1xuICAgICAgdmFyIGN1clRvTm9kZUNoaWxkID0gdG9FbC5maXJzdENoaWxkO1xuICAgICAgdmFyIGN1ckZyb21Ob2RlQ2hpbGQgPSBmcm9tRWwuZmlyc3RDaGlsZDtcbiAgICAgIHZhciBjdXJUb05vZGVLZXk7XG4gICAgICB2YXIgY3VyRnJvbU5vZGVLZXk7XG5cbiAgICAgIHZhciBmcm9tTmV4dFNpYmxpbmc7XG4gICAgICB2YXIgdG9OZXh0U2libGluZztcbiAgICAgIHZhciBtYXRjaGluZ0Zyb21FbDtcblxuICAgICAgLy8gd2FsayB0aGUgY2hpbGRyZW5cbiAgICAgIG91dGVyOiB3aGlsZSAoY3VyVG9Ob2RlQ2hpbGQpIHtcbiAgICAgICAgdG9OZXh0U2libGluZyA9IGN1clRvTm9kZUNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICBjdXJUb05vZGVLZXkgPSBnZXROb2RlS2V5KGN1clRvTm9kZUNoaWxkKTtcblxuICAgICAgICAvLyB3YWxrIHRoZSBmcm9tTm9kZSBjaGlsZHJlbiBhbGwgdGhlIHdheSB0aHJvdWdoXG4gICAgICAgIHdoaWxlICghc2tpcEZyb20gJiYgY3VyRnJvbU5vZGVDaGlsZCkge1xuICAgICAgICAgIGZyb21OZXh0U2libGluZyA9IGN1ckZyb21Ob2RlQ2hpbGQubmV4dFNpYmxpbmc7XG5cbiAgICAgICAgICBpZiAoY3VyVG9Ob2RlQ2hpbGQuaXNTYW1lTm9kZSAmJiBjdXJUb05vZGVDaGlsZC5pc1NhbWVOb2RlKGN1ckZyb21Ob2RlQ2hpbGQpKSB7XG4gICAgICAgICAgICBjdXJUb05vZGVDaGlsZCA9IHRvTmV4dFNpYmxpbmc7XG4gICAgICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbU5leHRTaWJsaW5nO1xuICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3VyRnJvbU5vZGVLZXkgPSBnZXROb2RlS2V5KGN1ckZyb21Ob2RlQ2hpbGQpO1xuXG4gICAgICAgICAgdmFyIGN1ckZyb21Ob2RlVHlwZSA9IGN1ckZyb21Ob2RlQ2hpbGQubm9kZVR5cGU7XG5cbiAgICAgICAgICAvLyB0aGlzIG1lYW5zIGlmIHRoZSBjdXJGcm9tTm9kZUNoaWxkIGRvZXNudCBoYXZlIGEgbWF0Y2ggd2l0aCB0aGUgY3VyVG9Ob2RlQ2hpbGRcbiAgICAgICAgICB2YXIgaXNDb21wYXRpYmxlID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKGN1ckZyb21Ob2RlVHlwZSA9PT0gY3VyVG9Ob2RlQ2hpbGQubm9kZVR5cGUpIHtcbiAgICAgICAgICAgIGlmIChjdXJGcm9tTm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSkge1xuICAgICAgICAgICAgICAvLyBCb3RoIG5vZGVzIGJlaW5nIGNvbXBhcmVkIGFyZSBFbGVtZW50IG5vZGVzXG5cbiAgICAgICAgICAgICAgaWYgKGN1clRvTm9kZUtleSkge1xuICAgICAgICAgICAgICAgIC8vIFRoZSB0YXJnZXQgbm9kZSBoYXMgYSBrZXkgc28gd2Ugd2FudCB0byBtYXRjaCBpdCB1cCB3aXRoIHRoZSBjb3JyZWN0IGVsZW1lbnRcbiAgICAgICAgICAgICAgICAvLyBpbiB0aGUgb3JpZ2luYWwgRE9NIHRyZWVcbiAgICAgICAgICAgICAgICBpZiAoY3VyVG9Ob2RlS2V5ICE9PSBjdXJGcm9tTm9kZUtleSkge1xuICAgICAgICAgICAgICAgICAgLy8gVGhlIGN1cnJlbnQgZWxlbWVudCBpbiB0aGUgb3JpZ2luYWwgRE9NIHRyZWUgZG9lcyBub3QgaGF2ZSBhIG1hdGNoaW5nIGtleSBzb1xuICAgICAgICAgICAgICAgICAgLy8gbGV0J3MgY2hlY2sgb3VyIGxvb2t1cCB0byBzZWUgaWYgdGhlcmUgaXMgYSBtYXRjaGluZyBlbGVtZW50IGluIHRoZSBvcmlnaW5hbFxuICAgICAgICAgICAgICAgICAgLy8gRE9NIHRyZWVcbiAgICAgICAgICAgICAgICAgIGlmICgobWF0Y2hpbmdGcm9tRWwgPSBmcm9tTm9kZXNMb29rdXBbY3VyVG9Ob2RlS2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZyb21OZXh0U2libGluZyA9PT0gbWF0Y2hpbmdGcm9tRWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIHNpbmdsZSBlbGVtZW50IHJlbW92YWxzLiBUbyBhdm9pZCByZW1vdmluZyB0aGUgb3JpZ2luYWxcbiAgICAgICAgICAgICAgICAgICAgICAvLyBET00gbm9kZSBvdXQgb2YgdGhlIHRyZWUgKHNpbmNlIHRoYXQgY2FuIGJyZWFrIENTUyB0cmFuc2l0aW9ucywgZXRjLiksXG4gICAgICAgICAgICAgICAgICAgICAgLy8gd2Ugd2lsbCBpbnN0ZWFkIGRpc2NhcmQgdGhlIGN1cnJlbnQgbm9kZSBhbmQgd2FpdCB1bnRpbCB0aGUgbmV4dFxuICAgICAgICAgICAgICAgICAgICAgIC8vIGl0ZXJhdGlvbiB0byBwcm9wZXJseSBtYXRjaCB1cCB0aGUga2V5ZWQgdGFyZ2V0IGVsZW1lbnQgd2l0aCBpdHMgbWF0Y2hpbmdcbiAgICAgICAgICAgICAgICAgICAgICAvLyBlbGVtZW50IGluIHRoZSBvcmlnaW5hbCB0cmVlXG4gICAgICAgICAgICAgICAgICAgICAgaXNDb21wYXRpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gV2UgZm91bmQgYSBtYXRjaGluZyBrZXllZCBlbGVtZW50IHNvbWV3aGVyZSBpbiB0aGUgb3JpZ2luYWwgRE9NIHRyZWUuXG4gICAgICAgICAgICAgICAgICAgICAgLy8gTGV0J3MgbW92ZSB0aGUgb3JpZ2luYWwgRE9NIG5vZGUgaW50byB0aGUgY3VycmVudCBwb3NpdGlvbiBhbmQgbW9ycGhcbiAgICAgICAgICAgICAgICAgICAgICAvLyBpdC5cblxuICAgICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6IFdlIHVzZSBpbnNlcnRCZWZvcmUgaW5zdGVhZCBvZiByZXBsYWNlQ2hpbGQgYmVjYXVzZSB3ZSB3YW50IHRvIGdvIHRocm91Z2hcbiAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgYHJlbW92ZU5vZGUoKWAgZnVuY3Rpb24gZm9yIHRoZSBub2RlIHRoYXQgaXMgYmVpbmcgZGlzY2FyZGVkIHNvIHRoYXRcbiAgICAgICAgICAgICAgICAgICAgICAvLyBhbGwgbGlmZWN5Y2xlIGhvb2tzIGFyZSBjb3JyZWN0bHkgaW52b2tlZFxuICAgICAgICAgICAgICAgICAgICAgIGZyb21FbC5pbnNlcnRCZWZvcmUobWF0Y2hpbmdGcm9tRWwsIGN1ckZyb21Ob2RlQ2hpbGQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgLy8gZnJvbU5leHRTaWJsaW5nID0gY3VyRnJvbU5vZGVDaGlsZC5uZXh0U2libGluZztcblxuICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJGcm9tTm9kZUtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2luY2UgdGhlIG5vZGUgaXMga2V5ZWQgaXQgbWlnaHQgYmUgbWF0Y2hlZCB1cCBsYXRlciBzbyB3ZSBkZWZlclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGFjdHVhbCByZW1vdmFsIHRvIGxhdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRLZXllZFJlbW92YWwoY3VyRnJvbU5vZGVLZXkpO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOT1RFOiB3ZSBza2lwIG5lc3RlZCBrZXllZCBub2RlcyBmcm9tIGJlaW5nIHJlbW92ZWQgc2luY2UgdGhlcmUgaXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgIHN0aWxsIGEgY2hhbmNlIHRoZXkgd2lsbCBiZSBtYXRjaGVkIHVwIGxhdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVOb2RlKGN1ckZyb21Ob2RlQ2hpbGQsIGZyb21FbCwgdHJ1ZSAvKiBza2lwIGtleWVkIG5vZGVzICovKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gbWF0Y2hpbmdGcm9tRWw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBub2RlcyBhcmUgbm90IGNvbXBhdGlibGUgc2luY2UgdGhlIFwidG9cIiBub2RlIGhhcyBhIGtleSBhbmQgdGhlcmVcbiAgICAgICAgICAgICAgICAgICAgLy8gaXMgbm8gbWF0Y2hpbmcga2V5ZWQgbm9kZSBpbiB0aGUgc291cmNlIHRyZWVcbiAgICAgICAgICAgICAgICAgICAgaXNDb21wYXRpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGN1ckZyb21Ob2RlS2V5KSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIG9yaWdpbmFsIGhhcyBhIGtleVxuICAgICAgICAgICAgICAgIGlzQ29tcGF0aWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaXNDb21wYXRpYmxlID0gaXNDb21wYXRpYmxlICE9PSBmYWxzZSAmJiBjb21wYXJlTm9kZU5hbWVzKGN1ckZyb21Ob2RlQ2hpbGQsIGN1clRvTm9kZUNoaWxkKTtcbiAgICAgICAgICAgICAgaWYgKGlzQ29tcGF0aWJsZSkge1xuICAgICAgICAgICAgICAgIC8vIFdlIGZvdW5kIGNvbXBhdGlibGUgRE9NIGVsZW1lbnRzIHNvIHRyYW5zZm9ybVxuICAgICAgICAgICAgICAgIC8vIHRoZSBjdXJyZW50IFwiZnJvbVwiIG5vZGUgdG8gbWF0Y2ggdGhlIGN1cnJlbnRcbiAgICAgICAgICAgICAgICAvLyB0YXJnZXQgRE9NIG5vZGUuXG4gICAgICAgICAgICAgICAgLy8gTU9SUEhcbiAgICAgICAgICAgICAgICBtb3JwaEVsKGN1ckZyb21Ob2RlQ2hpbGQsIGN1clRvTm9kZUNoaWxkKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGN1ckZyb21Ob2RlVHlwZSA9PT0gVEVYVF9OT0RFIHx8IGN1ckZyb21Ob2RlVHlwZSA9PSBDT01NRU5UX05PREUpIHtcbiAgICAgICAgICAgICAgLy8gQm90aCBub2RlcyBiZWluZyBjb21wYXJlZCBhcmUgVGV4dCBvciBDb21tZW50IG5vZGVzXG4gICAgICAgICAgICAgIGlzQ29tcGF0aWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgIC8vIFNpbXBseSB1cGRhdGUgbm9kZVZhbHVlIG9uIHRoZSBvcmlnaW5hbCBub2RlIHRvXG4gICAgICAgICAgICAgIC8vIGNoYW5nZSB0aGUgdGV4dCB2YWx1ZVxuICAgICAgICAgICAgICBpZiAoY3VyRnJvbU5vZGVDaGlsZC5ub2RlVmFsdWUgIT09IGN1clRvTm9kZUNoaWxkLm5vZGVWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGN1ckZyb21Ob2RlQ2hpbGQubm9kZVZhbHVlID0gY3VyVG9Ob2RlQ2hpbGQubm9kZVZhbHVlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXNDb21wYXRpYmxlKSB7XG4gICAgICAgICAgICAvLyBBZHZhbmNlIGJvdGggdGhlIFwidG9cIiBjaGlsZCBhbmQgdGhlIFwiZnJvbVwiIGNoaWxkIHNpbmNlIHdlIGZvdW5kIGEgbWF0Y2hcbiAgICAgICAgICAgIC8vIE5vdGhpbmcgZWxzZSB0byBkbyBhcyB3ZSBhbHJlYWR5IHJlY3Vyc2l2ZWx5IGNhbGxlZCBtb3JwaENoaWxkcmVuIGFib3ZlXG4gICAgICAgICAgICBjdXJUb05vZGVDaGlsZCA9IHRvTmV4dFNpYmxpbmc7XG4gICAgICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbU5leHRTaWJsaW5nO1xuICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gTm8gY29tcGF0aWJsZSBtYXRjaCBzbyByZW1vdmUgdGhlIG9sZCBub2RlIGZyb20gdGhlIERPTSBhbmQgY29udGludWUgdHJ5aW5nIHRvIGZpbmQgYVxuICAgICAgICAgIC8vIG1hdGNoIGluIHRoZSBvcmlnaW5hbCBET00uIEhvd2V2ZXIsIHdlIG9ubHkgZG8gdGhpcyBpZiB0aGUgZnJvbSBub2RlIGlzIG5vdCBrZXllZFxuICAgICAgICAgIC8vIHNpbmNlIGl0IGlzIHBvc3NpYmxlIHRoYXQgYSBrZXllZCBub2RlIG1pZ2h0IG1hdGNoIHVwIHdpdGggYSBub2RlIHNvbWV3aGVyZSBlbHNlIGluIHRoZVxuICAgICAgICAgIC8vIHRhcmdldCB0cmVlIGFuZCB3ZSBkb24ndCB3YW50IHRvIGRpc2NhcmQgaXQganVzdCB5ZXQgc2luY2UgaXQgc3RpbGwgbWlnaHQgZmluZCBhXG4gICAgICAgICAgLy8gaG9tZSBpbiB0aGUgZmluYWwgRE9NIHRyZWUuIEFmdGVyIGV2ZXJ5dGhpbmcgaXMgZG9uZSB3ZSB3aWxsIHJlbW92ZSBhbnkga2V5ZWQgbm9kZXNcbiAgICAgICAgICAvLyB0aGF0IGRpZG4ndCBmaW5kIGEgaG9tZVxuICAgICAgICAgIGlmIChjdXJGcm9tTm9kZUtleSkge1xuICAgICAgICAgICAgLy8gU2luY2UgdGhlIG5vZGUgaXMga2V5ZWQgaXQgbWlnaHQgYmUgbWF0Y2hlZCB1cCBsYXRlciBzbyB3ZSBkZWZlclxuICAgICAgICAgICAgLy8gdGhlIGFjdHVhbCByZW1vdmFsIHRvIGxhdGVyXG4gICAgICAgICAgICBhZGRLZXllZFJlbW92YWwoY3VyRnJvbU5vZGVLZXkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBOT1RFOiB3ZSBza2lwIG5lc3RlZCBrZXllZCBub2RlcyBmcm9tIGJlaW5nIHJlbW92ZWQgc2luY2UgdGhlcmUgaXNcbiAgICAgICAgICAgIC8vICAgICAgIHN0aWxsIGEgY2hhbmNlIHRoZXkgd2lsbCBiZSBtYXRjaGVkIHVwIGxhdGVyXG4gICAgICAgICAgICByZW1vdmVOb2RlKGN1ckZyb21Ob2RlQ2hpbGQsIGZyb21FbCwgdHJ1ZSAvKiBza2lwIGtleWVkIG5vZGVzICovKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbU5leHRTaWJsaW5nO1xuICAgICAgICB9IC8vIEVORDogd2hpbGUoY3VyRnJvbU5vZGVDaGlsZCkge31cblxuICAgICAgICAvLyBJZiB3ZSBnb3QgdGhpcyBmYXIgdGhlbiB3ZSBkaWQgbm90IGZpbmQgYSBjYW5kaWRhdGUgbWF0Y2ggZm9yXG4gICAgICAgIC8vIG91ciBcInRvIG5vZGVcIiBhbmQgd2UgZXhoYXVzdGVkIGFsbCBvZiB0aGUgY2hpbGRyZW4gXCJmcm9tXCJcbiAgICAgICAgLy8gbm9kZXMuIFRoZXJlZm9yZSwgd2Ugd2lsbCBqdXN0IGFwcGVuZCB0aGUgY3VycmVudCBcInRvXCIgbm9kZVxuICAgICAgICAvLyB0byB0aGUgZW5kXG4gICAgICAgIGlmIChjdXJUb05vZGVLZXkgJiYgKG1hdGNoaW5nRnJvbUVsID0gZnJvbU5vZGVzTG9va3VwW2N1clRvTm9kZUtleV0pICYmIGNvbXBhcmVOb2RlTmFtZXMobWF0Y2hpbmdGcm9tRWwsIGN1clRvTm9kZUNoaWxkKSkge1xuICAgICAgICAgIC8vIE1PUlBIXG4gICAgICAgICAgaWYoIXNraXBGcm9tKXsgYWRkQ2hpbGQoZnJvbUVsLCBtYXRjaGluZ0Zyb21FbCk7IH1cbiAgICAgICAgICBtb3JwaEVsKG1hdGNoaW5nRnJvbUVsLCBjdXJUb05vZGVDaGlsZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG9uQmVmb3JlTm9kZUFkZGVkUmVzdWx0ID0gb25CZWZvcmVOb2RlQWRkZWQoY3VyVG9Ob2RlQ2hpbGQpO1xuICAgICAgICAgIGlmIChvbkJlZm9yZU5vZGVBZGRlZFJlc3VsdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmIChvbkJlZm9yZU5vZGVBZGRlZFJlc3VsdCkge1xuICAgICAgICAgICAgICBjdXJUb05vZGVDaGlsZCA9IG9uQmVmb3JlTm9kZUFkZGVkUmVzdWx0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY3VyVG9Ob2RlQ2hpbGQuYWN0dWFsaXplKSB7XG4gICAgICAgICAgICAgIGN1clRvTm9kZUNoaWxkID0gY3VyVG9Ob2RlQ2hpbGQuYWN0dWFsaXplKGZyb21FbC5vd25lckRvY3VtZW50IHx8IGRvYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRDaGlsZChmcm9tRWwsIGN1clRvTm9kZUNoaWxkKTtcbiAgICAgICAgICAgIGhhbmRsZU5vZGVBZGRlZChjdXJUb05vZGVDaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY3VyVG9Ob2RlQ2hpbGQgPSB0b05leHRTaWJsaW5nO1xuICAgICAgICBjdXJGcm9tTm9kZUNoaWxkID0gZnJvbU5leHRTaWJsaW5nO1xuICAgICAgfVxuXG4gICAgICBjbGVhbnVwRnJvbUVsKGZyb21FbCwgY3VyRnJvbU5vZGVDaGlsZCwgY3VyRnJvbU5vZGVLZXkpO1xuXG4gICAgICB2YXIgc3BlY2lhbEVsSGFuZGxlciA9IHNwZWNpYWxFbEhhbmRsZXJzW2Zyb21FbC5ub2RlTmFtZV07XG4gICAgICBpZiAoc3BlY2lhbEVsSGFuZGxlcikge1xuICAgICAgICBzcGVjaWFsRWxIYW5kbGVyKGZyb21FbCwgdG9FbCk7XG4gICAgICB9XG4gICAgfSAvLyBFTkQ6IG1vcnBoQ2hpbGRyZW4oLi4uKVxuXG4gICAgdmFyIG1vcnBoZWROb2RlID0gZnJvbU5vZGU7XG4gICAgdmFyIG1vcnBoZWROb2RlVHlwZSA9IG1vcnBoZWROb2RlLm5vZGVUeXBlO1xuICAgIHZhciB0b05vZGVUeXBlID0gdG9Ob2RlLm5vZGVUeXBlO1xuXG4gICAgaWYgKCFjaGlsZHJlbk9ubHkpIHtcbiAgICAgIC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSB3ZSBhcmUgZ2l2ZW4gdHdvIERPTSBub2RlcyB0aGF0IGFyZSBub3RcbiAgICAgIC8vIGNvbXBhdGlibGUgKGUuZy4gPGRpdj4gLS0+IDxzcGFuPiBvciA8ZGl2PiAtLT4gVEVYVClcbiAgICAgIGlmIChtb3JwaGVkTm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSkge1xuICAgICAgICBpZiAodG9Ob2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgaWYgKCFjb21wYXJlTm9kZU5hbWVzKGZyb21Ob2RlLCB0b05vZGUpKSB7XG4gICAgICAgICAgICBvbk5vZGVEaXNjYXJkZWQoZnJvbU5vZGUpO1xuICAgICAgICAgICAgbW9ycGhlZE5vZGUgPSBtb3ZlQ2hpbGRyZW4oZnJvbU5vZGUsIGNyZWF0ZUVsZW1lbnROUyh0b05vZGUubm9kZU5hbWUsIHRvTm9kZS5uYW1lc3BhY2VVUkkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gR29pbmcgZnJvbSBhbiBlbGVtZW50IG5vZGUgdG8gYSB0ZXh0IG5vZGVcbiAgICAgICAgICBtb3JwaGVkTm9kZSA9IHRvTm9kZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChtb3JwaGVkTm9kZVR5cGUgPT09IFRFWFRfTk9ERSB8fCBtb3JwaGVkTm9kZVR5cGUgPT09IENPTU1FTlRfTk9ERSkgeyAvLyBUZXh0IG9yIGNvbW1lbnQgbm9kZVxuICAgICAgICBpZiAodG9Ob2RlVHlwZSA9PT0gbW9ycGhlZE5vZGVUeXBlKSB7XG4gICAgICAgICAgaWYgKG1vcnBoZWROb2RlLm5vZGVWYWx1ZSAhPT0gdG9Ob2RlLm5vZGVWYWx1ZSkge1xuICAgICAgICAgICAgbW9ycGhlZE5vZGUubm9kZVZhbHVlID0gdG9Ob2RlLm5vZGVWYWx1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbW9ycGhlZE5vZGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gVGV4dCBub2RlIHRvIHNvbWV0aGluZyBlbHNlXG4gICAgICAgICAgbW9ycGhlZE5vZGUgPSB0b05vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9ycGhlZE5vZGUgPT09IHRvTm9kZSkge1xuICAgICAgLy8gVGhlIFwidG8gbm9kZVwiIHdhcyBub3QgY29tcGF0aWJsZSB3aXRoIHRoZSBcImZyb20gbm9kZVwiIHNvIHdlIGhhZCB0b1xuICAgICAgLy8gdG9zcyBvdXQgdGhlIFwiZnJvbSBub2RlXCIgYW5kIHVzZSB0aGUgXCJ0byBub2RlXCJcbiAgICAgIG9uTm9kZURpc2NhcmRlZChmcm9tTm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0b05vZGUuaXNTYW1lTm9kZSAmJiB0b05vZGUuaXNTYW1lTm9kZShtb3JwaGVkTm9kZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBtb3JwaEVsKG1vcnBoZWROb2RlLCB0b05vZGUsIGNoaWxkcmVuT25seSk7XG5cbiAgICAgIC8vIFdlIG5vdyBuZWVkIHRvIGxvb3Agb3ZlciBhbnkga2V5ZWQgbm9kZXMgdGhhdCBtaWdodCBuZWVkIHRvIGJlXG4gICAgICAvLyByZW1vdmVkLiBXZSBvbmx5IGRvIHRoZSByZW1vdmFsIGlmIHdlIGtub3cgdGhhdCB0aGUga2V5ZWQgbm9kZVxuICAgICAgLy8gbmV2ZXIgZm91bmQgYSBtYXRjaC4gV2hlbiBhIGtleWVkIG5vZGUgaXMgbWF0Y2hlZCB1cCB3ZSByZW1vdmVcbiAgICAgIC8vIGl0IG91dCBvZiBmcm9tTm9kZXNMb29rdXAgYW5kIHdlIHVzZSBmcm9tTm9kZXNMb29rdXAgdG8gZGV0ZXJtaW5lXG4gICAgICAvLyBpZiBhIGtleWVkIG5vZGUgaGFzIGJlZW4gbWF0Y2hlZCB1cCBvciBub3RcbiAgICAgIGlmIChrZXllZFJlbW92YWxMaXN0KSB7XG4gICAgICAgIGZvciAodmFyIGk9MCwgbGVuPWtleWVkUmVtb3ZhbExpc3QubGVuZ3RoOyBpPGxlbjsgaSsrKSB7XG4gICAgICAgICAgdmFyIGVsVG9SZW1vdmUgPSBmcm9tTm9kZXNMb29rdXBba2V5ZWRSZW1vdmFsTGlzdFtpXV07XG4gICAgICAgICAgaWYgKGVsVG9SZW1vdmUpIHtcbiAgICAgICAgICAgIHJlbW92ZU5vZGUoZWxUb1JlbW92ZSwgZWxUb1JlbW92ZS5wYXJlbnROb2RlLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFjaGlsZHJlbk9ubHkgJiYgbW9ycGhlZE5vZGUgIT09IGZyb21Ob2RlICYmIGZyb21Ob2RlLnBhcmVudE5vZGUpIHtcbiAgICAgIGlmIChtb3JwaGVkTm9kZS5hY3R1YWxpemUpIHtcbiAgICAgICAgbW9ycGhlZE5vZGUgPSBtb3JwaGVkTm9kZS5hY3R1YWxpemUoZnJvbU5vZGUub3duZXJEb2N1bWVudCB8fCBkb2MpO1xuICAgICAgfVxuICAgICAgLy8gSWYgd2UgaGFkIHRvIHN3YXAgb3V0IHRoZSBmcm9tIG5vZGUgd2l0aCBhIG5ldyBub2RlIGJlY2F1c2UgdGhlIG9sZFxuICAgICAgLy8gbm9kZSB3YXMgbm90IGNvbXBhdGlibGUgd2l0aCB0aGUgdGFyZ2V0IG5vZGUgdGhlbiB3ZSBuZWVkIHRvXG4gICAgICAvLyByZXBsYWNlIHRoZSBvbGQgRE9NIG5vZGUgaW4gdGhlIG9yaWdpbmFsIERPTSB0cmVlLiBUaGlzIGlzIG9ubHlcbiAgICAgIC8vIHBvc3NpYmxlIGlmIHRoZSBvcmlnaW5hbCBET00gbm9kZSB3YXMgcGFydCBvZiBhIERPTSB0cmVlIHdoaWNoXG4gICAgICAvLyB3ZSBrbm93IGlzIHRoZSBjYXNlIGlmIGl0IGhhcyBhIHBhcmVudCBub2RlLlxuICAgICAgZnJvbU5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobW9ycGhlZE5vZGUsIGZyb21Ob2RlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbW9ycGhlZE5vZGU7XG4gIH07XG59XG5cbnZhciBtb3JwaGRvbSA9IG1vcnBoZG9tRmFjdG9yeShtb3JwaEF0dHJzKTtcblxuZXhwb3J0IGRlZmF1bHQgbW9ycGhkb207XG4iLCAiaW1wb3J0IHtcbiAgUEhYX0NPTVBPTkVOVCxcbiAgUEhYX0RJU0FCTEVfV0lUSCxcbiAgUEhYX0ZFRURCQUNLX0ZPUixcbiAgUEhYX1BSVU5FLFxuICBQSFhfUk9PVF9JRCxcbiAgUEhYX1NFU1NJT04sXG4gIFBIWF9TS0lQLFxuICBQSFhfU1RBVElDLFxuICBQSFhfVFJJR0dFUl9BQ1RJT04sXG4gIFBIWF9VUERBVEUsXG4gIFBIWF9TVFJFQU0sXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCB7XG4gIGRldGVjdER1cGxpY2F0ZUlkcyxcbiAgaXNDaWRcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5pbXBvcnQgRE9NIGZyb20gXCIuL2RvbVwiXG5pbXBvcnQgRE9NUG9zdE1vcnBoUmVzdG9yZXIgZnJvbSBcIi4vZG9tX3Bvc3RfbW9ycGhfcmVzdG9yZXJcIlxuaW1wb3J0IG1vcnBoZG9tIGZyb20gXCJtb3JwaGRvbVwiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERPTVBhdGNoIHtcbiAgc3RhdGljIHBhdGNoRWwoZnJvbUVsLCB0b0VsLCBhY3RpdmVFbGVtZW50KXtcbiAgICBtb3JwaGRvbShmcm9tRWwsIHRvRWwsIHtcbiAgICAgIGNoaWxkcmVuT25seTogZmFsc2UsXG4gICAgICBvbkJlZm9yZUVsVXBkYXRlZDogKGZyb21FbCwgdG9FbCkgPT4ge1xuICAgICAgICBpZihhY3RpdmVFbGVtZW50ICYmIGFjdGl2ZUVsZW1lbnQuaXNTYW1lTm9kZShmcm9tRWwpICYmIERPTS5pc0Zvcm1JbnB1dChmcm9tRWwpKXtcbiAgICAgICAgICBET00ubWVyZ2VGb2N1c2VkSW5wdXQoZnJvbUVsLCB0b0VsKVxuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHZpZXcsIGNvbnRhaW5lciwgaWQsIGh0bWwsIHN0cmVhbXMsIHRhcmdldENJRCl7XG4gICAgdGhpcy52aWV3ID0gdmlld1xuICAgIHRoaXMubGl2ZVNvY2tldCA9IHZpZXcubGl2ZVNvY2tldFxuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyXG4gICAgdGhpcy5pZCA9IGlkXG4gICAgdGhpcy5yb290SUQgPSB2aWV3LnJvb3QuaWRcbiAgICB0aGlzLmh0bWwgPSBodG1sXG4gICAgdGhpcy5zdHJlYW1zID0gc3RyZWFtc1xuICAgIHRoaXMuc3RyZWFtSW5zZXJ0cyA9IHt9XG4gICAgdGhpcy50YXJnZXRDSUQgPSB0YXJnZXRDSURcbiAgICB0aGlzLmNpZFBhdGNoID0gaXNDaWQodGhpcy50YXJnZXRDSUQpXG4gICAgdGhpcy5wZW5kaW5nUmVtb3ZlcyA9IFtdXG4gICAgdGhpcy5waHhSZW1vdmUgPSB0aGlzLmxpdmVTb2NrZXQuYmluZGluZyhcInJlbW92ZVwiKVxuICAgIHRoaXMuY2FsbGJhY2tzID0ge1xuICAgICAgYmVmb3JlYWRkZWQ6IFtdLCBiZWZvcmV1cGRhdGVkOiBbXSwgYmVmb3JlcGh4Q2hpbGRBZGRlZDogW10sXG4gICAgICBhZnRlcmFkZGVkOiBbXSwgYWZ0ZXJ1cGRhdGVkOiBbXSwgYWZ0ZXJkaXNjYXJkZWQ6IFtdLCBhZnRlcnBoeENoaWxkQWRkZWQ6IFtdLFxuICAgICAgYWZ0ZXJ0cmFuc2l0aW9uc0Rpc2NhcmRlZDogW11cbiAgICB9XG4gIH1cblxuICBiZWZvcmUoa2luZCwgY2FsbGJhY2speyB0aGlzLmNhbGxiYWNrc1tgYmVmb3JlJHtraW5kfWBdLnB1c2goY2FsbGJhY2spIH1cbiAgYWZ0ZXIoa2luZCwgY2FsbGJhY2speyB0aGlzLmNhbGxiYWNrc1tgYWZ0ZXIke2tpbmR9YF0ucHVzaChjYWxsYmFjaykgfVxuXG4gIHRyYWNrQmVmb3JlKGtpbmQsIC4uLmFyZ3Mpe1xuICAgIHRoaXMuY2FsbGJhY2tzW2BiZWZvcmUke2tpbmR9YF0uZm9yRWFjaChjYWxsYmFjayA9PiBjYWxsYmFjayguLi5hcmdzKSlcbiAgfVxuXG4gIHRyYWNrQWZ0ZXIoa2luZCwgLi4uYXJncyl7XG4gICAgdGhpcy5jYWxsYmFja3NbYGFmdGVyJHtraW5kfWBdLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2soLi4uYXJncykpXG4gIH1cblxuICBtYXJrUHJ1bmFibGVDb250ZW50Rm9yUmVtb3ZhbCgpe1xuICAgIGxldCBwaHhVcGRhdGUgPSB0aGlzLmxpdmVTb2NrZXQuYmluZGluZyhQSFhfVVBEQVRFKVxuICAgIERPTS5hbGwodGhpcy5jb250YWluZXIsIGBbJHtwaHhVcGRhdGV9PSR7UEhYX1NUUkVBTX1dYCwgZWwgPT4gZWwuaW5uZXJIVE1MID0gXCJcIilcbiAgICBET00uYWxsKHRoaXMuY29udGFpbmVyLCBgWyR7cGh4VXBkYXRlfT1hcHBlbmRdID4gKiwgWyR7cGh4VXBkYXRlfT1wcmVwZW5kXSA+ICpgLCBlbCA9PiB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoUEhYX1BSVU5FLCBcIlwiKVxuICAgIH0pXG4gIH1cblxuICBwZXJmb3JtKCl7XG4gICAgbGV0IHt2aWV3LCBsaXZlU29ja2V0LCBjb250YWluZXIsIGh0bWx9ID0gdGhpc1xuICAgIGxldCB0YXJnZXRDb250YWluZXIgPSB0aGlzLmlzQ0lEUGF0Y2goKSA/IHRoaXMudGFyZ2V0Q0lEQ29udGFpbmVyKGh0bWwpIDogY29udGFpbmVyXG4gICAgaWYodGhpcy5pc0NJRFBhdGNoKCkgJiYgIXRhcmdldENvbnRhaW5lcil7IHJldHVybiB9XG5cbiAgICBsZXQgZm9jdXNlZCA9IGxpdmVTb2NrZXQuZ2V0QWN0aXZlRWxlbWVudCgpXG4gICAgbGV0IHtzZWxlY3Rpb25TdGFydCwgc2VsZWN0aW9uRW5kfSA9IGZvY3VzZWQgJiYgRE9NLmhhc1NlbGVjdGlvblJhbmdlKGZvY3VzZWQpID8gZm9jdXNlZCA6IHt9XG4gICAgbGV0IHBoeFVwZGF0ZSA9IGxpdmVTb2NrZXQuYmluZGluZyhQSFhfVVBEQVRFKVxuICAgIGxldCBwaHhGZWVkYmFja0ZvciA9IGxpdmVTb2NrZXQuYmluZGluZyhQSFhfRkVFREJBQ0tfRk9SKVxuICAgIGxldCBkaXNhYmxlV2l0aCA9IGxpdmVTb2NrZXQuYmluZGluZyhQSFhfRElTQUJMRV9XSVRIKVxuICAgIGxldCBwaHhUcmlnZ2VyRXh0ZXJuYWwgPSBsaXZlU29ja2V0LmJpbmRpbmcoUEhYX1RSSUdHRVJfQUNUSU9OKVxuICAgIGxldCBhZGRlZCA9IFtdXG4gICAgbGV0IHVwZGF0ZXMgPSBbXVxuICAgIGxldCBhcHBlbmRQcmVwZW5kVXBkYXRlcyA9IFtdXG5cbiAgICBsZXQgZXh0ZXJuYWxGb3JtVHJpZ2dlcmVkID0gbnVsbFxuXG4gICAgbGV0IGRpZmZIVE1MID0gbGl2ZVNvY2tldC50aW1lKFwicHJlbW9ycGggY29udGFpbmVyIHByZXBcIiwgKCkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuYnVpbGREaWZmSFRNTChjb250YWluZXIsIGh0bWwsIHBoeFVwZGF0ZSwgdGFyZ2V0Q29udGFpbmVyKVxuICAgIH0pXG5cbiAgICB0aGlzLnRyYWNrQmVmb3JlKFwiYWRkZWRcIiwgY29udGFpbmVyKVxuICAgIHRoaXMudHJhY2tCZWZvcmUoXCJ1cGRhdGVkXCIsIGNvbnRhaW5lciwgY29udGFpbmVyKVxuXG4gICAgbGl2ZVNvY2tldC50aW1lKFwibW9ycGhkb21cIiwgKCkgPT4ge1xuICAgICAgdGhpcy5zdHJlYW1zLmZvckVhY2goKFtpbnNlcnRzLCBkZWxldGVJZHNdKSA9PiB7XG4gICAgICAgIHRoaXMuc3RyZWFtSW5zZXJ0cyA9IE9iamVjdC5hc3NpZ24odGhpcy5zdHJlYW1JbnNlcnRzLCBpbnNlcnRzKVxuICAgICAgICBkZWxldGVJZHMuZm9yRWFjaChpZCA9PiB7XG4gICAgICAgICAgbGV0IGNoaWxkID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoYFtpZD1cIiR7aWR9XCJdYClcbiAgICAgICAgICBpZihjaGlsZCl7XG4gICAgICAgICAgICBpZighdGhpcy5tYXliZVBlbmRpbmdSZW1vdmUoY2hpbGQpKXtcbiAgICAgICAgICAgICAgY2hpbGQucmVtb3ZlKClcbiAgICAgICAgICAgICAgdGhpcy5vbk5vZGVEaXNjYXJkZWQoY2hpbGQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSlcblxuICAgICAgbW9ycGhkb20odGFyZ2V0Q29udGFpbmVyLCBkaWZmSFRNTCwge1xuICAgICAgICBjaGlsZHJlbk9ubHk6IHRhcmdldENvbnRhaW5lci5nZXRBdHRyaWJ1dGUoUEhYX0NPTVBPTkVOVCkgPT09IG51bGwsXG4gICAgICAgIGdldE5vZGVLZXk6IChub2RlKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIERPTS5pc1BoeERlc3Ryb3llZChub2RlKSA/IG51bGwgOiBub2RlLmlkXG4gICAgICAgIH0sXG4gICAgICAgIC8vIHNraXAgaW5kZXhpbmcgZnJvbSBjaGlsZHJlbiB3aGVuIGNvbnRhaW5lciBpcyBzdHJlYW1cbiAgICAgICAgc2tpcEZyb21DaGlsZHJlbjogKGZyb20pID0+IHsgcmV0dXJuIGZyb20uZ2V0QXR0cmlidXRlKHBoeFVwZGF0ZSkgPT09IFBIWF9TVFJFQU0gfSxcbiAgICAgICAgLy8gdGVsbCBtb3JwaGRvbSBob3cgdG8gYWRkIGEgY2hpbGRcbiAgICAgICAgYWRkQ2hpbGQ6IChwYXJlbnQsIGNoaWxkKSA9PiB7XG4gICAgICAgICAgbGV0IHN0cmVhbUF0ID0gY2hpbGQuaWQgPyB0aGlzLnN0cmVhbUluc2VydHNbY2hpbGQuaWRdIDogdW5kZWZpbmVkXG4gICAgICAgICAgaWYoc3RyZWFtQXQgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gcGFyZW50LmFwcGVuZENoaWxkKGNoaWxkKSB9XG5cbiAgICAgICAgICAvLyBzdHJlYW1pbmdcbiAgICAgICAgICBpZihzdHJlYW1BdCA9PT0gMCl7XG4gICAgICAgICAgICBwYXJlbnQuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYWZ0ZXJiZWdpblwiLCBjaGlsZClcbiAgICAgICAgICB9IGVsc2UgaWYoc3RyZWFtQXQgPT09IC0xKXtcbiAgICAgICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChjaGlsZClcbiAgICAgICAgICB9IGVsc2UgaWYoc3RyZWFtQXQgPiAwKXtcbiAgICAgICAgICAgIGxldCBzaWJsaW5nID0gQXJyYXkuZnJvbShwYXJlbnQuY2hpbGRyZW4pW3N0cmVhbUF0XVxuICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgc2libGluZylcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uQmVmb3JlTm9kZUFkZGVkOiAoZWwpID0+IHtcbiAgICAgICAgICB0aGlzLnRyYWNrQmVmb3JlKFwiYWRkZWRcIiwgZWwpXG4gICAgICAgICAgcmV0dXJuIGVsXG4gICAgICAgIH0sXG4gICAgICAgIG9uTm9kZUFkZGVkOiAoZWwpID0+IHtcbiAgICAgICAgICAvLyBoYWNrIHRvIGZpeCBTYWZhcmkgaGFuZGxpbmcgb2YgaW1nIHNyY3NldCBhbmQgdmlkZW8gdGFnc1xuICAgICAgICAgIGlmKGVsIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCAmJiBlbC5zcmNzZXQpe1xuICAgICAgICAgICAgZWwuc3Jjc2V0ID0gZWwuc3Jjc2V0XG4gICAgICAgICAgfSBlbHNlIGlmKGVsIGluc3RhbmNlb2YgSFRNTFZpZGVvRWxlbWVudCAmJiBlbC5hdXRvcGxheSl7XG4gICAgICAgICAgICBlbC5wbGF5KClcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoRE9NLmlzTm93VHJpZ2dlckZvcm1FeHRlcm5hbChlbCwgcGh4VHJpZ2dlckV4dGVybmFsKSl7XG4gICAgICAgICAgICBleHRlcm5hbEZvcm1UcmlnZ2VyZWQgPSBlbFxuICAgICAgICAgIH1cbiAgICAgICAgICAvL2lucHV0IGhhbmRsaW5nXG4gICAgICAgICAgRE9NLmRpc2NhcmRFcnJvcih0YXJnZXRDb250YWluZXIsIGVsLCBwaHhGZWVkYmFja0ZvcilcbiAgICAgICAgICAvLyBuZXN0ZWQgdmlldyBoYW5kbGluZ1xuICAgICAgICAgIGlmKChET00uaXNQaHhDaGlsZChlbCkgJiYgdmlldy5vd25zRWxlbWVudChlbCkpIHx8IERPTS5pc1BoeFN0aWNreShlbCkgJiYgdmlldy5vd25zRWxlbWVudChlbC5wYXJlbnROb2RlKSl7XG4gICAgICAgICAgICB0aGlzLnRyYWNrQWZ0ZXIoXCJwaHhDaGlsZEFkZGVkXCIsIGVsKVxuICAgICAgICAgIH1cbiAgICAgICAgICBhZGRlZC5wdXNoKGVsKVxuICAgICAgICB9LFxuICAgICAgICBvbk5vZGVEaXNjYXJkZWQ6IChlbCkgPT4gdGhpcy5vbk5vZGVEaXNjYXJkZWQoZWwpLFxuICAgICAgICBvbkJlZm9yZU5vZGVEaXNjYXJkZWQ6IChlbCkgPT4ge1xuICAgICAgICAgIGlmKGVsLmdldEF0dHJpYnV0ZSAmJiBlbC5nZXRBdHRyaWJ1dGUoUEhYX1BSVU5FKSAhPT0gbnVsbCl7IHJldHVybiB0cnVlIH1cbiAgICAgICAgICBpZihlbC5wYXJlbnRFbGVtZW50ICE9PSBudWxsICYmIGVsLmlkICYmXG4gICAgICAgICAgICAgRE9NLmlzUGh4VXBkYXRlKGVsLnBhcmVudEVsZW1lbnQsIHBoeFVwZGF0ZSwgW1BIWF9TVFJFQU0sIFwiYXBwZW5kXCIsIFwicHJlcGVuZFwiXSkpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKHRoaXMubWF5YmVQZW5kaW5nUmVtb3ZlKGVsKSl7IHJldHVybiBmYWxzZSB9XG4gICAgICAgICAgaWYodGhpcy5za2lwQ0lEU2libGluZyhlbCkpeyByZXR1cm4gZmFsc2UgfVxuXG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgb25FbFVwZGF0ZWQ6IChlbCkgPT4ge1xuICAgICAgICAgIGlmKERPTS5pc05vd1RyaWdnZXJGb3JtRXh0ZXJuYWwoZWwsIHBoeFRyaWdnZXJFeHRlcm5hbCkpe1xuICAgICAgICAgICAgZXh0ZXJuYWxGb3JtVHJpZ2dlcmVkID0gZWxcbiAgICAgICAgICB9XG4gICAgICAgICAgdXBkYXRlcy5wdXNoKGVsKVxuICAgICAgICAgIHRoaXMubWF5YmVSZU9yZGVyU3RyZWFtKGVsKVxuICAgICAgICB9LFxuICAgICAgICBvbkJlZm9yZUVsVXBkYXRlZDogKGZyb21FbCwgdG9FbCkgPT4ge1xuICAgICAgICAgIERPTS5jbGVhbkNoaWxkTm9kZXModG9FbCwgcGh4VXBkYXRlKVxuICAgICAgICAgIGlmKHRoaXMuc2tpcENJRFNpYmxpbmcodG9FbCkpeyByZXR1cm4gZmFsc2UgfVxuICAgICAgICAgIGlmKERPTS5pc1BoeFN0aWNreShmcm9tRWwpKXsgcmV0dXJuIGZhbHNlIH1cbiAgICAgICAgICBpZihET00uaXNJZ25vcmVkKGZyb21FbCwgcGh4VXBkYXRlKSB8fCAoZnJvbUVsLmZvcm0gJiYgZnJvbUVsLmZvcm0uaXNTYW1lTm9kZShleHRlcm5hbEZvcm1UcmlnZ2VyZWQpKSl7XG4gICAgICAgICAgICB0aGlzLnRyYWNrQmVmb3JlKFwidXBkYXRlZFwiLCBmcm9tRWwsIHRvRWwpXG4gICAgICAgICAgICBET00ubWVyZ2VBdHRycyhmcm9tRWwsIHRvRWwsIHtpc0lnbm9yZWQ6IHRydWV9KVxuICAgICAgICAgICAgdXBkYXRlcy5wdXNoKGZyb21FbClcbiAgICAgICAgICAgIERPTS5hcHBseVN0aWNreU9wZXJhdGlvbnMoZnJvbUVsKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKGZyb21FbC50eXBlID09PSBcIm51bWJlclwiICYmIChmcm9tRWwudmFsaWRpdHkgJiYgZnJvbUVsLnZhbGlkaXR5LmJhZElucHV0KSl7IHJldHVybiBmYWxzZSB9XG4gICAgICAgICAgaWYoIURPTS5zeW5jUGVuZGluZ1JlZihmcm9tRWwsIHRvRWwsIGRpc2FibGVXaXRoKSl7XG4gICAgICAgICAgICBpZihET00uaXNVcGxvYWRJbnB1dChmcm9tRWwpKXtcbiAgICAgICAgICAgICAgdGhpcy50cmFja0JlZm9yZShcInVwZGF0ZWRcIiwgZnJvbUVsLCB0b0VsKVxuICAgICAgICAgICAgICB1cGRhdGVzLnB1c2goZnJvbUVsKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgRE9NLmFwcGx5U3RpY2t5T3BlcmF0aW9ucyhmcm9tRWwpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBuZXN0ZWQgdmlldyBoYW5kbGluZ1xuICAgICAgICAgIGlmKERPTS5pc1BoeENoaWxkKHRvRWwpKXtcbiAgICAgICAgICAgIGxldCBwcmV2U2Vzc2lvbiA9IGZyb21FbC5nZXRBdHRyaWJ1dGUoUEhYX1NFU1NJT04pXG4gICAgICAgICAgICBET00ubWVyZ2VBdHRycyhmcm9tRWwsIHRvRWwsIHtleGNsdWRlOiBbUEhYX1NUQVRJQ119KVxuICAgICAgICAgICAgaWYocHJldlNlc3Npb24gIT09IFwiXCIpeyBmcm9tRWwuc2V0QXR0cmlidXRlKFBIWF9TRVNTSU9OLCBwcmV2U2Vzc2lvbikgfVxuICAgICAgICAgICAgZnJvbUVsLnNldEF0dHJpYnV0ZShQSFhfUk9PVF9JRCwgdGhpcy5yb290SUQpXG4gICAgICAgICAgICBET00uYXBwbHlTdGlja3lPcGVyYXRpb25zKGZyb21FbClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGlucHV0IGhhbmRsaW5nXG4gICAgICAgICAgRE9NLmNvcHlQcml2YXRlcyh0b0VsLCBmcm9tRWwpXG4gICAgICAgICAgRE9NLmRpc2NhcmRFcnJvcih0YXJnZXRDb250YWluZXIsIHRvRWwsIHBoeEZlZWRiYWNrRm9yKVxuXG4gICAgICAgICAgbGV0IGlzRm9jdXNlZEZvcm1FbCA9IGZvY3VzZWQgJiYgZnJvbUVsLmlzU2FtZU5vZGUoZm9jdXNlZCkgJiYgRE9NLmlzRm9ybUlucHV0KGZyb21FbClcbiAgICAgICAgICBpZihpc0ZvY3VzZWRGb3JtRWwgJiYgZnJvbUVsLnR5cGUgIT09IFwiaGlkZGVuXCIpe1xuICAgICAgICAgICAgdGhpcy50cmFja0JlZm9yZShcInVwZGF0ZWRcIiwgZnJvbUVsLCB0b0VsKVxuICAgICAgICAgICAgRE9NLm1lcmdlRm9jdXNlZElucHV0KGZyb21FbCwgdG9FbClcbiAgICAgICAgICAgIERPTS5zeW5jQXR0cnNUb1Byb3BzKGZyb21FbClcbiAgICAgICAgICAgIHVwZGF0ZXMucHVzaChmcm9tRWwpXG4gICAgICAgICAgICBET00uYXBwbHlTdGlja3lPcGVyYXRpb25zKGZyb21FbClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZihET00uaXNQaHhVcGRhdGUodG9FbCwgcGh4VXBkYXRlLCBbXCJhcHBlbmRcIiwgXCJwcmVwZW5kXCJdKSl7XG4gICAgICAgICAgICAgIGFwcGVuZFByZXBlbmRVcGRhdGVzLnB1c2gobmV3IERPTVBvc3RNb3JwaFJlc3RvcmVyKGZyb21FbCwgdG9FbCwgdG9FbC5nZXRBdHRyaWJ1dGUocGh4VXBkYXRlKSkpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBET00uc3luY0F0dHJzVG9Qcm9wcyh0b0VsKVxuICAgICAgICAgICAgRE9NLmFwcGx5U3RpY2t5T3BlcmF0aW9ucyh0b0VsKVxuICAgICAgICAgICAgdGhpcy50cmFja0JlZm9yZShcInVwZGF0ZWRcIiwgZnJvbUVsLCB0b0VsKVxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGlmKGxpdmVTb2NrZXQuaXNEZWJ1Z0VuYWJsZWQoKSl7IGRldGVjdER1cGxpY2F0ZUlkcygpIH1cblxuICAgIGlmKGFwcGVuZFByZXBlbmRVcGRhdGVzLmxlbmd0aCA+IDApe1xuICAgICAgbGl2ZVNvY2tldC50aW1lKFwicG9zdC1tb3JwaCBhcHBlbmQvcHJlcGVuZCByZXN0b3JhdGlvblwiLCAoKSA9PiB7XG4gICAgICAgIGFwcGVuZFByZXBlbmRVcGRhdGVzLmZvckVhY2godXBkYXRlID0+IHVwZGF0ZS5wZXJmb3JtKCkpXG4gICAgICB9KVxuICAgIH1cblxuICAgIGxpdmVTb2NrZXQuc2lsZW5jZUV2ZW50cygoKSA9PiBET00ucmVzdG9yZUZvY3VzKGZvY3VzZWQsIHNlbGVjdGlvblN0YXJ0LCBzZWxlY3Rpb25FbmQpKVxuICAgIERPTS5kaXNwYXRjaEV2ZW50KGRvY3VtZW50LCBcInBoeDp1cGRhdGVcIilcbiAgICBhZGRlZC5mb3JFYWNoKGVsID0+IHRoaXMudHJhY2tBZnRlcihcImFkZGVkXCIsIGVsKSlcbiAgICB1cGRhdGVzLmZvckVhY2goZWwgPT4gdGhpcy50cmFja0FmdGVyKFwidXBkYXRlZFwiLCBlbCkpXG5cbiAgICB0aGlzLnRyYW5zaXRpb25QZW5kaW5nUmVtb3ZlcygpXG5cbiAgICBpZihleHRlcm5hbEZvcm1UcmlnZ2VyZWQpe1xuICAgICAgbGl2ZVNvY2tldC51bmxvYWQoKVxuICAgICAgZXh0ZXJuYWxGb3JtVHJpZ2dlcmVkLnN1Ym1pdCgpXG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBvbk5vZGVEaXNjYXJkZWQoZWwpe1xuICAgIC8vIG5lc3RlZCB2aWV3IGhhbmRsaW5nXG4gICAgaWYoRE9NLmlzUGh4Q2hpbGQoZWwpIHx8IERPTS5pc1BoeFN0aWNreShlbCkpeyB0aGlzLmxpdmVTb2NrZXQuZGVzdHJveVZpZXdCeUVsKGVsKSB9XG4gICAgdGhpcy50cmFja0FmdGVyKFwiZGlzY2FyZGVkXCIsIGVsKVxuICB9XG5cbiAgbWF5YmVQZW5kaW5nUmVtb3ZlKG5vZGUpe1xuICAgIGlmKG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKHRoaXMucGh4UmVtb3ZlKSAhPT0gbnVsbCl7XG4gICAgICB0aGlzLnBlbmRpbmdSZW1vdmVzLnB1c2gobm9kZSlcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIG1heWJlUmVPcmRlclN0cmVhbShlbCl7XG4gICAgbGV0IHN0cmVhbUF0ID0gZWwuaWQgPyB0aGlzLnN0cmVhbUluc2VydHNbZWwuaWRdIDogdW5kZWZpbmVkXG4gICAgaWYoc3RyZWFtQXQgPT09IHVuZGVmaW5lZCl7IHJldHVybiB9XG5cbiAgICBpZihzdHJlYW1BdCA9PT0gMCl7XG4gICAgICBlbC5wYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZShlbCwgZWwucGFyZW50RWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZClcbiAgICB9IGVsc2UgaWYoc3RyZWFtQXQgPiAwKXtcbiAgICAgIGxldCBjaGlsZHJlbiA9IEFycmF5LmZyb20oZWwucGFyZW50RWxlbWVudC5jaGlsZHJlbilcbiAgICAgIGxldCBvbGRJbmRleCA9IGNoaWxkcmVuLmluZGV4T2YoZWwpXG4gICAgICBpZihzdHJlYW1BdCA+PSBjaGlsZHJlbi5sZW5ndGggLSAxKXtcbiAgICAgICAgZWwucGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZChlbClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBzaWJsaW5nID0gY2hpbGRyZW5bc3RyZWFtQXRdXG4gICAgICAgIGlmKG9sZEluZGV4ID4gc3RyZWFtQXQpe1xuICAgICAgICAgIGVsLnBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKGVsLCBzaWJsaW5nKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsLnBhcmVudEVsZW1lbnQuaW5zZXJ0QmVmb3JlKGVsLCBzaWJsaW5nLm5leHRFbGVtZW50U2libGluZylcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRyYW5zaXRpb25QZW5kaW5nUmVtb3Zlcygpe1xuICAgIGxldCB7cGVuZGluZ1JlbW92ZXMsIGxpdmVTb2NrZXR9ID0gdGhpc1xuICAgIGlmKHBlbmRpbmdSZW1vdmVzLmxlbmd0aCA+IDApe1xuICAgICAgbGl2ZVNvY2tldC50cmFuc2l0aW9uUmVtb3ZlcyhwZW5kaW5nUmVtb3ZlcylcbiAgICAgIGxpdmVTb2NrZXQucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiB7XG4gICAgICAgIHBlbmRpbmdSZW1vdmVzLmZvckVhY2goZWwgPT4ge1xuICAgICAgICAgIGxldCBjaGlsZCA9IERPTS5maXJzdFBoeENoaWxkKGVsKVxuICAgICAgICAgIGlmKGNoaWxkKXsgbGl2ZVNvY2tldC5kZXN0cm95Vmlld0J5RWwoY2hpbGQpIH1cbiAgICAgICAgICBlbC5yZW1vdmUoKVxuICAgICAgICB9KVxuICAgICAgICB0aGlzLnRyYWNrQWZ0ZXIoXCJ0cmFuc2l0aW9uc0Rpc2NhcmRlZFwiLCBwZW5kaW5nUmVtb3ZlcylcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgaXNDSURQYXRjaCgpeyByZXR1cm4gdGhpcy5jaWRQYXRjaCB9XG5cbiAgc2tpcENJRFNpYmxpbmcoZWwpe1xuICAgIHJldHVybiBlbC5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgJiYgZWwuZ2V0QXR0cmlidXRlKFBIWF9TS0lQKSAhPT0gbnVsbFxuICB9XG5cbiAgdGFyZ2V0Q0lEQ29udGFpbmVyKGh0bWwpe1xuICAgIGlmKCF0aGlzLmlzQ0lEUGF0Y2goKSl7IHJldHVybiB9XG4gICAgbGV0IFtmaXJzdCwgLi4ucmVzdF0gPSBET00uZmluZENvbXBvbmVudE5vZGVMaXN0KHRoaXMuY29udGFpbmVyLCB0aGlzLnRhcmdldENJRClcbiAgICBpZihyZXN0Lmxlbmd0aCA9PT0gMCAmJiBET00uY2hpbGROb2RlTGVuZ3RoKGh0bWwpID09PSAxKXtcbiAgICAgIHJldHVybiBmaXJzdFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmlyc3QgJiYgZmlyc3QucGFyZW50Tm9kZVxuICAgIH1cbiAgfVxuXG4gIC8vIGJ1aWxkcyBIVE1MIGZvciBtb3JwaGRvbSBwYXRjaFxuICAvLyAtIGZvciBmdWxsIHBhdGNoZXMgb2YgTGl2ZVZpZXcgb3IgYSBjb21wb25lbnQgd2l0aCBhIHNpbmdsZVxuICAvLyAgIHJvb3Qgbm9kZSwgc2ltcGx5IHJldHVybnMgdGhlIEhUTUxcbiAgLy8gLSBmb3IgcGF0Y2hlcyBvZiBhIGNvbXBvbmVudCB3aXRoIG11bHRpcGxlIHJvb3Qgbm9kZXMsIHRoZVxuICAvLyAgIHBhcmVudCBub2RlIGJlY29tZXMgdGhlIHRhcmdldCBjb250YWluZXIgYW5kIG5vbi1jb21wb25lbnRcbiAgLy8gICBzaWJsaW5ncyBhcmUgbWFya2VkIGFzIHNraXAuXG4gIGJ1aWxkRGlmZkhUTUwoY29udGFpbmVyLCBodG1sLCBwaHhVcGRhdGUsIHRhcmdldENvbnRhaW5lcil7XG4gICAgbGV0IGlzQ0lEUGF0Y2ggPSB0aGlzLmlzQ0lEUGF0Y2goKVxuICAgIGxldCBpc0NJRFdpdGhTaW5nbGVSb290ID0gaXNDSURQYXRjaCAmJiB0YXJnZXRDb250YWluZXIuZ2V0QXR0cmlidXRlKFBIWF9DT01QT05FTlQpID09PSB0aGlzLnRhcmdldENJRC50b1N0cmluZygpXG4gICAgaWYoIWlzQ0lEUGF0Y2ggfHwgaXNDSURXaXRoU2luZ2xlUm9vdCl7XG4gICAgICByZXR1cm4gaHRtbFxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBjb21wb25lbnQgcGF0Y2ggd2l0aCBtdWx0aXBsZSBDSUQgcm9vdHNcbiAgICAgIGxldCBkaWZmQ29udGFpbmVyID0gbnVsbFxuICAgICAgbGV0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpXG4gICAgICBkaWZmQ29udGFpbmVyID0gRE9NLmNsb25lTm9kZSh0YXJnZXRDb250YWluZXIpXG4gICAgICBsZXQgW2ZpcnN0Q29tcG9uZW50LCAuLi5yZXN0XSA9IERPTS5maW5kQ29tcG9uZW50Tm9kZUxpc3QoZGlmZkNvbnRhaW5lciwgdGhpcy50YXJnZXRDSUQpXG4gICAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSBodG1sXG4gICAgICByZXN0LmZvckVhY2goZWwgPT4gZWwucmVtb3ZlKCkpXG4gICAgICBBcnJheS5mcm9tKGRpZmZDb250YWluZXIuY2hpbGROb2RlcykuZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgICAgIC8vIHdlIGNhbiBvbmx5IHNraXAgdHJhY2thYmxlIG5vZGVzIHdpdGggYW4gSURcbiAgICAgICAgaWYoY2hpbGQuaWQgJiYgY2hpbGQubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFICYmIGNoaWxkLmdldEF0dHJpYnV0ZShQSFhfQ09NUE9ORU5UKSAhPT0gdGhpcy50YXJnZXRDSUQudG9TdHJpbmcoKSl7XG4gICAgICAgICAgY2hpbGQuc2V0QXR0cmlidXRlKFBIWF9TS0lQLCBcIlwiKVxuICAgICAgICAgIGNoaWxkLmlubmVySFRNTCA9IFwiXCJcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIEFycmF5LmZyb20odGVtcGxhdGUuY29udGVudC5jaGlsZE5vZGVzKS5mb3JFYWNoKGVsID0+IGRpZmZDb250YWluZXIuaW5zZXJ0QmVmb3JlKGVsLCBmaXJzdENvbXBvbmVudCkpXG4gICAgICBmaXJzdENvbXBvbmVudC5yZW1vdmUoKVxuICAgICAgcmV0dXJuIGRpZmZDb250YWluZXIub3V0ZXJIVE1MXG4gICAgfVxuICB9XG5cbiAgaW5kZXhPZihwYXJlbnQsIGNoaWxkKXsgcmV0dXJuIEFycmF5LmZyb20ocGFyZW50LmNoaWxkcmVuKS5pbmRleE9mKGNoaWxkKSB9XG59XG4iLCAiaW1wb3J0IHtcbiAgQ09NUE9ORU5UUyxcbiAgRFlOQU1JQ1MsXG4gIFRFTVBMQVRFUyxcbiAgRVZFTlRTLFxuICBQSFhfQ09NUE9ORU5ULFxuICBQSFhfU0tJUCxcbiAgUkVQTFksXG4gIFNUQVRJQyxcbiAgVElUTEUsXG4gIFNUUkVBTSxcbn0gZnJvbSBcIi4vY29uc3RhbnRzXCJcblxuaW1wb3J0IHtcbiAgaXNPYmplY3QsXG4gIGxvZ0Vycm9yLFxuICBpc0NpZCxcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZW5kZXJlZCB7XG4gIHN0YXRpYyBleHRyYWN0KGRpZmYpe1xuICAgIGxldCB7W1JFUExZXTogcmVwbHksIFtFVkVOVFNdOiBldmVudHMsIFtUSVRMRV06IHRpdGxlfSA9IGRpZmZcbiAgICBkZWxldGUgZGlmZltSRVBMWV1cbiAgICBkZWxldGUgZGlmZltFVkVOVFNdXG4gICAgZGVsZXRlIGRpZmZbVElUTEVdXG4gICAgcmV0dXJuIHtkaWZmLCB0aXRsZSwgcmVwbHk6IHJlcGx5IHx8IG51bGwsIGV2ZW50czogZXZlbnRzIHx8IFtdfVxuICB9XG5cbiAgY29uc3RydWN0b3Iodmlld0lkLCByZW5kZXJlZCl7XG4gICAgdGhpcy52aWV3SWQgPSB2aWV3SWRcbiAgICB0aGlzLnJlbmRlcmVkID0ge31cbiAgICB0aGlzLm1lcmdlRGlmZihyZW5kZXJlZClcbiAgfVxuXG4gIHBhcmVudFZpZXdJZCgpeyByZXR1cm4gdGhpcy52aWV3SWQgfVxuXG4gIHRvU3RyaW5nKG9ubHlDaWRzKXtcbiAgICBsZXQgW3N0ciwgc3RyZWFtc10gPSB0aGlzLnJlY3Vyc2l2ZVRvU3RyaW5nKHRoaXMucmVuZGVyZWQsIHRoaXMucmVuZGVyZWRbQ09NUE9ORU5UU10sIG9ubHlDaWRzKVxuICAgIHJldHVybiBbc3RyLCBzdHJlYW1zXVxuICB9XG5cbiAgcmVjdXJzaXZlVG9TdHJpbmcocmVuZGVyZWQsIGNvbXBvbmVudHMgPSByZW5kZXJlZFtDT01QT05FTlRTXSwgb25seUNpZHMpe1xuICAgIG9ubHlDaWRzID0gb25seUNpZHMgPyBuZXcgU2V0KG9ubHlDaWRzKSA6IG51bGxcbiAgICBsZXQgb3V0cHV0ID0ge2J1ZmZlcjogXCJcIiwgY29tcG9uZW50czogY29tcG9uZW50cywgb25seUNpZHM6IG9ubHlDaWRzLCBzdHJlYW1zOiBuZXcgU2V0KCl9XG4gICAgdGhpcy50b091dHB1dEJ1ZmZlcihyZW5kZXJlZCwgbnVsbCwgb3V0cHV0KVxuICAgIHJldHVybiBbb3V0cHV0LmJ1ZmZlciwgb3V0cHV0LnN0cmVhbXNdXG4gIH1cblxuICBjb21wb25lbnRDSURzKGRpZmYpeyByZXR1cm4gT2JqZWN0LmtleXMoZGlmZltDT01QT05FTlRTXSB8fCB7fSkubWFwKGkgPT4gcGFyc2VJbnQoaSkpIH1cblxuICBpc0NvbXBvbmVudE9ubHlEaWZmKGRpZmYpe1xuICAgIGlmKCFkaWZmW0NPTVBPTkVOVFNdKXsgcmV0dXJuIGZhbHNlIH1cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoZGlmZikubGVuZ3RoID09PSAxXG4gIH1cblxuICBnZXRDb21wb25lbnQoZGlmZiwgY2lkKXsgcmV0dXJuIGRpZmZbQ09NUE9ORU5UU11bY2lkXSB9XG5cbiAgbWVyZ2VEaWZmKGRpZmYpe1xuICAgIGxldCBuZXdjID0gZGlmZltDT01QT05FTlRTXVxuICAgIGxldCBjYWNoZSA9IHt9XG4gICAgZGVsZXRlIGRpZmZbQ09NUE9ORU5UU11cbiAgICB0aGlzLnJlbmRlcmVkID0gdGhpcy5tdXRhYmxlTWVyZ2UodGhpcy5yZW5kZXJlZCwgZGlmZilcbiAgICB0aGlzLnJlbmRlcmVkW0NPTVBPTkVOVFNdID0gdGhpcy5yZW5kZXJlZFtDT01QT05FTlRTXSB8fCB7fVxuXG4gICAgaWYobmV3Yyl7XG4gICAgICBsZXQgb2xkYyA9IHRoaXMucmVuZGVyZWRbQ09NUE9ORU5UU11cblxuICAgICAgZm9yKGxldCBjaWQgaW4gbmV3Yyl7XG4gICAgICAgIG5ld2NbY2lkXSA9IHRoaXMuY2FjaGVkRmluZENvbXBvbmVudChjaWQsIG5ld2NbY2lkXSwgb2xkYywgbmV3YywgY2FjaGUpXG4gICAgICB9XG5cbiAgICAgIGZvcihsZXQgY2lkIGluIG5ld2MpeyBvbGRjW2NpZF0gPSBuZXdjW2NpZF0gfVxuICAgICAgZGlmZltDT01QT05FTlRTXSA9IG5ld2NcbiAgICB9XG4gIH1cblxuICBjYWNoZWRGaW5kQ29tcG9uZW50KGNpZCwgY2RpZmYsIG9sZGMsIG5ld2MsIGNhY2hlKXtcbiAgICBpZihjYWNoZVtjaWRdKXtcbiAgICAgIHJldHVybiBjYWNoZVtjaWRdXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBuZGlmZiwgc3RhdCwgc2NpZCA9IGNkaWZmW1NUQVRJQ11cblxuICAgICAgaWYoaXNDaWQoc2NpZCkpe1xuICAgICAgICBsZXQgdGRpZmZcblxuICAgICAgICBpZihzY2lkID4gMCl7XG4gICAgICAgICAgdGRpZmYgPSB0aGlzLmNhY2hlZEZpbmRDb21wb25lbnQoc2NpZCwgbmV3Y1tzY2lkXSwgb2xkYywgbmV3YywgY2FjaGUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGRpZmYgPSBvbGRjWy1zY2lkXVxuICAgICAgICB9XG5cbiAgICAgICAgc3RhdCA9IHRkaWZmW1NUQVRJQ11cbiAgICAgICAgbmRpZmYgPSB0aGlzLmNsb25lTWVyZ2UodGRpZmYsIGNkaWZmKVxuICAgICAgICBuZGlmZltTVEFUSUNdID0gc3RhdFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmRpZmYgPSBjZGlmZltTVEFUSUNdICE9PSB1bmRlZmluZWQgPyBjZGlmZiA6IHRoaXMuY2xvbmVNZXJnZShvbGRjW2NpZF0gfHwge30sIGNkaWZmKVxuICAgICAgfVxuXG4gICAgICBjYWNoZVtjaWRdID0gbmRpZmZcbiAgICAgIHJldHVybiBuZGlmZlxuICAgIH1cbiAgfVxuXG4gIG11dGFibGVNZXJnZSh0YXJnZXQsIHNvdXJjZSl7XG4gICAgaWYoc291cmNlW1NUQVRJQ10gIT09IHVuZGVmaW5lZCl7XG4gICAgICByZXR1cm4gc291cmNlXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZG9NdXRhYmxlTWVyZ2UodGFyZ2V0LCBzb3VyY2UpXG4gICAgICByZXR1cm4gdGFyZ2V0XG4gICAgfVxuICB9XG5cbiAgZG9NdXRhYmxlTWVyZ2UodGFyZ2V0LCBzb3VyY2Upe1xuICAgIGZvcihsZXQga2V5IGluIHNvdXJjZSl7XG4gICAgICBsZXQgdmFsID0gc291cmNlW2tleV1cbiAgICAgIGxldCB0YXJnZXRWYWwgPSB0YXJnZXRba2V5XVxuICAgICAgbGV0IGlzT2JqVmFsID0gaXNPYmplY3QodmFsKVxuICAgICAgaWYoaXNPYmpWYWwgJiYgdmFsW1NUQVRJQ10gPT09IHVuZGVmaW5lZCAmJiBpc09iamVjdCh0YXJnZXRWYWwpKXtcbiAgICAgICAgdGhpcy5kb011dGFibGVNZXJnZSh0YXJnZXRWYWwsIHZhbClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gdmFsXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY2xvbmVNZXJnZSh0YXJnZXQsIHNvdXJjZSl7XG4gICAgbGV0IG1lcmdlZCA9IHsuLi50YXJnZXQsIC4uLnNvdXJjZX1cbiAgICBmb3IobGV0IGtleSBpbiBtZXJnZWQpe1xuICAgICAgbGV0IHZhbCA9IHNvdXJjZVtrZXldXG4gICAgICBsZXQgdGFyZ2V0VmFsID0gdGFyZ2V0W2tleV1cbiAgICAgIGlmKGlzT2JqZWN0KHZhbCkgJiYgdmFsW1NUQVRJQ10gPT09IHVuZGVmaW5lZCAmJiBpc09iamVjdCh0YXJnZXRWYWwpKXtcbiAgICAgICAgbWVyZ2VkW2tleV0gPSB0aGlzLmNsb25lTWVyZ2UodGFyZ2V0VmFsLCB2YWwpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtZXJnZWRcbiAgfVxuXG4gIGNvbXBvbmVudFRvU3RyaW5nKGNpZCl7XG4gICAgbGV0IFtzdHIsIHN0cmVhbXNdID0gdGhpcy5yZWN1cnNpdmVDSURUb1N0cmluZyh0aGlzLnJlbmRlcmVkW0NPTVBPTkVOVFNdLCBjaWQpXG4gICAgcmV0dXJuIFtzdHIsIHN0cmVhbXNdXG4gIH1cblxuICBwcnVuZUNJRHMoY2lkcyl7XG4gICAgY2lkcy5mb3JFYWNoKGNpZCA9PiBkZWxldGUgdGhpcy5yZW5kZXJlZFtDT01QT05FTlRTXVtjaWRdKVxuICB9XG5cbiAgLy8gcHJpdmF0ZVxuXG4gIGdldCgpeyByZXR1cm4gdGhpcy5yZW5kZXJlZCB9XG5cbiAgaXNOZXdGaW5nZXJwcmludChkaWZmID0ge30peyByZXR1cm4gISFkaWZmW1NUQVRJQ10gfVxuXG4gIHRlbXBsYXRlU3RhdGljKHBhcnQsIHRlbXBsYXRlcyl7XG4gICAgaWYodHlwZW9mIChwYXJ0KSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlc1twYXJ0XVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcGFydFxuICAgIH1cbiAgfVxuXG4gIHRvT3V0cHV0QnVmZmVyKHJlbmRlcmVkLCB0ZW1wbGF0ZXMsIG91dHB1dCl7XG4gICAgaWYocmVuZGVyZWRbRFlOQU1JQ1NdKXsgcmV0dXJuIHRoaXMuY29tcHJlaGVuc2lvblRvQnVmZmVyKHJlbmRlcmVkLCB0ZW1wbGF0ZXMsIG91dHB1dCkgfVxuICAgIGxldCB7W1NUQVRJQ106IHN0YXRpY3N9ID0gcmVuZGVyZWRcbiAgICBzdGF0aWNzID0gdGhpcy50ZW1wbGF0ZVN0YXRpYyhzdGF0aWNzLCB0ZW1wbGF0ZXMpXG5cbiAgICBvdXRwdXQuYnVmZmVyICs9IHN0YXRpY3NbMF1cbiAgICBmb3IobGV0IGkgPSAxOyBpIDwgc3RhdGljcy5sZW5ndGg7IGkrKyl7XG4gICAgICB0aGlzLmR5bmFtaWNUb0J1ZmZlcihyZW5kZXJlZFtpIC0gMV0sIHRlbXBsYXRlcywgb3V0cHV0KVxuICAgICAgb3V0cHV0LmJ1ZmZlciArPSBzdGF0aWNzW2ldXG4gICAgfVxuICB9XG5cbiAgY29tcHJlaGVuc2lvblRvQnVmZmVyKHJlbmRlcmVkLCB0ZW1wbGF0ZXMsIG91dHB1dCl7XG4gICAgbGV0IHtbRFlOQU1JQ1NdOiBkeW5hbWljcywgW1NUQVRJQ106IHN0YXRpY3MsIFtTVFJFQU1dOiBzdHJlYW19ID0gcmVuZGVyZWRcbiAgICBsZXQgW19pbnNlcnRzLCBkZWxldGVJZHNdID0gc3RyZWFtIHx8IFt7fSwgW11dXG4gICAgc3RhdGljcyA9IHRoaXMudGVtcGxhdGVTdGF0aWMoc3RhdGljcywgdGVtcGxhdGVzKVxuICAgIGxldCBjb21wVGVtcGxhdGVzID0gdGVtcGxhdGVzIHx8IHJlbmRlcmVkW1RFTVBMQVRFU11cbiAgICBmb3IobGV0IGQgPSAwOyBkIDwgZHluYW1pY3MubGVuZ3RoOyBkKyspe1xuICAgICAgbGV0IGR5bmFtaWMgPSBkeW5hbWljc1tkXVxuICAgICAgb3V0cHV0LmJ1ZmZlciArPSBzdGF0aWNzWzBdXG4gICAgICBmb3IobGV0IGkgPSAxOyBpIDwgc3RhdGljcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIHRoaXMuZHluYW1pY1RvQnVmZmVyKGR5bmFtaWNbaSAtIDFdLCBjb21wVGVtcGxhdGVzLCBvdXRwdXQpXG4gICAgICAgIG91dHB1dC5idWZmZXIgKz0gc3RhdGljc1tpXVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmKHN0cmVhbSAhPT0gdW5kZWZpbmVkICYmIChyZW5kZXJlZFtEWU5BTUlDU10ubGVuZ3RoID4gMCB8fCBkZWxldGVJZHMubGVuZ3RoID4gMCkpe1xuICAgICAgcmVuZGVyZWRbRFlOQU1JQ1NdID0gW11cbiAgICAgIG91dHB1dC5zdHJlYW1zLmFkZChzdHJlYW0pXG4gICAgfVxuICB9XG5cbiAgZHluYW1pY1RvQnVmZmVyKHJlbmRlcmVkLCB0ZW1wbGF0ZXMsIG91dHB1dCl7XG4gICAgaWYodHlwZW9mIChyZW5kZXJlZCkgPT09IFwibnVtYmVyXCIpe1xuICAgICAgbGV0IFtzdHIsIHN0cmVhbXNdID0gdGhpcy5yZWN1cnNpdmVDSURUb1N0cmluZyhvdXRwdXQuY29tcG9uZW50cywgcmVuZGVyZWQsIG91dHB1dC5vbmx5Q2lkcylcbiAgICAgIG91dHB1dC5idWZmZXIgKz0gc3RyXG4gICAgICBvdXRwdXQuc3RyZWFtcyA9IG5ldyBTZXQoWy4uLm91dHB1dC5zdHJlYW1zLCAuLi5zdHJlYW1zXSlcbiAgICB9IGVsc2UgaWYoaXNPYmplY3QocmVuZGVyZWQpKXtcbiAgICAgIHRoaXMudG9PdXRwdXRCdWZmZXIocmVuZGVyZWQsIHRlbXBsYXRlcywgb3V0cHV0KVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQuYnVmZmVyICs9IHJlbmRlcmVkXG4gICAgfVxuICB9XG5cbiAgcmVjdXJzaXZlQ0lEVG9TdHJpbmcoY29tcG9uZW50cywgY2lkLCBvbmx5Q2lkcyl7XG4gICAgbGV0IGNvbXBvbmVudCA9IGNvbXBvbmVudHNbY2lkXSB8fCBsb2dFcnJvcihgbm8gY29tcG9uZW50IGZvciBDSUQgJHtjaWR9YCwgY29tcG9uZW50cylcbiAgICBsZXQgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIilcbiAgICBsZXQgW2h0bWwsIHN0cmVhbXNdID0gdGhpcy5yZWN1cnNpdmVUb1N0cmluZyhjb21wb25lbnQsIGNvbXBvbmVudHMsIG9ubHlDaWRzKVxuICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IGh0bWxcbiAgICBsZXQgY29udGFpbmVyID0gdGVtcGxhdGUuY29udGVudFxuICAgIGxldCBza2lwID0gb25seUNpZHMgJiYgIW9ubHlDaWRzLmhhcyhjaWQpXG5cbiAgICBsZXQgW2hhc0NoaWxkTm9kZXMsIGhhc0NoaWxkQ29tcG9uZW50c10gPVxuICAgICAgQXJyYXkuZnJvbShjb250YWluZXIuY2hpbGROb2RlcykucmVkdWNlKChbaGFzTm9kZXMsIGhhc0NvbXBvbmVudHNdLCBjaGlsZCwgaSkgPT4ge1xuICAgICAgICBpZihjaGlsZC5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpe1xuICAgICAgICAgIGlmKGNoaWxkLmdldEF0dHJpYnV0ZShQSFhfQ09NUE9ORU5UKSl7XG4gICAgICAgICAgICByZXR1cm4gW2hhc05vZGVzLCB0cnVlXVxuICAgICAgICAgIH1cbiAgICAgICAgICBjaGlsZC5zZXRBdHRyaWJ1dGUoUEhYX0NPTVBPTkVOVCwgY2lkKVxuICAgICAgICAgIGlmKCFjaGlsZC5pZCl7IGNoaWxkLmlkID0gYCR7dGhpcy5wYXJlbnRWaWV3SWQoKX0tJHtjaWR9LSR7aX1gIH1cbiAgICAgICAgICBpZihza2lwKXtcbiAgICAgICAgICAgIGNoaWxkLnNldEF0dHJpYnV0ZShQSFhfU0tJUCwgXCJcIilcbiAgICAgICAgICAgIGNoaWxkLmlubmVySFRNTCA9IFwiXCJcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIFt0cnVlLCBoYXNDb21wb25lbnRzXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmKGNoaWxkLm5vZGVWYWx1ZS50cmltKCkgIT09IFwiXCIpe1xuICAgICAgICAgICAgbG9nRXJyb3IoXCJvbmx5IEhUTUwgZWxlbWVudCB0YWdzIGFyZSBhbGxvd2VkIGF0IHRoZSByb290IG9mIGNvbXBvbmVudHMuXFxuXFxuXCIgK1xuICAgICAgICAgICAgICBgZ290OiBcIiR7Y2hpbGQubm9kZVZhbHVlLnRyaW0oKX1cIlxcblxcbmAgK1xuICAgICAgICAgICAgICBcIndpdGhpbjpcXG5cIiwgdGVtcGxhdGUuaW5uZXJIVE1MLnRyaW0oKSlcbiAgICAgICAgICAgIGNoaWxkLnJlcGxhY2VXaXRoKHRoaXMuY3JlYXRlU3BhbihjaGlsZC5ub2RlVmFsdWUsIGNpZCkpXG4gICAgICAgICAgICByZXR1cm4gW3RydWUsIGhhc0NvbXBvbmVudHNdXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoaWxkLnJlbW92ZSgpXG4gICAgICAgICAgICByZXR1cm4gW2hhc05vZGVzLCBoYXNDb21wb25lbnRzXVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSwgW2ZhbHNlLCBmYWxzZV0pXG5cbiAgICBpZighaGFzQ2hpbGROb2RlcyAmJiAhaGFzQ2hpbGRDb21wb25lbnRzKXtcbiAgICAgIGxvZ0Vycm9yKFwiZXhwZWN0ZWQgYXQgbGVhc3Qgb25lIEhUTUwgZWxlbWVudCB0YWcgaW5zaWRlIGEgY29tcG9uZW50LCBidXQgdGhlIGNvbXBvbmVudCBpcyBlbXB0eTpcXG5cIixcbiAgICAgICAgdGVtcGxhdGUuaW5uZXJIVE1MLnRyaW0oKSlcbiAgICAgIHJldHVybiBbdGhpcy5jcmVhdGVTcGFuKFwiXCIsIGNpZCkub3V0ZXJIVE1MLCBzdHJlYW1zXVxuICAgIH0gZWxzZSBpZighaGFzQ2hpbGROb2RlcyAmJiBoYXNDaGlsZENvbXBvbmVudHMpe1xuICAgICAgbG9nRXJyb3IoXCJleHBlY3RlZCBhdCBsZWFzdCBvbmUgSFRNTCBlbGVtZW50IHRhZyBkaXJlY3RseSBpbnNpZGUgYSBjb21wb25lbnQsIGJ1dCBvbmx5IHN1YmNvbXBvbmVudHMgd2VyZSBmb3VuZC4gQSBjb21wb25lbnQgbXVzdCByZW5kZXIgYXQgbGVhc3Qgb25lIEhUTUwgdGFnIGRpcmVjdGx5IGluc2lkZSBpdHNlbGYuXCIsXG4gICAgICAgIHRlbXBsYXRlLmlubmVySFRNTC50cmltKCkpXG4gICAgICByZXR1cm4gW3RlbXBsYXRlLmlubmVySFRNTCwgc3RyZWFtc11cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFt0ZW1wbGF0ZS5pbm5lckhUTUwsIHN0cmVhbXNdXG4gICAgfVxuICB9XG5cbiAgY3JlYXRlU3Bhbih0ZXh0LCBjaWQpe1xuICAgIGxldCBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIilcbiAgICBzcGFuLmlubmVyVGV4dCA9IHRleHRcbiAgICBzcGFuLnNldEF0dHJpYnV0ZShQSFhfQ09NUE9ORU5ULCBjaWQpXG4gICAgcmV0dXJuIHNwYW5cbiAgfVxufVxuIiwgImxldCB2aWV3SG9va0lEID0gMVxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmlld0hvb2sge1xuICBzdGF0aWMgbWFrZUlEKCl7IHJldHVybiB2aWV3SG9va0lEKysgfVxuICBzdGF0aWMgZWxlbWVudElEKGVsKXsgcmV0dXJuIGVsLnBoeEhvb2tJZCB9XG5cbiAgY29uc3RydWN0b3IodmlldywgZWwsIGNhbGxiYWNrcyl7XG4gICAgdGhpcy5fX3ZpZXcgPSB2aWV3XG4gICAgdGhpcy5saXZlU29ja2V0ID0gdmlldy5saXZlU29ja2V0XG4gICAgdGhpcy5fX2NhbGxiYWNrcyA9IGNhbGxiYWNrc1xuICAgIHRoaXMuX19saXN0ZW5lcnMgPSBuZXcgU2V0KClcbiAgICB0aGlzLl9faXNEaXNjb25uZWN0ZWQgPSBmYWxzZVxuICAgIHRoaXMuZWwgPSBlbFxuICAgIHRoaXMuZWwucGh4SG9va0lkID0gdGhpcy5jb25zdHJ1Y3Rvci5tYWtlSUQoKVxuICAgIGZvcihsZXQga2V5IGluIHRoaXMuX19jYWxsYmFja3MpeyB0aGlzW2tleV0gPSB0aGlzLl9fY2FsbGJhY2tzW2tleV0gfVxuICB9XG5cbiAgX19tb3VudGVkKCl7IHRoaXMubW91bnRlZCAmJiB0aGlzLm1vdW50ZWQoKSB9XG4gIF9fdXBkYXRlZCgpeyB0aGlzLnVwZGF0ZWQgJiYgdGhpcy51cGRhdGVkKCkgfVxuICBfX2JlZm9yZVVwZGF0ZSgpeyB0aGlzLmJlZm9yZVVwZGF0ZSAmJiB0aGlzLmJlZm9yZVVwZGF0ZSgpIH1cbiAgX19kZXN0cm95ZWQoKXsgdGhpcy5kZXN0cm95ZWQgJiYgdGhpcy5kZXN0cm95ZWQoKSB9XG4gIF9fcmVjb25uZWN0ZWQoKXtcbiAgICBpZih0aGlzLl9faXNEaXNjb25uZWN0ZWQpe1xuICAgICAgdGhpcy5fX2lzRGlzY29ubmVjdGVkID0gZmFsc2VcbiAgICAgIHRoaXMucmVjb25uZWN0ZWQgJiYgdGhpcy5yZWNvbm5lY3RlZCgpXG4gICAgfVxuICB9XG4gIF9fZGlzY29ubmVjdGVkKCl7XG4gICAgdGhpcy5fX2lzRGlzY29ubmVjdGVkID0gdHJ1ZVxuICAgIHRoaXMuZGlzY29ubmVjdGVkICYmIHRoaXMuZGlzY29ubmVjdGVkKClcbiAgfVxuXG4gIHB1c2hFdmVudChldmVudCwgcGF5bG9hZCA9IHt9LCBvblJlcGx5ID0gZnVuY3Rpb24gKCl7IH0pe1xuICAgIHJldHVybiB0aGlzLl9fdmlldy5wdXNoSG9va0V2ZW50KG51bGwsIGV2ZW50LCBwYXlsb2FkLCBvblJlcGx5KVxuICB9XG5cbiAgcHVzaEV2ZW50VG8ocGh4VGFyZ2V0LCBldmVudCwgcGF5bG9hZCA9IHt9LCBvblJlcGx5ID0gZnVuY3Rpb24gKCl7IH0pe1xuICAgIHJldHVybiB0aGlzLl9fdmlldy53aXRoaW5UYXJnZXRzKHBoeFRhcmdldCwgKHZpZXcsIHRhcmdldEN0eCkgPT4ge1xuICAgICAgcmV0dXJuIHZpZXcucHVzaEhvb2tFdmVudCh0YXJnZXRDdHgsIGV2ZW50LCBwYXlsb2FkLCBvblJlcGx5KVxuICAgIH0pXG4gIH1cblxuICBoYW5kbGVFdmVudChldmVudCwgY2FsbGJhY2spe1xuICAgIGxldCBjYWxsYmFja1JlZiA9IChjdXN0b21FdmVudCwgYnlwYXNzKSA9PiBieXBhc3MgPyBldmVudCA6IGNhbGxiYWNrKGN1c3RvbUV2ZW50LmRldGFpbClcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihgcGh4OiR7ZXZlbnR9YCwgY2FsbGJhY2tSZWYpXG4gICAgdGhpcy5fX2xpc3RlbmVycy5hZGQoY2FsbGJhY2tSZWYpXG4gICAgcmV0dXJuIGNhbGxiYWNrUmVmXG4gIH1cblxuICByZW1vdmVIYW5kbGVFdmVudChjYWxsYmFja1JlZil7XG4gICAgbGV0IGV2ZW50ID0gY2FsbGJhY2tSZWYobnVsbCwgdHJ1ZSlcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihgcGh4OiR7ZXZlbnR9YCwgY2FsbGJhY2tSZWYpXG4gICAgdGhpcy5fX2xpc3RlbmVycy5kZWxldGUoY2FsbGJhY2tSZWYpXG4gIH1cblxuICB1cGxvYWQobmFtZSwgZmlsZXMpe1xuICAgIHJldHVybiB0aGlzLl9fdmlldy5kaXNwYXRjaFVwbG9hZHMobmFtZSwgZmlsZXMpXG4gIH1cblxuICB1cGxvYWRUbyhwaHhUYXJnZXQsIG5hbWUsIGZpbGVzKXtcbiAgICByZXR1cm4gdGhpcy5fX3ZpZXcud2l0aGluVGFyZ2V0cyhwaHhUYXJnZXQsIHZpZXcgPT4gdmlldy5kaXNwYXRjaFVwbG9hZHMobmFtZSwgZmlsZXMpKVxuICB9XG5cbiAgX19jbGVhbnVwX18oKXtcbiAgICB0aGlzLl9fbGlzdGVuZXJzLmZvckVhY2goY2FsbGJhY2tSZWYgPT4gdGhpcy5yZW1vdmVIYW5kbGVFdmVudChjYWxsYmFja1JlZikpXG4gIH1cbn1cbiIsICJpbXBvcnQgRE9NIGZyb20gXCIuL2RvbVwiXG5pbXBvcnQgQVJJQSBmcm9tIFwiLi9hcmlhXCJcblxubGV0IGZvY3VzU3RhY2sgPSBudWxsXG5cbmxldCBKUyA9IHtcbiAgZXhlYyhldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZGVmYXVsdHMpe1xuICAgIGxldCBbZGVmYXVsdEtpbmQsIGRlZmF1bHRBcmdzXSA9IGRlZmF1bHRzIHx8IFtudWxsLCB7fV1cbiAgICBsZXQgY29tbWFuZHMgPSBwaHhFdmVudC5jaGFyQXQoMCkgPT09IFwiW1wiID9cbiAgICAgIEpTT04ucGFyc2UocGh4RXZlbnQpIDogW1tkZWZhdWx0S2luZCwgZGVmYXVsdEFyZ3NdXVxuXG4gICAgY29tbWFuZHMuZm9yRWFjaCgoW2tpbmQsIGFyZ3NdKSA9PiB7XG4gICAgICBpZihraW5kID09PSBkZWZhdWx0S2luZCAmJiBkZWZhdWx0QXJncy5kYXRhKXtcbiAgICAgICAgYXJncy5kYXRhID0gT2JqZWN0LmFzc2lnbihhcmdzLmRhdGEgfHwge30sIGRlZmF1bHRBcmdzLmRhdGEpXG4gICAgICB9XG4gICAgICB0aGlzLmZpbHRlclRvRWxzKHNvdXJjZUVsLCBhcmdzKS5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgdGhpc1tgZXhlY18ke2tpbmR9YF0oZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCBhcmdzKVxuICAgICAgfSlcbiAgICB9KVxuICB9LFxuXG4gIGlzVmlzaWJsZShlbCl7XG4gICAgcmV0dXJuICEhKGVsLm9mZnNldFdpZHRoIHx8IGVsLm9mZnNldEhlaWdodCB8fCBlbC5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCA+IDApXG4gIH0sXG5cbiAgLy8gcHJpdmF0ZVxuXG4gIC8vIGNvbW1hbmRzXG5cbiAgZXhlY19leGVjKGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwgW2F0dHIsIHRvXSl7XG4gICAgbGV0IG5vZGVzID0gdG8gPyBET00uYWxsKGRvY3VtZW50LCB0bykgOiBbc291cmNlRWxdXG4gICAgbm9kZXMuZm9yRWFjaChub2RlID0+IHtcbiAgICAgIGxldCBlbmNvZGVkSlMgPSBub2RlLmdldEF0dHJpYnV0ZShhdHRyKVxuICAgICAgaWYoIWVuY29kZWRKUyl7IHRocm93IG5ldyBFcnJvcihgZXhwZWN0ZWQgJHthdHRyfSB0byBjb250YWluIEpTIGNvbW1hbmQgb24gXCIke3RvfVwiYCkgfVxuICAgICAgdmlldy5saXZlU29ja2V0LmV4ZWNKUyhub2RlLCBlbmNvZGVkSlMsIGV2ZW50VHlwZSlcbiAgICB9KVxuICB9LFxuXG4gIGV4ZWNfZGlzcGF0Y2goZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7dG8sIGV2ZW50LCBkZXRhaWwsIGJ1YmJsZXN9KXtcbiAgICBkZXRhaWwgPSBkZXRhaWwgfHwge31cbiAgICBkZXRhaWwuZGlzcGF0Y2hlciA9IHNvdXJjZUVsXG4gICAgRE9NLmRpc3BhdGNoRXZlbnQoZWwsIGV2ZW50LCB7ZGV0YWlsLCBidWJibGVzfSlcbiAgfSxcblxuICBleGVjX3B1c2goZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCBhcmdzKXtcbiAgICBpZighdmlldy5pc0Nvbm5lY3RlZCgpKXsgcmV0dXJuIH1cblxuICAgIGxldCB7ZXZlbnQsIGRhdGEsIHRhcmdldCwgcGFnZV9sb2FkaW5nLCBsb2FkaW5nLCB2YWx1ZSwgZGlzcGF0Y2hlcn0gPSBhcmdzXG4gICAgbGV0IHB1c2hPcHRzID0ge2xvYWRpbmcsIHZhbHVlLCB0YXJnZXQsIHBhZ2VfbG9hZGluZzogISFwYWdlX2xvYWRpbmd9XG4gICAgbGV0IHRhcmdldFNyYyA9IGV2ZW50VHlwZSA9PT0gXCJjaGFuZ2VcIiAmJiBkaXNwYXRjaGVyID8gZGlzcGF0Y2hlciA6IHNvdXJjZUVsXG4gICAgbGV0IHBoeFRhcmdldCA9IHRhcmdldCB8fCB0YXJnZXRTcmMuZ2V0QXR0cmlidXRlKHZpZXcuYmluZGluZyhcInRhcmdldFwiKSkgfHwgdGFyZ2V0U3JjXG4gICAgdmlldy53aXRoaW5UYXJnZXRzKHBoeFRhcmdldCwgKHRhcmdldFZpZXcsIHRhcmdldEN0eCkgPT4ge1xuICAgICAgaWYoZXZlbnRUeXBlID09PSBcImNoYW5nZVwiKXtcbiAgICAgICAgbGV0IHtuZXdDaWQsIF90YXJnZXQsIGNhbGxiYWNrfSA9IGFyZ3NcbiAgICAgICAgX3RhcmdldCA9IF90YXJnZXQgfHwgKERPTS5pc0Zvcm1JbnB1dChzb3VyY2VFbCkgPyBzb3VyY2VFbC5uYW1lIDogdW5kZWZpbmVkKVxuICAgICAgICBpZihfdGFyZ2V0KXsgcHVzaE9wdHMuX3RhcmdldCA9IF90YXJnZXQgfVxuICAgICAgICB0YXJnZXRWaWV3LnB1c2hJbnB1dChzb3VyY2VFbCwgdGFyZ2V0Q3R4LCBuZXdDaWQsIGV2ZW50IHx8IHBoeEV2ZW50LCBwdXNoT3B0cywgY2FsbGJhY2spXG4gICAgICB9IGVsc2UgaWYoZXZlbnRUeXBlID09PSBcInN1Ym1pdFwiKXtcbiAgICAgICAgbGV0IHtzdWJtaXR0ZXJ9ID0gYXJnc1xuICAgICAgICB0YXJnZXRWaWV3LnN1Ym1pdEZvcm0oc291cmNlRWwsIHRhcmdldEN0eCwgZXZlbnQgfHwgcGh4RXZlbnQsIHN1Ym1pdHRlciwgcHVzaE9wdHMpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXRWaWV3LnB1c2hFdmVudChldmVudFR5cGUsIHNvdXJjZUVsLCB0YXJnZXRDdHgsIGV2ZW50IHx8IHBoeEV2ZW50LCBkYXRhLCBwdXNoT3B0cylcbiAgICAgIH1cbiAgICB9KVxuICB9LFxuXG4gIGV4ZWNfbmF2aWdhdGUoZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7aHJlZiwgcmVwbGFjZX0pe1xuICAgIHZpZXcubGl2ZVNvY2tldC5oaXN0b3J5UmVkaXJlY3QoaHJlZiwgcmVwbGFjZSA/IFwicmVwbGFjZVwiIDogXCJwdXNoXCIpXG4gIH0sXG5cbiAgZXhlY19wYXRjaChldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHtocmVmLCByZXBsYWNlfSl7XG4gICAgdmlldy5saXZlU29ja2V0LnB1c2hIaXN0b3J5UGF0Y2goaHJlZiwgcmVwbGFjZSA/IFwicmVwbGFjZVwiIDogXCJwdXNoXCIsIHNvdXJjZUVsKVxuICB9LFxuXG4gIGV4ZWNfZm9jdXMoZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsKXtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IEFSSUEuYXR0ZW1wdEZvY3VzKGVsKSlcbiAgfSxcblxuICBleGVjX2ZvY3VzX2ZpcnN0KGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCl7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiBBUklBLmZvY3VzRmlyc3RJbnRlcmFjdGl2ZShlbCkgfHwgQVJJQS5mb2N1c0ZpcnN0KGVsKSlcbiAgfSxcblxuICBleGVjX3B1c2hfZm9jdXMoZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsKXtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IGZvY3VzU3RhY2sgPSBlbCB8fCBzb3VyY2VFbClcbiAgfSxcblxuICBleGVjX3BvcF9mb2N1cyhldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwpe1xuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgaWYoZm9jdXNTdGFjayl7IGZvY3VzU3RhY2suZm9jdXMoKSB9XG4gICAgICBmb2N1c1N0YWNrID0gbnVsbFxuICAgIH0pXG4gIH0sXG5cbiAgZXhlY19hZGRfY2xhc3MoZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7bmFtZXMsIHRyYW5zaXRpb24sIHRpbWV9KXtcbiAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgbmFtZXMsIFtdLCB0cmFuc2l0aW9uLCB0aW1lLCB2aWV3KVxuICB9LFxuXG4gIGV4ZWNfcmVtb3ZlX2NsYXNzKGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge25hbWVzLCB0cmFuc2l0aW9uLCB0aW1lfSl7XG4gICAgdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIFtdLCBuYW1lcywgdHJhbnNpdGlvbiwgdGltZSwgdmlldylcbiAgfSxcblxuICBleGVjX3RyYW5zaXRpb24oZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7dGltZSwgdHJhbnNpdGlvbn0pe1xuICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBbXSwgW10sIHRyYW5zaXRpb24sIHRpbWUsIHZpZXcpXG4gIH0sXG5cbiAgZXhlY190b2dnbGUoZXZlbnRUeXBlLCBwaHhFdmVudCwgdmlldywgc291cmNlRWwsIGVsLCB7ZGlzcGxheSwgaW5zLCBvdXRzLCB0aW1lfSl7XG4gICAgdGhpcy50b2dnbGUoZXZlbnRUeXBlLCB2aWV3LCBlbCwgZGlzcGxheSwgaW5zLCBvdXRzLCB0aW1lKVxuICB9LFxuXG4gIGV4ZWNfc2hvdyhldmVudFR5cGUsIHBoeEV2ZW50LCB2aWV3LCBzb3VyY2VFbCwgZWwsIHtkaXNwbGF5LCB0cmFuc2l0aW9uLCB0aW1lfSl7XG4gICAgdGhpcy5zaG93KGV2ZW50VHlwZSwgdmlldywgZWwsIGRpc3BsYXksIHRyYW5zaXRpb24sIHRpbWUpXG4gIH0sXG5cbiAgZXhlY19oaWRlKGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2Rpc3BsYXksIHRyYW5zaXRpb24sIHRpbWV9KXtcbiAgICB0aGlzLmhpZGUoZXZlbnRUeXBlLCB2aWV3LCBlbCwgZGlzcGxheSwgdHJhbnNpdGlvbiwgdGltZSlcbiAgfSxcblxuICBleGVjX3NldF9hdHRyKGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2F0dHI6IFthdHRyLCB2YWxdfSl7XG4gICAgdGhpcy5zZXRPclJlbW92ZUF0dHJzKGVsLCBbW2F0dHIsIHZhbF1dLCBbXSlcbiAgfSxcblxuICBleGVjX3JlbW92ZV9hdHRyKGV2ZW50VHlwZSwgcGh4RXZlbnQsIHZpZXcsIHNvdXJjZUVsLCBlbCwge2F0dHJ9KXtcbiAgICB0aGlzLnNldE9yUmVtb3ZlQXR0cnMoZWwsIFtdLCBbYXR0cl0pXG4gIH0sXG5cbiAgLy8gdXRpbHMgZm9yIGNvbW1hbmRzXG5cbiAgc2hvdyhldmVudFR5cGUsIHZpZXcsIGVsLCBkaXNwbGF5LCB0cmFuc2l0aW9uLCB0aW1lKXtcbiAgICBpZighdGhpcy5pc1Zpc2libGUoZWwpKXtcbiAgICAgIHRoaXMudG9nZ2xlKGV2ZW50VHlwZSwgdmlldywgZWwsIGRpc3BsYXksIHRyYW5zaXRpb24sIG51bGwsIHRpbWUpXG4gICAgfVxuICB9LFxuXG4gIGhpZGUoZXZlbnRUeXBlLCB2aWV3LCBlbCwgZGlzcGxheSwgdHJhbnNpdGlvbiwgdGltZSl7XG4gICAgaWYodGhpcy5pc1Zpc2libGUoZWwpKXtcbiAgICAgIHRoaXMudG9nZ2xlKGV2ZW50VHlwZSwgdmlldywgZWwsIGRpc3BsYXksIG51bGwsIHRyYW5zaXRpb24sIHRpbWUpXG4gICAgfVxuICB9LFxuXG4gIHRvZ2dsZShldmVudFR5cGUsIHZpZXcsIGVsLCBkaXNwbGF5LCBpbnMsIG91dHMsIHRpbWUpe1xuICAgIGxldCBbaW5DbGFzc2VzLCBpblN0YXJ0Q2xhc3NlcywgaW5FbmRDbGFzc2VzXSA9IGlucyB8fCBbW10sIFtdLCBbXV1cbiAgICBsZXQgW291dENsYXNzZXMsIG91dFN0YXJ0Q2xhc3Nlcywgb3V0RW5kQ2xhc3Nlc10gPSBvdXRzIHx8IFtbXSwgW10sIFtdXVxuICAgIGlmKGluQ2xhc3Nlcy5sZW5ndGggPiAwIHx8IG91dENsYXNzZXMubGVuZ3RoID4gMCl7XG4gICAgICBpZih0aGlzLmlzVmlzaWJsZShlbCkpe1xuICAgICAgICBsZXQgb25TdGFydCA9ICgpID0+IHtcbiAgICAgICAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgb3V0U3RhcnRDbGFzc2VzLCBpbkNsYXNzZXMuY29uY2F0KGluU3RhcnRDbGFzc2VzKS5jb25jYXQoaW5FbmRDbGFzc2VzKSlcbiAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBvdXRDbGFzc2VzLCBbXSlcbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIG91dEVuZENsYXNzZXMsIG91dFN0YXJ0Q2xhc3NlcykpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpoaWRlLXN0YXJ0XCIpKVxuICAgICAgICB2aWV3LnRyYW5zaXRpb24odGltZSwgb25TdGFydCwgKCkgPT4ge1xuICAgICAgICAgIHRoaXMuYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBbXSwgb3V0Q2xhc3Nlcy5jb25jYXQob3V0RW5kQ2xhc3NlcykpXG4gICAgICAgICAgRE9NLnB1dFN0aWNreShlbCwgXCJ0b2dnbGVcIiwgY3VycmVudEVsID0+IGN1cnJlbnRFbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCIpXG4gICAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJwaHg6aGlkZS1lbmRcIikpXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZihldmVudFR5cGUgPT09IFwicmVtb3ZlXCIpeyByZXR1cm4gfVxuICAgICAgICBsZXQgb25TdGFydCA9ICgpID0+IHtcbiAgICAgICAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgaW5TdGFydENsYXNzZXMsIG91dENsYXNzZXMuY29uY2F0KG91dFN0YXJ0Q2xhc3NlcykuY29uY2F0KG91dEVuZENsYXNzZXMpKVxuICAgICAgICAgIGxldCBzdGlja3lEaXNwbGF5ID0gZGlzcGxheSB8fCB0aGlzLmRlZmF1bHREaXNwbGF5KGVsKVxuICAgICAgICAgIERPTS5wdXRTdGlja3koZWwsIFwidG9nZ2xlXCIsIGN1cnJlbnRFbCA9PiBjdXJyZW50RWwuc3R5bGUuZGlzcGxheSA9IHN0aWNreURpc3BsYXkpXG4gICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgaW5DbGFzc2VzLCBbXSlcbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5hZGRPclJlbW92ZUNsYXNzZXMoZWwsIGluRW5kQ2xhc3NlcywgaW5TdGFydENsYXNzZXMpKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJwaHg6c2hvdy1zdGFydFwiKSlcbiAgICAgICAgdmlldy50cmFuc2l0aW9uKHRpbWUsIG9uU3RhcnQsICgpID0+IHtcbiAgICAgICAgICB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgW10sIGluQ2xhc3Nlcy5jb25jYXQoaW5FbmRDbGFzc2VzKSlcbiAgICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpzaG93LWVuZFwiKSlcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYodGhpcy5pc1Zpc2libGUoZWwpKXtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJwaHg6aGlkZS1zdGFydFwiKSlcbiAgICAgICAgICBET00ucHV0U3RpY2t5KGVsLCBcInRvZ2dsZVwiLCBjdXJyZW50RWwgPT4gY3VycmVudEVsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIilcbiAgICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpoaWRlLWVuZFwiKSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIGVsLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwicGh4OnNob3ctc3RhcnRcIikpXG4gICAgICAgICAgbGV0IHN0aWNreURpc3BsYXkgPSBkaXNwbGF5IHx8IHRoaXMuZGVmYXVsdERpc3BsYXkoZWwpXG4gICAgICAgICAgRE9NLnB1dFN0aWNreShlbCwgXCJ0b2dnbGVcIiwgY3VycmVudEVsID0+IGN1cnJlbnRFbC5zdHlsZS5kaXNwbGF5ID0gc3RpY2t5RGlzcGxheSlcbiAgICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcInBoeDpzaG93LWVuZFwiKSlcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgYWRkT3JSZW1vdmVDbGFzc2VzKGVsLCBhZGRzLCByZW1vdmVzLCB0cmFuc2l0aW9uLCB0aW1lLCB2aWV3KXtcbiAgICBsZXQgW3RyYW5zaXRpb25fcnVuLCB0cmFuc2l0aW9uX3N0YXJ0LCB0cmFuc2l0aW9uX2VuZF0gPSB0cmFuc2l0aW9uIHx8IFtbXSwgW10sIFtdXVxuICAgIGlmKHRyYW5zaXRpb25fcnVuLmxlbmd0aCA+IDApe1xuICAgICAgbGV0IG9uU3RhcnQgPSAoKSA9PiB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgdHJhbnNpdGlvbl9zdGFydC5jb25jYXQodHJhbnNpdGlvbl9ydW4pLCBbXSlcbiAgICAgIGxldCBvbkRvbmUgPSAoKSA9PiB0aGlzLmFkZE9yUmVtb3ZlQ2xhc3NlcyhlbCwgYWRkcy5jb25jYXQodHJhbnNpdGlvbl9lbmQpLCByZW1vdmVzLmNvbmNhdCh0cmFuc2l0aW9uX3J1bikuY29uY2F0KHRyYW5zaXRpb25fc3RhcnQpKVxuICAgICAgcmV0dXJuIHZpZXcudHJhbnNpdGlvbih0aW1lLCBvblN0YXJ0LCBvbkRvbmUpXG4gICAgfVxuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgbGV0IFtwcmV2QWRkcywgcHJldlJlbW92ZXNdID0gRE9NLmdldFN0aWNreShlbCwgXCJjbGFzc2VzXCIsIFtbXSwgW11dKVxuICAgICAgbGV0IGtlZXBBZGRzID0gYWRkcy5maWx0ZXIobmFtZSA9PiBwcmV2QWRkcy5pbmRleE9mKG5hbWUpIDwgMCAmJiAhZWwuY2xhc3NMaXN0LmNvbnRhaW5zKG5hbWUpKVxuICAgICAgbGV0IGtlZXBSZW1vdmVzID0gcmVtb3Zlcy5maWx0ZXIobmFtZSA9PiBwcmV2UmVtb3Zlcy5pbmRleE9mKG5hbWUpIDwgMCAmJiBlbC5jbGFzc0xpc3QuY29udGFpbnMobmFtZSkpXG4gICAgICBsZXQgbmV3QWRkcyA9IHByZXZBZGRzLmZpbHRlcihuYW1lID0+IHJlbW92ZXMuaW5kZXhPZihuYW1lKSA8IDApLmNvbmNhdChrZWVwQWRkcylcbiAgICAgIGxldCBuZXdSZW1vdmVzID0gcHJldlJlbW92ZXMuZmlsdGVyKG5hbWUgPT4gYWRkcy5pbmRleE9mKG5hbWUpIDwgMCkuY29uY2F0KGtlZXBSZW1vdmVzKVxuXG4gICAgICBET00ucHV0U3RpY2t5KGVsLCBcImNsYXNzZXNcIiwgY3VycmVudEVsID0+IHtcbiAgICAgICAgY3VycmVudEVsLmNsYXNzTGlzdC5yZW1vdmUoLi4ubmV3UmVtb3ZlcylcbiAgICAgICAgY3VycmVudEVsLmNsYXNzTGlzdC5hZGQoLi4ubmV3QWRkcylcbiAgICAgICAgcmV0dXJuIFtuZXdBZGRzLCBuZXdSZW1vdmVzXVxuICAgICAgfSlcbiAgICB9KVxuICB9LFxuXG4gIHNldE9yUmVtb3ZlQXR0cnMoZWwsIHNldHMsIHJlbW92ZXMpe1xuICAgIGxldCBbcHJldlNldHMsIHByZXZSZW1vdmVzXSA9IERPTS5nZXRTdGlja3koZWwsIFwiYXR0cnNcIiwgW1tdLCBbXV0pXG5cbiAgICBsZXQgYWx0ZXJlZEF0dHJzID0gc2V0cy5tYXAoKFthdHRyLCBfdmFsXSkgPT4gYXR0cikuY29uY2F0KHJlbW92ZXMpO1xuICAgIGxldCBuZXdTZXRzID0gcHJldlNldHMuZmlsdGVyKChbYXR0ciwgX3ZhbF0pID0+ICFhbHRlcmVkQXR0cnMuaW5jbHVkZXMoYXR0cikpLmNvbmNhdChzZXRzKTtcbiAgICBsZXQgbmV3UmVtb3ZlcyA9IHByZXZSZW1vdmVzLmZpbHRlcigoYXR0cikgPT4gIWFsdGVyZWRBdHRycy5pbmNsdWRlcyhhdHRyKSkuY29uY2F0KHJlbW92ZXMpO1xuXG4gICAgRE9NLnB1dFN0aWNreShlbCwgXCJhdHRyc1wiLCBjdXJyZW50RWwgPT4ge1xuICAgICAgbmV3UmVtb3Zlcy5mb3JFYWNoKGF0dHIgPT4gY3VycmVudEVsLnJlbW92ZUF0dHJpYnV0ZShhdHRyKSlcbiAgICAgIG5ld1NldHMuZm9yRWFjaCgoW2F0dHIsIHZhbF0pID0+IGN1cnJlbnRFbC5zZXRBdHRyaWJ1dGUoYXR0ciwgdmFsKSlcbiAgICAgIHJldHVybiBbbmV3U2V0cywgbmV3UmVtb3Zlc11cbiAgICB9KVxuICB9LFxuXG4gIGhhc0FsbENsYXNzZXMoZWwsIGNsYXNzZXMpeyByZXR1cm4gY2xhc3Nlcy5ldmVyeShuYW1lID0+IGVsLmNsYXNzTGlzdC5jb250YWlucyhuYW1lKSkgfSxcblxuICBpc1RvZ2dsZWRPdXQoZWwsIG91dENsYXNzZXMpe1xuICAgIHJldHVybiAhdGhpcy5pc1Zpc2libGUoZWwpIHx8IHRoaXMuaGFzQWxsQ2xhc3NlcyhlbCwgb3V0Q2xhc3NlcylcbiAgfSxcblxuICBmaWx0ZXJUb0Vscyhzb3VyY2VFbCwge3RvfSl7XG4gICAgcmV0dXJuIHRvID8gRE9NLmFsbChkb2N1bWVudCwgdG8pIDogW3NvdXJjZUVsXVxuICB9LFxuXG4gIGRlZmF1bHREaXNwbGF5KGVsKXtcbiAgICByZXR1cm4ge3RyOiBcInRhYmxlLXJvd1wiLCB0ZDogXCJ0YWJsZS1jZWxsXCJ9W2VsLnRhZ05hbWUudG9Mb3dlckNhc2UoKV0gfHwgXCJibG9ja1wiXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSlNcbiIsICJpbXBvcnQge1xuICBCRUZPUkVfVU5MT0FEX0xPQURFUl9USU1FT1VULFxuICBDSEVDS0FCTEVfSU5QVVRTLFxuICBDT05TRUNVVElWRV9SRUxPQURTLFxuICBQSFhfQVVUT19SRUNPVkVSLFxuICBQSFhfQ09NUE9ORU5ULFxuICBQSFhfQ09OTkVDVEVEX0NMQVNTLFxuICBQSFhfRElTQUJMRV9XSVRILFxuICBQSFhfRElTQUJMRV9XSVRIX1JFU1RPUkUsXG4gIFBIWF9ESVNBQkxFRCxcbiAgUEhYX0RJU0NPTk5FQ1RFRF9DTEFTUyxcbiAgUEhYX0VWRU5UX0NMQVNTRVMsXG4gIFBIWF9FUlJPUl9DTEFTUyxcbiAgUEhYX0ZFRURCQUNLX0ZPUixcbiAgUEhYX0hBU19TVUJNSVRURUQsXG4gIFBIWF9IT09LLFxuICBQSFhfUEFHRV9MT0FESU5HLFxuICBQSFhfUEFSRU5UX0lELFxuICBQSFhfUFJPR1JFU1MsXG4gIFBIWF9SRUFET05MWSxcbiAgUEhYX1JFRixcbiAgUEhYX1JFRl9TUkMsXG4gIFBIWF9ST09UX0lELFxuICBQSFhfU0VTU0lPTixcbiAgUEhYX1NUQVRJQyxcbiAgUEhYX1RSQUNLX1NUQVRJQyxcbiAgUEhYX1RSQUNLX1VQTE9BRFMsXG4gIFBIWF9VUERBVEUsXG4gIFBIWF9VUExPQURfUkVGLFxuICBQSFhfVklFV19TRUxFQ1RPUixcbiAgUEhYX01BSU4sXG4gIFBIWF9NT1VOVEVELFxuICBQVVNIX1RJTUVPVVQsXG59IGZyb20gXCIuL2NvbnN0YW50c1wiXG5cbmltcG9ydCB7XG4gIGNsb25lLFxuICBjbG9zZXN0UGh4QmluZGluZyxcbiAgaXNFbXB0eSxcbiAgaXNFcXVhbE9iaixcbiAgbG9nRXJyb3IsXG4gIG1heWJlLFxuICBpc0NpZCxcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5pbXBvcnQgQnJvd3NlciBmcm9tIFwiLi9icm93c2VyXCJcbmltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcbmltcG9ydCBET01QYXRjaCBmcm9tIFwiLi9kb21fcGF0Y2hcIlxuaW1wb3J0IExpdmVVcGxvYWRlciBmcm9tIFwiLi9saXZlX3VwbG9hZGVyXCJcbmltcG9ydCBSZW5kZXJlZCBmcm9tIFwiLi9yZW5kZXJlZFwiXG5pbXBvcnQgVmlld0hvb2sgZnJvbSBcIi4vdmlld19ob29rXCJcbmltcG9ydCBKUyBmcm9tIFwiLi9qc1wiXG5cbmxldCBzZXJpYWxpemVGb3JtID0gKGZvcm0sIG1ldGFkYXRhLCBvbmx5TmFtZXMgPSBbXSkgPT4ge1xuICBsZXQge3N1Ym1pdHRlciwgLi4ubWV0YX0gPSBtZXRhZGF0YVxuXG4gIC8vIFRPRE86IFJlcGxhY2Ugd2l0aCBgbmV3IEZvcm1EYXRhKGZvcm0sIHN1Ym1pdHRlcilgIHdoZW4gc3VwcG9ydGVkIGJ5IGxhdGVzdCBicm93c2VycyxcbiAgLy8gICAgICAgYW5kIG1lbnRpb24gYGZvcm1kYXRhLXN1Ym1pdHRlci1wb2x5ZmlsbGAgaW4gdGhlIGRvY3MuXG4gIGxldCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShmb3JtKVxuXG4gIC8vIFRPRE86IFJlbW92ZSB3aGVuIEZvcm1EYXRhIGNvbnN0cnVjdG9yIHN1cHBvcnRzIHRoZSBzdWJtaXR0ZXIgYXJndW1lbnQuXG4gIGlmIChzdWJtaXR0ZXIgJiYgc3VibWl0dGVyLmhhc0F0dHJpYnV0ZShcIm5hbWVcIikgJiYgc3VibWl0dGVyLmZvcm0gJiYgc3VibWl0dGVyLmZvcm0gPT09IGZvcm0pe1xuICAgIGZvcm1EYXRhLmFwcGVuZChzdWJtaXR0ZXIubmFtZSwgc3VibWl0dGVyLnZhbHVlKVxuICB9XG5cbiAgbGV0IHRvUmVtb3ZlID0gW11cblxuICBmb3JtRGF0YS5mb3JFYWNoKCh2YWwsIGtleSwgX2luZGV4KSA9PiB7XG4gICAgaWYodmFsIGluc3RhbmNlb2YgRmlsZSl7IHRvUmVtb3ZlLnB1c2goa2V5KSB9XG4gIH0pXG5cbiAgLy8gQ2xlYW51cCBhZnRlciBidWlsZGluZyBmaWxlRGF0YVxuICB0b1JlbW92ZS5mb3JFYWNoKGtleSA9PiBmb3JtRGF0YS5kZWxldGUoa2V5KSlcblxuICBsZXQgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpXG4gIGZvcihsZXQgW2tleSwgdmFsXSBvZiBmb3JtRGF0YS5lbnRyaWVzKCkpe1xuICAgIGlmKG9ubHlOYW1lcy5sZW5ndGggPT09IDAgfHwgb25seU5hbWVzLmluZGV4T2Yoa2V5KSA+PSAwKXtcbiAgICAgIHBhcmFtcy5hcHBlbmQoa2V5LCB2YWwpXG4gICAgfVxuICB9XG4gIGZvcihsZXQgbWV0YUtleSBpbiBtZXRhKXsgcGFyYW1zLmFwcGVuZChtZXRhS2V5LCBtZXRhW21ldGFLZXldKSB9XG5cbiAgcmV0dXJuIHBhcmFtcy50b1N0cmluZygpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZpZXcge1xuICBjb25zdHJ1Y3RvcihlbCwgbGl2ZVNvY2tldCwgcGFyZW50VmlldywgZmxhc2gsIGxpdmVSZWZlcmVyKXtcbiAgICB0aGlzLmlzRGVhZCA9IGZhbHNlXG4gICAgdGhpcy5saXZlU29ja2V0ID0gbGl2ZVNvY2tldFxuICAgIHRoaXMuZmxhc2ggPSBmbGFzaFxuICAgIHRoaXMucGFyZW50ID0gcGFyZW50Vmlld1xuICAgIHRoaXMucm9vdCA9IHBhcmVudFZpZXcgPyBwYXJlbnRWaWV3LnJvb3QgOiB0aGlzXG4gICAgdGhpcy5lbCA9IGVsXG4gICAgdGhpcy5pZCA9IHRoaXMuZWwuaWRcbiAgICB0aGlzLnJlZiA9IDBcbiAgICB0aGlzLmNoaWxkSm9pbnMgPSAwXG4gICAgdGhpcy5sb2FkZXJUaW1lciA9IG51bGxcbiAgICB0aGlzLnBlbmRpbmdEaWZmcyA9IFtdXG4gICAgdGhpcy5wcnVuaW5nQ0lEcyA9IFtdXG4gICAgdGhpcy5yZWRpcmVjdCA9IGZhbHNlXG4gICAgdGhpcy5ocmVmID0gbnVsbFxuICAgIHRoaXMuam9pbkNvdW50ID0gdGhpcy5wYXJlbnQgPyB0aGlzLnBhcmVudC5qb2luQ291bnQgLSAxIDogMFxuICAgIHRoaXMuam9pblBlbmRpbmcgPSB0cnVlXG4gICAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZVxuICAgIHRoaXMuam9pbkNhbGxiYWNrID0gZnVuY3Rpb24ob25Eb25lKXsgb25Eb25lICYmIG9uRG9uZSgpIH1cbiAgICB0aGlzLnN0b3BDYWxsYmFjayA9IGZ1bmN0aW9uKCl7IH1cbiAgICB0aGlzLnBlbmRpbmdKb2luT3BzID0gdGhpcy5wYXJlbnQgPyBudWxsIDogW11cbiAgICB0aGlzLnZpZXdIb29rcyA9IHt9XG4gICAgdGhpcy51cGxvYWRlcnMgPSB7fVxuICAgIHRoaXMuZm9ybVN1Ym1pdHMgPSBbXVxuICAgIHRoaXMuY2hpbGRyZW4gPSB0aGlzLnBhcmVudCA/IG51bGwgOiB7fVxuICAgIHRoaXMucm9vdC5jaGlsZHJlblt0aGlzLmlkXSA9IHt9XG4gICAgdGhpcy5jaGFubmVsID0gdGhpcy5saXZlU29ja2V0LmNoYW5uZWwoYGx2OiR7dGhpcy5pZH1gLCAoKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZWRpcmVjdDogdGhpcy5yZWRpcmVjdCA/IHRoaXMuaHJlZiA6IHVuZGVmaW5lZCxcbiAgICAgICAgdXJsOiB0aGlzLnJlZGlyZWN0ID8gdW5kZWZpbmVkIDogdGhpcy5ocmVmIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgcGFyYW1zOiB0aGlzLmNvbm5lY3RQYXJhbXMobGl2ZVJlZmVyZXIpLFxuICAgICAgICBzZXNzaW9uOiB0aGlzLmdldFNlc3Npb24oKSxcbiAgICAgICAgc3RhdGljOiB0aGlzLmdldFN0YXRpYygpLFxuICAgICAgICBmbGFzaDogdGhpcy5mbGFzaCxcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgc2V0SHJlZihocmVmKXsgdGhpcy5ocmVmID0gaHJlZiB9XG5cbiAgc2V0UmVkaXJlY3QoaHJlZil7XG4gICAgdGhpcy5yZWRpcmVjdCA9IHRydWVcbiAgICB0aGlzLmhyZWYgPSBocmVmXG4gIH1cblxuICBpc01haW4oKXsgcmV0dXJuIHRoaXMuZWwuaGFzQXR0cmlidXRlKFBIWF9NQUlOKSB9XG5cbiAgY29ubmVjdFBhcmFtcyhsaXZlUmVmZXJlcil7XG4gICAgbGV0IHBhcmFtcyA9IHRoaXMubGl2ZVNvY2tldC5wYXJhbXModGhpcy5lbClcbiAgICBsZXQgbWFuaWZlc3QgPVxuICAgICAgRE9NLmFsbChkb2N1bWVudCwgYFske3RoaXMuYmluZGluZyhQSFhfVFJBQ0tfU1RBVElDKX1dYClcbiAgICAgICAgLm1hcChub2RlID0+IG5vZGUuc3JjIHx8IG5vZGUuaHJlZikuZmlsdGVyKHVybCA9PiB0eXBlb2YgKHVybCkgPT09IFwic3RyaW5nXCIpXG5cbiAgICBpZihtYW5pZmVzdC5sZW5ndGggPiAwKXsgcGFyYW1zW1wiX3RyYWNrX3N0YXRpY1wiXSA9IG1hbmlmZXN0IH1cbiAgICBwYXJhbXNbXCJfbW91bnRzXCJdID0gdGhpcy5qb2luQ291bnRcbiAgICBwYXJhbXNbXCJfbGl2ZV9yZWZlcmVyXCJdID0gbGl2ZVJlZmVyZXJcblxuICAgIHJldHVybiBwYXJhbXNcbiAgfVxuXG4gIGlzQ29ubmVjdGVkKCl7IHJldHVybiB0aGlzLmNoYW5uZWwuY2FuUHVzaCgpIH1cblxuICBnZXRTZXNzaW9uKCl7IHJldHVybiB0aGlzLmVsLmdldEF0dHJpYnV0ZShQSFhfU0VTU0lPTikgfVxuXG4gIGdldFN0YXRpYygpe1xuICAgIGxldCB2YWwgPSB0aGlzLmVsLmdldEF0dHJpYnV0ZShQSFhfU1RBVElDKVxuICAgIHJldHVybiB2YWwgPT09IFwiXCIgPyBudWxsIDogdmFsXG4gIH1cblxuICBkZXN0cm95KGNhbGxiYWNrID0gZnVuY3Rpb24gKCl7IH0pe1xuICAgIHRoaXMuZGVzdHJveUFsbENoaWxkcmVuKClcbiAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWVcbiAgICBkZWxldGUgdGhpcy5yb290LmNoaWxkcmVuW3RoaXMuaWRdXG4gICAgaWYodGhpcy5wYXJlbnQpeyBkZWxldGUgdGhpcy5yb290LmNoaWxkcmVuW3RoaXMucGFyZW50LmlkXVt0aGlzLmlkXSB9XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMubG9hZGVyVGltZXIpXG4gICAgbGV0IG9uRmluaXNoZWQgPSAoKSA9PiB7XG4gICAgICBjYWxsYmFjaygpXG4gICAgICBmb3IobGV0IGlkIGluIHRoaXMudmlld0hvb2tzKXtcbiAgICAgICAgdGhpcy5kZXN0cm95SG9vayh0aGlzLnZpZXdIb29rc1tpZF0pXG4gICAgICB9XG4gICAgfVxuXG4gICAgRE9NLm1hcmtQaHhDaGlsZERlc3Ryb3llZCh0aGlzLmVsKVxuXG4gICAgdGhpcy5sb2coXCJkZXN0cm95ZWRcIiwgKCkgPT4gW1widGhlIGNoaWxkIGhhcyBiZWVuIHJlbW92ZWQgZnJvbSB0aGUgcGFyZW50XCJdKVxuICAgIHRoaXMuY2hhbm5lbC5sZWF2ZSgpXG4gICAgICAucmVjZWl2ZShcIm9rXCIsIG9uRmluaXNoZWQpXG4gICAgICAucmVjZWl2ZShcImVycm9yXCIsIG9uRmluaXNoZWQpXG4gICAgICAucmVjZWl2ZShcInRpbWVvdXRcIiwgb25GaW5pc2hlZClcbiAgfVxuXG4gIHNldENvbnRhaW5lckNsYXNzZXMoLi4uY2xhc3Nlcyl7XG4gICAgdGhpcy5lbC5jbGFzc0xpc3QucmVtb3ZlKFxuICAgICAgUEhYX0NPTk5FQ1RFRF9DTEFTUyxcbiAgICAgIFBIWF9ESVNDT05ORUNURURfQ0xBU1MsXG4gICAgICBQSFhfRVJST1JfQ0xBU1NcbiAgICApXG4gICAgdGhpcy5lbC5jbGFzc0xpc3QuYWRkKC4uLmNsYXNzZXMpXG4gIH1cblxuICBzaG93TG9hZGVyKHRpbWVvdXQpe1xuICAgIGNsZWFyVGltZW91dCh0aGlzLmxvYWRlclRpbWVyKVxuICAgIGlmKHRpbWVvdXQpe1xuICAgICAgdGhpcy5sb2FkZXJUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zaG93TG9hZGVyKCksIHRpbWVvdXQpXG4gICAgfSBlbHNlIHtcbiAgICAgIGZvcihsZXQgaWQgaW4gdGhpcy52aWV3SG9va3MpeyB0aGlzLnZpZXdIb29rc1tpZF0uX19kaXNjb25uZWN0ZWQoKSB9XG4gICAgICB0aGlzLnNldENvbnRhaW5lckNsYXNzZXMoUEhYX0RJU0NPTk5FQ1RFRF9DTEFTUylcbiAgICB9XG4gIH1cblxuICBleGVjQWxsKGJpbmRpbmcpe1xuICAgIERPTS5hbGwodGhpcy5lbCwgYFske2JpbmRpbmd9XWAsIGVsID0+IHRoaXMubGl2ZVNvY2tldC5leGVjSlMoZWwsIGVsLmdldEF0dHJpYnV0ZShiaW5kaW5nKSkpXG4gIH1cblxuICBoaWRlTG9hZGVyKCl7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMubG9hZGVyVGltZXIpXG4gICAgdGhpcy5zZXRDb250YWluZXJDbGFzc2VzKFBIWF9DT05ORUNURURfQ0xBU1MpXG4gICAgdGhpcy5leGVjQWxsKHRoaXMuYmluZGluZyhcImNvbm5lY3RlZFwiKSlcbiAgfVxuXG4gIHRyaWdnZXJSZWNvbm5lY3RlZCgpe1xuICAgIGZvcihsZXQgaWQgaW4gdGhpcy52aWV3SG9va3MpeyB0aGlzLnZpZXdIb29rc1tpZF0uX19yZWNvbm5lY3RlZCgpIH1cbiAgfVxuXG4gIGxvZyhraW5kLCBtc2dDYWxsYmFjayl7XG4gICAgdGhpcy5saXZlU29ja2V0LmxvZyh0aGlzLCBraW5kLCBtc2dDYWxsYmFjaylcbiAgfVxuXG4gIHRyYW5zaXRpb24odGltZSwgb25TdGFydCwgb25Eb25lID0gZnVuY3Rpb24oKXt9KXtcbiAgICB0aGlzLmxpdmVTb2NrZXQudHJhbnNpdGlvbih0aW1lLCBvblN0YXJ0LCBvbkRvbmUpXG4gIH1cblxuICB3aXRoaW5UYXJnZXRzKHBoeFRhcmdldCwgY2FsbGJhY2spe1xuICAgIGlmKHBoeFRhcmdldCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IHx8IHBoeFRhcmdldCBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpe1xuICAgICAgcmV0dXJuIHRoaXMubGl2ZVNvY2tldC5vd25lcihwaHhUYXJnZXQsIHZpZXcgPT4gY2FsbGJhY2sodmlldywgcGh4VGFyZ2V0KSlcbiAgICB9XG5cbiAgICBpZihpc0NpZChwaHhUYXJnZXQpKXtcbiAgICAgIGxldCB0YXJnZXRzID0gRE9NLmZpbmRDb21wb25lbnROb2RlTGlzdCh0aGlzLmVsLCBwaHhUYXJnZXQpXG4gICAgICBpZih0YXJnZXRzLmxlbmd0aCA9PT0gMCl7XG4gICAgICAgIGxvZ0Vycm9yKGBubyBjb21wb25lbnQgZm91bmQgbWF0Y2hpbmcgcGh4LXRhcmdldCBvZiAke3BoeFRhcmdldH1gKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcywgcGFyc2VJbnQocGh4VGFyZ2V0KSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHRhcmdldHMgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocGh4VGFyZ2V0KSlcbiAgICAgIGlmKHRhcmdldHMubGVuZ3RoID09PSAwKXsgbG9nRXJyb3IoYG5vdGhpbmcgZm91bmQgbWF0Y2hpbmcgdGhlIHBoeC10YXJnZXQgc2VsZWN0b3IgXCIke3BoeFRhcmdldH1cImApIH1cbiAgICAgIHRhcmdldHMuZm9yRWFjaCh0YXJnZXQgPT4gdGhpcy5saXZlU29ja2V0Lm93bmVyKHRhcmdldCwgdmlldyA9PiBjYWxsYmFjayh2aWV3LCB0YXJnZXQpKSlcbiAgICB9XG4gIH1cblxuICBhcHBseURpZmYodHlwZSwgcmF3RGlmZiwgY2FsbGJhY2spe1xuICAgIHRoaXMubG9nKHR5cGUsICgpID0+IFtcIlwiLCBjbG9uZShyYXdEaWZmKV0pXG4gICAgbGV0IHtkaWZmLCByZXBseSwgZXZlbnRzLCB0aXRsZX0gPSBSZW5kZXJlZC5leHRyYWN0KHJhd0RpZmYpXG4gICAgY2FsbGJhY2soe2RpZmYsIHJlcGx5LCBldmVudHN9KVxuICAgIGlmKHRpdGxlKXsgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiBET00ucHV0VGl0bGUodGl0bGUpKSB9XG4gIH1cblxuICBvbkpvaW4ocmVzcCl7XG4gICAgbGV0IHtyZW5kZXJlZCwgY29udGFpbmVyfSA9IHJlc3BcbiAgICBpZihjb250YWluZXIpe1xuICAgICAgbGV0IFt0YWcsIGF0dHJzXSA9IGNvbnRhaW5lclxuICAgICAgdGhpcy5lbCA9IERPTS5yZXBsYWNlUm9vdENvbnRhaW5lcih0aGlzLmVsLCB0YWcsIGF0dHJzKVxuICAgIH1cbiAgICB0aGlzLmNoaWxkSm9pbnMgPSAwXG4gICAgdGhpcy5qb2luUGVuZGluZyA9IHRydWVcbiAgICB0aGlzLmZsYXNoID0gbnVsbFxuXG4gICAgQnJvd3Nlci5kcm9wTG9jYWwodGhpcy5saXZlU29ja2V0LmxvY2FsU3RvcmFnZSwgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLCBDT05TRUNVVElWRV9SRUxPQURTKVxuICAgIHRoaXMuYXBwbHlEaWZmKFwibW91bnRcIiwgcmVuZGVyZWQsICh7ZGlmZiwgZXZlbnRzfSkgPT4ge1xuICAgICAgdGhpcy5yZW5kZXJlZCA9IG5ldyBSZW5kZXJlZCh0aGlzLmlkLCBkaWZmKVxuICAgICAgbGV0IFtodG1sLCBzdHJlYW1zXSA9IHRoaXMucmVuZGVyQ29udGFpbmVyKG51bGwsIFwiam9pblwiKVxuICAgICAgdGhpcy5kcm9wUGVuZGluZ1JlZnMoKVxuICAgICAgbGV0IGZvcm1zID0gdGhpcy5mb3Jtc0ZvclJlY292ZXJ5KGh0bWwpXG4gICAgICB0aGlzLmpvaW5Db3VudCsrXG5cbiAgICAgIGlmKGZvcm1zLmxlbmd0aCA+IDApe1xuICAgICAgICBmb3Jtcy5mb3JFYWNoKChbZm9ybSwgbmV3Rm9ybSwgbmV3Q2lkXSwgaSkgPT4ge1xuICAgICAgICAgIHRoaXMucHVzaEZvcm1SZWNvdmVyeShmb3JtLCBuZXdDaWQsIHJlc3AgPT4ge1xuICAgICAgICAgICAgaWYoaSA9PT0gZm9ybXMubGVuZ3RoIC0gMSl7XG4gICAgICAgICAgICAgIHRoaXMub25Kb2luQ29tcGxldGUocmVzcCwgaHRtbCwgc3RyZWFtcywgZXZlbnRzKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9uSm9pbkNvbXBsZXRlKHJlc3AsIGh0bWwsIHN0cmVhbXMsIGV2ZW50cylcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZHJvcFBlbmRpbmdSZWZzKCl7XG4gICAgRE9NLmFsbChkb2N1bWVudCwgYFske1BIWF9SRUZfU1JDfT1cIiR7dGhpcy5pZH1cIl1bJHtQSFhfUkVGfV1gLCBlbCA9PiB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoUEhYX1JFRilcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShQSFhfUkVGX1NSQylcbiAgICB9KVxuICB9XG5cbiAgb25Kb2luQ29tcGxldGUoe2xpdmVfcGF0Y2h9LCBodG1sLCBzdHJlYW1zLCBldmVudHMpe1xuICAgIC8vIEluIG9yZGVyIHRvIHByb3ZpZGUgYSBiZXR0ZXIgZXhwZXJpZW5jZSwgd2Ugd2FudCB0byBqb2luXG4gICAgLy8gYWxsIExpdmVWaWV3cyBmaXJzdCBhbmQgb25seSB0aGVuIGFwcGx5IHRoZWlyIHBhdGNoZXMuXG4gICAgaWYodGhpcy5qb2luQ291bnQgPiAxIHx8ICh0aGlzLnBhcmVudCAmJiAhdGhpcy5wYXJlbnQuaXNKb2luUGVuZGluZygpKSl7XG4gICAgICByZXR1cm4gdGhpcy5hcHBseUpvaW5QYXRjaChsaXZlX3BhdGNoLCBodG1sLCBzdHJlYW1zLCBldmVudHMpXG4gICAgfVxuXG4gICAgLy8gT25lIGRvd25zaWRlIG9mIHRoaXMgYXBwcm9hY2ggaXMgdGhhdCB3ZSBuZWVkIHRvIGZpbmQgcGh4Q2hpbGRyZW5cbiAgICAvLyBpbiB0aGUgaHRtbCBmcmFnbWVudCwgaW5zdGVhZCBvZiBkaXJlY3RseSBvbiB0aGUgRE9NLiBUaGUgZnJhZ21lbnRcbiAgICAvLyBhbHNvIGRvZXMgbm90IGluY2x1ZGUgUEhYX1NUQVRJQywgc28gd2UgbmVlZCB0byBjb3B5IGl0IG92ZXIgZnJvbVxuICAgIC8vIHRoZSBET00uXG4gICAgbGV0IG5ld0NoaWxkcmVuID0gRE9NLmZpbmRQaHhDaGlsZHJlbkluRnJhZ21lbnQoaHRtbCwgdGhpcy5pZCkuZmlsdGVyKHRvRWwgPT4ge1xuICAgICAgbGV0IGZyb21FbCA9IHRvRWwuaWQgJiYgdGhpcy5lbC5xdWVyeVNlbGVjdG9yKGBbaWQ9XCIke3RvRWwuaWR9XCJdYClcbiAgICAgIGxldCBwaHhTdGF0aWMgPSBmcm9tRWwgJiYgZnJvbUVsLmdldEF0dHJpYnV0ZShQSFhfU1RBVElDKVxuICAgICAgaWYocGh4U3RhdGljKXsgdG9FbC5zZXRBdHRyaWJ1dGUoUEhYX1NUQVRJQywgcGh4U3RhdGljKSB9XG4gICAgICByZXR1cm4gdGhpcy5qb2luQ2hpbGQodG9FbClcbiAgICB9KVxuXG4gICAgaWYobmV3Q2hpbGRyZW4ubGVuZ3RoID09PSAwKXtcbiAgICAgIGlmKHRoaXMucGFyZW50KXtcbiAgICAgICAgdGhpcy5yb290LnBlbmRpbmdKb2luT3BzLnB1c2goW3RoaXMsICgpID0+IHRoaXMuYXBwbHlKb2luUGF0Y2gobGl2ZV9wYXRjaCwgaHRtbCwgc3RyZWFtcywgZXZlbnRzKV0pXG4gICAgICAgIHRoaXMucGFyZW50LmFja0pvaW4odGhpcylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub25BbGxDaGlsZEpvaW5zQ29tcGxldGUoKVxuICAgICAgICB0aGlzLmFwcGx5Sm9pblBhdGNoKGxpdmVfcGF0Y2gsIGh0bWwsIHN0cmVhbXMsIGV2ZW50cylcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yb290LnBlbmRpbmdKb2luT3BzLnB1c2goW3RoaXMsICgpID0+IHRoaXMuYXBwbHlKb2luUGF0Y2gobGl2ZV9wYXRjaCwgaHRtbCwgc3RyZWFtcywgZXZlbnRzKV0pXG4gICAgfVxuICB9XG5cbiAgYXR0YWNoVHJ1ZURvY0VsKCl7XG4gICAgdGhpcy5lbCA9IERPTS5ieUlkKHRoaXMuaWQpXG4gICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoUEhYX1JPT1RfSUQsIHRoaXMucm9vdC5pZClcbiAgfVxuXG4gIGV4ZWNOZXdNb3VudGVkKCl7XG4gICAgRE9NLmFsbCh0aGlzLmVsLCBgWyR7dGhpcy5iaW5kaW5nKFBIWF9IT09LKX1dLCBbZGF0YS1waHgtJHtQSFhfSE9PS31dYCwgaG9va0VsID0+IHtcbiAgICAgIHRoaXMubWF5YmVBZGROZXdIb29rKGhvb2tFbClcbiAgICB9KVxuICAgIERPTS5hbGwodGhpcy5lbCwgYFske3RoaXMuYmluZGluZyhQSFhfTU9VTlRFRCl9XWAsIGVsID0+IHRoaXMubWF5YmVNb3VudGVkKGVsKSlcbiAgfVxuXG4gIGFwcGx5Sm9pblBhdGNoKGxpdmVfcGF0Y2gsIGh0bWwsIHN0cmVhbXMsIGV2ZW50cyl7XG4gICAgdGhpcy5hdHRhY2hUcnVlRG9jRWwoKVxuICAgIGxldCBwYXRjaCA9IG5ldyBET01QYXRjaCh0aGlzLCB0aGlzLmVsLCB0aGlzLmlkLCBodG1sLCBzdHJlYW1zLCBudWxsKVxuICAgIHBhdGNoLm1hcmtQcnVuYWJsZUNvbnRlbnRGb3JSZW1vdmFsKClcbiAgICB0aGlzLnBlcmZvcm1QYXRjaChwYXRjaCwgZmFsc2UpXG4gICAgdGhpcy5qb2luTmV3Q2hpbGRyZW4oKVxuICAgIHRoaXMuZXhlY05ld01vdW50ZWQoKVxuXG4gICAgdGhpcy5qb2luUGVuZGluZyA9IGZhbHNlXG4gICAgdGhpcy5saXZlU29ja2V0LmRpc3BhdGNoRXZlbnRzKGV2ZW50cylcbiAgICB0aGlzLmFwcGx5UGVuZGluZ1VwZGF0ZXMoKVxuXG4gICAgaWYobGl2ZV9wYXRjaCl7XG4gICAgICBsZXQge2tpbmQsIHRvfSA9IGxpdmVfcGF0Y2hcbiAgICAgIHRoaXMubGl2ZVNvY2tldC5oaXN0b3J5UGF0Y2godG8sIGtpbmQpXG4gICAgfVxuICAgIHRoaXMuaGlkZUxvYWRlcigpXG4gICAgaWYodGhpcy5qb2luQ291bnQgPiAxKXsgdGhpcy50cmlnZ2VyUmVjb25uZWN0ZWQoKSB9XG4gICAgdGhpcy5zdG9wQ2FsbGJhY2soKVxuICB9XG5cbiAgdHJpZ2dlckJlZm9yZVVwZGF0ZUhvb2soZnJvbUVsLCB0b0VsKXtcbiAgICB0aGlzLmxpdmVTb2NrZXQudHJpZ2dlckRPTShcIm9uQmVmb3JlRWxVcGRhdGVkXCIsIFtmcm9tRWwsIHRvRWxdKVxuICAgIGxldCBob29rID0gdGhpcy5nZXRIb29rKGZyb21FbClcbiAgICBsZXQgaXNJZ25vcmVkID0gaG9vayAmJiBET00uaXNJZ25vcmVkKGZyb21FbCwgdGhpcy5iaW5kaW5nKFBIWF9VUERBVEUpKVxuICAgIGlmKGhvb2sgJiYgIWZyb21FbC5pc0VxdWFsTm9kZSh0b0VsKSAmJiAhKGlzSWdub3JlZCAmJiBpc0VxdWFsT2JqKGZyb21FbC5kYXRhc2V0LCB0b0VsLmRhdGFzZXQpKSl7XG4gICAgICBob29rLl9fYmVmb3JlVXBkYXRlKClcbiAgICAgIHJldHVybiBob29rXG4gICAgfVxuICB9XG5cbiAgbWF5YmVNb3VudGVkKGVsKXtcbiAgICBsZXQgcGh4TW91bnRlZCA9IGVsLmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoUEhYX01PVU5URUQpKVxuICAgIGxldCBoYXNCZWVuSW52b2tlZCA9IHBoeE1vdW50ZWQgJiYgRE9NLnByaXZhdGUoZWwsIFwibW91bnRlZFwiKVxuICAgIGlmKHBoeE1vdW50ZWQgJiYgIWhhc0JlZW5JbnZva2VkKXtcbiAgICAgIHRoaXMubGl2ZVNvY2tldC5leGVjSlMoZWwsIHBoeE1vdW50ZWQpXG4gICAgICBET00ucHV0UHJpdmF0ZShlbCwgXCJtb3VudGVkXCIsIHRydWUpXG4gICAgfVxuICB9XG5cbiAgbWF5YmVBZGROZXdIb29rKGVsLCBmb3JjZSl7XG4gICAgbGV0IG5ld0hvb2sgPSB0aGlzLmFkZEhvb2soZWwpXG4gICAgaWYobmV3SG9vayl7IG5ld0hvb2suX19tb3VudGVkKCkgfVxuICB9XG5cbiAgcGVyZm9ybVBhdGNoKHBhdGNoLCBwcnVuZUNpZHMpe1xuICAgIGxldCByZW1vdmVkRWxzID0gW11cbiAgICBsZXQgcGh4Q2hpbGRyZW5BZGRlZCA9IGZhbHNlXG4gICAgbGV0IHVwZGF0ZWRIb29rSWRzID0gbmV3IFNldCgpXG5cbiAgICBwYXRjaC5hZnRlcihcImFkZGVkXCIsIGVsID0+IHtcbiAgICAgIHRoaXMubGl2ZVNvY2tldC50cmlnZ2VyRE9NKFwib25Ob2RlQWRkZWRcIiwgW2VsXSlcbiAgICAgIHRoaXMubWF5YmVBZGROZXdIb29rKGVsKVxuICAgICAgaWYoZWwuZ2V0QXR0cmlidXRlKXsgdGhpcy5tYXliZU1vdW50ZWQoZWwpIH1cbiAgICB9KVxuXG4gICAgcGF0Y2guYWZ0ZXIoXCJwaHhDaGlsZEFkZGVkXCIsIGVsID0+IHtcbiAgICAgIGlmKERPTS5pc1BoeFN0aWNreShlbCkpe1xuICAgICAgICB0aGlzLmxpdmVTb2NrZXQuam9pblJvb3RWaWV3cygpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwaHhDaGlsZHJlbkFkZGVkID0gdHJ1ZVxuICAgICAgfVxuICAgIH0pXG5cbiAgICBwYXRjaC5iZWZvcmUoXCJ1cGRhdGVkXCIsIChmcm9tRWwsIHRvRWwpID0+IHtcbiAgICAgIGxldCBob29rID0gdGhpcy50cmlnZ2VyQmVmb3JlVXBkYXRlSG9vayhmcm9tRWwsIHRvRWwpXG4gICAgICBpZihob29rKXsgdXBkYXRlZEhvb2tJZHMuYWRkKGZyb21FbC5pZCkgfVxuICAgIH0pXG5cbiAgICBwYXRjaC5hZnRlcihcInVwZGF0ZWRcIiwgZWwgPT4ge1xuICAgICAgaWYodXBkYXRlZEhvb2tJZHMuaGFzKGVsLmlkKSl7IHRoaXMuZ2V0SG9vayhlbCkuX191cGRhdGVkKCkgfVxuICAgIH0pXG5cbiAgICBwYXRjaC5hZnRlcihcImRpc2NhcmRlZFwiLCAoZWwpID0+IHtcbiAgICAgIGlmKGVsLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSl7IHJlbW92ZWRFbHMucHVzaChlbCkgfVxuICAgIH0pXG5cbiAgICBwYXRjaC5hZnRlcihcInRyYW5zaXRpb25zRGlzY2FyZGVkXCIsIGVscyA9PiB0aGlzLmFmdGVyRWxlbWVudHNSZW1vdmVkKGVscywgcHJ1bmVDaWRzKSlcbiAgICBwYXRjaC5wZXJmb3JtKClcbiAgICB0aGlzLmFmdGVyRWxlbWVudHNSZW1vdmVkKHJlbW92ZWRFbHMsIHBydW5lQ2lkcylcblxuICAgIHJldHVybiBwaHhDaGlsZHJlbkFkZGVkXG4gIH1cblxuICBhZnRlckVsZW1lbnRzUmVtb3ZlZChlbGVtZW50cywgcHJ1bmVDaWRzKXtcbiAgICBsZXQgZGVzdHJveWVkQ0lEcyA9IFtdXG4gICAgZWxlbWVudHMuZm9yRWFjaChwYXJlbnQgPT4ge1xuICAgICAgbGV0IGNvbXBvbmVudHMgPSBET00uYWxsKHBhcmVudCwgYFske1BIWF9DT01QT05FTlR9XWApXG4gICAgICBsZXQgaG9va3MgPSBET00uYWxsKHBhcmVudCwgYFske3RoaXMuYmluZGluZyhQSFhfSE9PSyl9XWApXG4gICAgICBjb21wb25lbnRzLmNvbmNhdChwYXJlbnQpLmZvckVhY2goZWwgPT4ge1xuICAgICAgICBsZXQgY2lkID0gdGhpcy5jb21wb25lbnRJRChlbClcbiAgICAgICAgaWYoaXNDaWQoY2lkKSAmJiBkZXN0cm95ZWRDSURzLmluZGV4T2YoY2lkKSA9PT0gLTEpeyBkZXN0cm95ZWRDSURzLnB1c2goY2lkKSB9XG4gICAgICB9KVxuICAgICAgaG9va3MuY29uY2F0KHBhcmVudCkuZm9yRWFjaChob29rRWwgPT4ge1xuICAgICAgICBsZXQgaG9vayA9IHRoaXMuZ2V0SG9vayhob29rRWwpXG4gICAgICAgIGhvb2sgJiYgdGhpcy5kZXN0cm95SG9vayhob29rKVxuICAgICAgfSlcbiAgICB9KVxuICAgIC8vIFdlIHNob3VsZCBub3QgcHJ1bmVDaWRzIG9uIGpvaW5zLiBPdGhlcndpc2UsIGluIGNhc2Ugb2ZcbiAgICAvLyByZWpvaW5zLCB3ZSBtYXkgbm90aWZ5IGNpZHMgdGhhdCBubyBsb25nZXIgYmVsb25nIHRvIHRoZVxuICAgIC8vIGN1cnJlbnQgTGl2ZVZpZXcgdG8gYmUgcmVtb3ZlZC5cbiAgICBpZihwcnVuZUNpZHMpe1xuICAgICAgdGhpcy5tYXliZVB1c2hDb21wb25lbnRzRGVzdHJveWVkKGRlc3Ryb3llZENJRHMpXG4gICAgfVxuICB9XG5cbiAgam9pbk5ld0NoaWxkcmVuKCl7XG4gICAgRE9NLmZpbmRQaHhDaGlsZHJlbih0aGlzLmVsLCB0aGlzLmlkKS5mb3JFYWNoKGVsID0+IHRoaXMuam9pbkNoaWxkKGVsKSlcbiAgfVxuXG4gIGdldENoaWxkQnlJZChpZCl7IHJldHVybiB0aGlzLnJvb3QuY2hpbGRyZW5bdGhpcy5pZF1baWRdIH1cblxuICBnZXREZXNjZW5kZW50QnlFbChlbCl7XG4gICAgaWYoZWwuaWQgPT09IHRoaXMuaWQpe1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5bZWwuZ2V0QXR0cmlidXRlKFBIWF9QQVJFTlRfSUQpXVtlbC5pZF1cbiAgICB9XG4gIH1cblxuICBkZXN0cm95RGVzY2VuZGVudChpZCl7XG4gICAgZm9yKGxldCBwYXJlbnRJZCBpbiB0aGlzLnJvb3QuY2hpbGRyZW4pe1xuICAgICAgZm9yKGxldCBjaGlsZElkIGluIHRoaXMucm9vdC5jaGlsZHJlbltwYXJlbnRJZF0pe1xuICAgICAgICBpZihjaGlsZElkID09PSBpZCl7IHJldHVybiB0aGlzLnJvb3QuY2hpbGRyZW5bcGFyZW50SWRdW2NoaWxkSWRdLmRlc3Ryb3koKSB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgam9pbkNoaWxkKGVsKXtcbiAgICBsZXQgY2hpbGQgPSB0aGlzLmdldENoaWxkQnlJZChlbC5pZClcbiAgICBpZighY2hpbGQpe1xuICAgICAgbGV0IHZpZXcgPSBuZXcgVmlldyhlbCwgdGhpcy5saXZlU29ja2V0LCB0aGlzKVxuICAgICAgdGhpcy5yb290LmNoaWxkcmVuW3RoaXMuaWRdW3ZpZXcuaWRdID0gdmlld1xuICAgICAgdmlldy5qb2luKClcbiAgICAgIHRoaXMuY2hpbGRKb2lucysrXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIGlzSm9pblBlbmRpbmcoKXsgcmV0dXJuIHRoaXMuam9pblBlbmRpbmcgfVxuXG4gIGFja0pvaW4oX2NoaWxkKXtcbiAgICB0aGlzLmNoaWxkSm9pbnMtLVxuXG4gICAgaWYodGhpcy5jaGlsZEpvaW5zID09PSAwKXtcbiAgICAgIGlmKHRoaXMucGFyZW50KXtcbiAgICAgICAgdGhpcy5wYXJlbnQuYWNrSm9pbih0aGlzKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vbkFsbENoaWxkSm9pbnNDb21wbGV0ZSgpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgb25BbGxDaGlsZEpvaW5zQ29tcGxldGUoKXtcbiAgICB0aGlzLmpvaW5DYWxsYmFjaygoKSA9PiB7XG4gICAgICB0aGlzLnBlbmRpbmdKb2luT3BzLmZvckVhY2goKFt2aWV3LCBvcF0pID0+IHtcbiAgICAgICAgaWYoIXZpZXcuaXNEZXN0cm95ZWQoKSl7IG9wKCkgfVxuICAgICAgfSlcbiAgICAgIHRoaXMucGVuZGluZ0pvaW5PcHMgPSBbXVxuICAgIH0pXG4gIH1cblxuICB1cGRhdGUoZGlmZiwgZXZlbnRzKXtcbiAgICBpZih0aGlzLmlzSm9pblBlbmRpbmcoKSB8fCAodGhpcy5saXZlU29ja2V0Lmhhc1BlbmRpbmdMaW5rKCkgJiYgdGhpcy5yb290LmlzTWFpbigpKSl7XG4gICAgICByZXR1cm4gdGhpcy5wZW5kaW5nRGlmZnMucHVzaCh7ZGlmZiwgZXZlbnRzfSlcbiAgICB9XG5cbiAgICB0aGlzLnJlbmRlcmVkLm1lcmdlRGlmZihkaWZmKVxuICAgIGxldCBwaHhDaGlsZHJlbkFkZGVkID0gZmFsc2VcblxuICAgIC8vIFdoZW4gdGhlIGRpZmYgb25seSBjb250YWlucyBjb21wb25lbnQgZGlmZnMsIHRoZW4gd2FsayBjb21wb25lbnRzXG4gICAgLy8gYW5kIHBhdGNoIG9ubHkgdGhlIHBhcmVudCBjb21wb25lbnQgY29udGFpbmVycyBmb3VuZCBpbiB0aGUgZGlmZi5cbiAgICAvLyBPdGhlcndpc2UsIHBhdGNoIGVudGlyZSBMViBjb250YWluZXIuXG4gICAgaWYodGhpcy5yZW5kZXJlZC5pc0NvbXBvbmVudE9ubHlEaWZmKGRpZmYpKXtcbiAgICAgIHRoaXMubGl2ZVNvY2tldC50aW1lKFwiY29tcG9uZW50IHBhdGNoIGNvbXBsZXRlXCIsICgpID0+IHtcbiAgICAgICAgbGV0IHBhcmVudENpZHMgPSBET00uZmluZFBhcmVudENJRHModGhpcy5lbCwgdGhpcy5yZW5kZXJlZC5jb21wb25lbnRDSURzKGRpZmYpKVxuICAgICAgICBwYXJlbnRDaWRzLmZvckVhY2gocGFyZW50Q0lEID0+IHtcbiAgICAgICAgICBpZih0aGlzLmNvbXBvbmVudFBhdGNoKHRoaXMucmVuZGVyZWQuZ2V0Q29tcG9uZW50KGRpZmYsIHBhcmVudENJRCksIHBhcmVudENJRCkpeyBwaHhDaGlsZHJlbkFkZGVkID0gdHJ1ZSB9XG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0gZWxzZSBpZighaXNFbXB0eShkaWZmKSl7XG4gICAgICB0aGlzLmxpdmVTb2NrZXQudGltZShcImZ1bGwgcGF0Y2ggY29tcGxldGVcIiwgKCkgPT4ge1xuICAgICAgICBsZXQgW2h0bWwsIHN0cmVhbXNdID0gdGhpcy5yZW5kZXJDb250YWluZXIoZGlmZiwgXCJ1cGRhdGVcIilcbiAgICAgICAgbGV0IHBhdGNoID0gbmV3IERPTVBhdGNoKHRoaXMsIHRoaXMuZWwsIHRoaXMuaWQsIGh0bWwsIHN0cmVhbXMsIG51bGwpXG4gICAgICAgIHBoeENoaWxkcmVuQWRkZWQgPSB0aGlzLnBlcmZvcm1QYXRjaChwYXRjaCwgdHJ1ZSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgdGhpcy5saXZlU29ja2V0LmRpc3BhdGNoRXZlbnRzKGV2ZW50cylcbiAgICBpZihwaHhDaGlsZHJlbkFkZGVkKXsgdGhpcy5qb2luTmV3Q2hpbGRyZW4oKSB9XG4gIH1cblxuICByZW5kZXJDb250YWluZXIoZGlmZiwga2luZCl7XG4gICAgcmV0dXJuIHRoaXMubGl2ZVNvY2tldC50aW1lKGB0b1N0cmluZyBkaWZmICgke2tpbmR9KWAsICgpID0+IHtcbiAgICAgIGxldCB0YWcgPSB0aGlzLmVsLnRhZ05hbWVcbiAgICAgIC8vIERvbid0IHNraXAgYW55IGNvbXBvbmVudCBpbiB0aGUgZGlmZiBub3IgYW55IG1hcmtlZCBhcyBwcnVuZWRcbiAgICAgIC8vIChhcyB0aGV5IG1heSBoYXZlIGJlZW4gYWRkZWQgYmFjaylcbiAgICAgIGxldCBjaWRzID0gZGlmZiA/IHRoaXMucmVuZGVyZWQuY29tcG9uZW50Q0lEcyhkaWZmKS5jb25jYXQodGhpcy5wcnVuaW5nQ0lEcykgOiBudWxsXG4gICAgICBsZXQgW2h0bWwsIHN0cmVhbXNdID0gdGhpcy5yZW5kZXJlZC50b1N0cmluZyhjaWRzKVxuICAgICAgcmV0dXJuIFtgPCR7dGFnfT4ke2h0bWx9PC8ke3RhZ30+YCwgc3RyZWFtc11cbiAgICB9KVxuICB9XG5cbiAgY29tcG9uZW50UGF0Y2goZGlmZiwgY2lkKXtcbiAgICBpZihpc0VtcHR5KGRpZmYpKSByZXR1cm4gZmFsc2VcbiAgICBsZXQgW2h0bWwsIHN0cmVhbXNdID0gdGhpcy5yZW5kZXJlZC5jb21wb25lbnRUb1N0cmluZyhjaWQpXG4gICAgbGV0IHBhdGNoID0gbmV3IERPTVBhdGNoKHRoaXMsIHRoaXMuZWwsIHRoaXMuaWQsIGh0bWwsIHN0cmVhbXMsIGNpZClcbiAgICBsZXQgY2hpbGRyZW5BZGRlZCA9IHRoaXMucGVyZm9ybVBhdGNoKHBhdGNoLCB0cnVlKVxuICAgIHJldHVybiBjaGlsZHJlbkFkZGVkXG4gIH1cblxuICBnZXRIb29rKGVsKXsgcmV0dXJuIHRoaXMudmlld0hvb2tzW1ZpZXdIb29rLmVsZW1lbnRJRChlbCldIH1cblxuICBhZGRIb29rKGVsKXtcbiAgICBpZihWaWV3SG9vay5lbGVtZW50SUQoZWwpIHx8ICFlbC5nZXRBdHRyaWJ1dGUpeyByZXR1cm4gfVxuICAgIGxldCBob29rTmFtZSA9IGVsLmdldEF0dHJpYnV0ZShgZGF0YS1waHgtJHtQSFhfSE9PS31gKSB8fCBlbC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFBIWF9IT09LKSlcbiAgICBpZihob29rTmFtZSAmJiAhdGhpcy5vd25zRWxlbWVudChlbCkpeyByZXR1cm4gfVxuICAgIGxldCBjYWxsYmFja3MgPSB0aGlzLmxpdmVTb2NrZXQuZ2V0SG9va0NhbGxiYWNrcyhob29rTmFtZSlcblxuICAgIGlmKGNhbGxiYWNrcyl7XG4gICAgICBpZighZWwuaWQpeyBsb2dFcnJvcihgbm8gRE9NIElEIGZvciBob29rIFwiJHtob29rTmFtZX1cIi4gSG9va3MgcmVxdWlyZSBhIHVuaXF1ZSBJRCBvbiBlYWNoIGVsZW1lbnQuYCwgZWwpIH1cbiAgICAgIGxldCBob29rID0gbmV3IFZpZXdIb29rKHRoaXMsIGVsLCBjYWxsYmFja3MpXG4gICAgICB0aGlzLnZpZXdIb29rc1tWaWV3SG9vay5lbGVtZW50SUQoaG9vay5lbCldID0gaG9va1xuICAgICAgcmV0dXJuIGhvb2tcbiAgICB9IGVsc2UgaWYoaG9va05hbWUgIT09IG51bGwpe1xuICAgICAgbG9nRXJyb3IoYHVua25vd24gaG9vayBmb3VuZCBmb3IgXCIke2hvb2tOYW1lfVwiYCwgZWwpXG4gICAgfVxuICB9XG5cbiAgZGVzdHJveUhvb2soaG9vayl7XG4gICAgaG9vay5fX2Rlc3Ryb3llZCgpXG4gICAgaG9vay5fX2NsZWFudXBfXygpXG4gICAgZGVsZXRlIHRoaXMudmlld0hvb2tzW1ZpZXdIb29rLmVsZW1lbnRJRChob29rLmVsKV1cbiAgfVxuXG4gIGFwcGx5UGVuZGluZ1VwZGF0ZXMoKXtcbiAgICB0aGlzLnBlbmRpbmdEaWZmcy5mb3JFYWNoKCh7ZGlmZiwgZXZlbnRzfSkgPT4gdGhpcy51cGRhdGUoZGlmZiwgZXZlbnRzKSlcbiAgICB0aGlzLnBlbmRpbmdEaWZmcyA9IFtdXG4gICAgdGhpcy5lYWNoQ2hpbGQoY2hpbGQgPT4gY2hpbGQuYXBwbHlQZW5kaW5nVXBkYXRlcygpKVxuICB9XG5cbiAgZWFjaENoaWxkKGNhbGxiYWNrKXtcbiAgICBsZXQgY2hpbGRyZW4gPSB0aGlzLnJvb3QuY2hpbGRyZW5bdGhpcy5pZF0gfHwge31cbiAgICBmb3IobGV0IGlkIGluIGNoaWxkcmVuKXsgY2FsbGJhY2sodGhpcy5nZXRDaGlsZEJ5SWQoaWQpKSB9XG4gIH1cblxuICBvbkNoYW5uZWwoZXZlbnQsIGNiKXtcbiAgICB0aGlzLmxpdmVTb2NrZXQub25DaGFubmVsKHRoaXMuY2hhbm5lbCwgZXZlbnQsIHJlc3AgPT4ge1xuICAgICAgaWYodGhpcy5pc0pvaW5QZW5kaW5nKCkpe1xuICAgICAgICB0aGlzLnJvb3QucGVuZGluZ0pvaW5PcHMucHVzaChbdGhpcywgKCkgPT4gY2IocmVzcCldKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5saXZlU29ja2V0LnJlcXVlc3RET01VcGRhdGUoKCkgPT4gY2IocmVzcCkpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGJpbmRDaGFubmVsKCl7XG4gICAgLy8gVGhlIGRpZmYgZXZlbnQgc2hvdWxkIGJlIGhhbmRsZWQgYnkgdGhlIHJlZ3VsYXIgdXBkYXRlIG9wZXJhdGlvbnMuXG4gICAgLy8gQWxsIG90aGVyIG9wZXJhdGlvbnMgYXJlIHF1ZXVlZCB0byBiZSBhcHBsaWVkIG9ubHkgYWZ0ZXIgam9pbi5cbiAgICB0aGlzLmxpdmVTb2NrZXQub25DaGFubmVsKHRoaXMuY2hhbm5lbCwgXCJkaWZmXCIsIChyYXdEaWZmKSA9PiB7XG4gICAgICB0aGlzLmxpdmVTb2NrZXQucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuYXBwbHlEaWZmKFwidXBkYXRlXCIsIHJhd0RpZmYsICh7ZGlmZiwgZXZlbnRzfSkgPT4gdGhpcy51cGRhdGUoZGlmZiwgZXZlbnRzKSlcbiAgICAgIH0pXG4gICAgfSlcbiAgICB0aGlzLm9uQ2hhbm5lbChcInJlZGlyZWN0XCIsICh7dG8sIGZsYXNofSkgPT4gdGhpcy5vblJlZGlyZWN0KHt0bywgZmxhc2h9KSlcbiAgICB0aGlzLm9uQ2hhbm5lbChcImxpdmVfcGF0Y2hcIiwgKHJlZGlyKSA9PiB0aGlzLm9uTGl2ZVBhdGNoKHJlZGlyKSlcbiAgICB0aGlzLm9uQ2hhbm5lbChcImxpdmVfcmVkaXJlY3RcIiwgKHJlZGlyKSA9PiB0aGlzLm9uTGl2ZVJlZGlyZWN0KHJlZGlyKSlcbiAgICB0aGlzLmNoYW5uZWwub25FcnJvcihyZWFzb24gPT4gdGhpcy5vbkVycm9yKHJlYXNvbikpXG4gICAgdGhpcy5jaGFubmVsLm9uQ2xvc2UocmVhc29uID0+IHRoaXMub25DbG9zZShyZWFzb24pKVxuICB9XG5cbiAgZGVzdHJveUFsbENoaWxkcmVuKCl7IHRoaXMuZWFjaENoaWxkKGNoaWxkID0+IGNoaWxkLmRlc3Ryb3koKSkgfVxuXG4gIG9uTGl2ZVJlZGlyZWN0KHJlZGlyKXtcbiAgICBsZXQge3RvLCBraW5kLCBmbGFzaH0gPSByZWRpclxuICAgIGxldCB1cmwgPSB0aGlzLmV4cGFuZFVSTCh0bylcbiAgICB0aGlzLmxpdmVTb2NrZXQuaGlzdG9yeVJlZGlyZWN0KHVybCwga2luZCwgZmxhc2gpXG4gIH1cblxuICBvbkxpdmVQYXRjaChyZWRpcil7XG4gICAgbGV0IHt0bywga2luZH0gPSByZWRpclxuICAgIHRoaXMuaHJlZiA9IHRoaXMuZXhwYW5kVVJMKHRvKVxuICAgIHRoaXMubGl2ZVNvY2tldC5oaXN0b3J5UGF0Y2godG8sIGtpbmQpXG4gIH1cblxuICBleHBhbmRVUkwodG8pe1xuICAgIHJldHVybiB0by5zdGFydHNXaXRoKFwiL1wiKSA/IGAke3dpbmRvdy5sb2NhdGlvbi5wcm90b2NvbH0vLyR7d2luZG93LmxvY2F0aW9uLmhvc3R9JHt0b31gIDogdG9cbiAgfVxuXG4gIG9uUmVkaXJlY3Qoe3RvLCBmbGFzaH0peyB0aGlzLmxpdmVTb2NrZXQucmVkaXJlY3QodG8sIGZsYXNoKSB9XG5cbiAgaXNEZXN0cm95ZWQoKXsgcmV0dXJuIHRoaXMuZGVzdHJveWVkIH1cblxuICBqb2luRGVhZCgpeyB0aGlzLmlzRGVhZCA9IHRydWUgfVxuXG4gIGpvaW4oY2FsbGJhY2spe1xuICAgIHRoaXMuc2hvd0xvYWRlcih0aGlzLmxpdmVTb2NrZXQubG9hZGVyVGltZW91dClcbiAgICB0aGlzLmJpbmRDaGFubmVsKClcbiAgICBpZih0aGlzLmlzTWFpbigpKXtcbiAgICAgIHRoaXMuc3RvcENhbGxiYWNrID0gdGhpcy5saXZlU29ja2V0LndpdGhQYWdlTG9hZGluZyh7dG86IHRoaXMuaHJlZiwga2luZDogXCJpbml0aWFsXCJ9KVxuICAgIH1cbiAgICB0aGlzLmpvaW5DYWxsYmFjayA9IChvbkRvbmUpID0+IHtcbiAgICAgIG9uRG9uZSA9IG9uRG9uZSB8fCBmdW5jdGlvbigpe31cbiAgICAgIGNhbGxiYWNrID8gY2FsbGJhY2sodGhpcy5qb2luQ291bnQsIG9uRG9uZSkgOiBvbkRvbmUoKVxuICAgIH1cbiAgICB0aGlzLmxpdmVTb2NrZXQud3JhcFB1c2godGhpcywge3RpbWVvdXQ6IGZhbHNlfSwgKCkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuY2hhbm5lbC5qb2luKClcbiAgICAgICAgLnJlY2VpdmUoXCJva1wiLCBkYXRhID0+IHtcbiAgICAgICAgICBpZighdGhpcy5pc0Rlc3Ryb3llZCgpKXtcbiAgICAgICAgICAgIHRoaXMubGl2ZVNvY2tldC5yZXF1ZXN0RE9NVXBkYXRlKCgpID0+IHRoaXMub25Kb2luKGRhdGEpKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLnJlY2VpdmUoXCJlcnJvclwiLCByZXNwID0+ICF0aGlzLmlzRGVzdHJveWVkKCkgJiYgdGhpcy5vbkpvaW5FcnJvcihyZXNwKSlcbiAgICAgICAgLnJlY2VpdmUoXCJ0aW1lb3V0XCIsICgpID0+ICF0aGlzLmlzRGVzdHJveWVkKCkgJiYgdGhpcy5vbkpvaW5FcnJvcih7cmVhc29uOiBcInRpbWVvdXRcIn0pKVxuICAgIH0pXG4gIH1cblxuICBvbkpvaW5FcnJvcihyZXNwKXtcbiAgICBpZihyZXNwLnJlYXNvbiA9PT0gXCJyZWxvYWRcIil7XG4gICAgICB0aGlzLmxvZyhcImVycm9yXCIsICgpID0+IFtgZmFpbGVkIG1vdW50IHdpdGggJHtyZXNwLnN0YXR1c30uIEZhbGxpbmcgYmFjayB0byBwYWdlIHJlcXVlc3RgLCByZXNwXSlcbiAgICAgIHJldHVybiB0aGlzLm9uUmVkaXJlY3Qoe3RvOiB0aGlzLmhyZWZ9KVxuICAgIH0gZWxzZSBpZihyZXNwLnJlYXNvbiA9PT0gXCJ1bmF1dGhvcml6ZWRcIiB8fCByZXNwLnJlYXNvbiA9PT0gXCJzdGFsZVwiKXtcbiAgICAgIHRoaXMubG9nKFwiZXJyb3JcIiwgKCkgPT4gW1widW5hdXRob3JpemVkIGxpdmVfcmVkaXJlY3QuIEZhbGxpbmcgYmFjayB0byBwYWdlIHJlcXVlc3RcIiwgcmVzcF0pXG4gICAgICByZXR1cm4gdGhpcy5vblJlZGlyZWN0KHt0bzogdGhpcy5ocmVmfSlcbiAgICB9XG4gICAgaWYocmVzcC5yZWRpcmVjdCB8fCByZXNwLmxpdmVfcmVkaXJlY3Qpe1xuICAgICAgdGhpcy5qb2luUGVuZGluZyA9IGZhbHNlXG4gICAgICB0aGlzLmNoYW5uZWwubGVhdmUoKVxuICAgIH1cbiAgICBpZihyZXNwLnJlZGlyZWN0KXsgcmV0dXJuIHRoaXMub25SZWRpcmVjdChyZXNwLnJlZGlyZWN0KSB9XG4gICAgaWYocmVzcC5saXZlX3JlZGlyZWN0KXsgcmV0dXJuIHRoaXMub25MaXZlUmVkaXJlY3QocmVzcC5saXZlX3JlZGlyZWN0KSB9XG4gICAgdGhpcy5sb2coXCJlcnJvclwiLCAoKSA9PiBbXCJ1bmFibGUgdG8gam9pblwiLCByZXNwXSlcbiAgICBpZih0aGlzLmxpdmVTb2NrZXQuaXNDb25uZWN0ZWQoKSl7IHRoaXMubGl2ZVNvY2tldC5yZWxvYWRXaXRoSml0dGVyKHRoaXMpIH1cbiAgfVxuXG4gIG9uQ2xvc2UocmVhc29uKXtcbiAgICBpZih0aGlzLmlzRGVzdHJveWVkKCkpeyByZXR1cm4gfVxuICAgIGlmKHRoaXMubGl2ZVNvY2tldC5oYXNQZW5kaW5nTGluaygpICYmIHJlYXNvbiAhPT0gXCJsZWF2ZVwiKXtcbiAgICAgIHJldHVybiB0aGlzLmxpdmVTb2NrZXQucmVsb2FkV2l0aEppdHRlcih0aGlzKVxuICAgIH1cbiAgICB0aGlzLmRlc3Ryb3lBbGxDaGlsZHJlbigpXG4gICAgdGhpcy5saXZlU29ja2V0LmRyb3BBY3RpdmVFbGVtZW50KHRoaXMpXG4gICAgLy8gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBjYW4gYmUgbnVsbCBpbiBJbnRlcm5ldCBFeHBsb3JlciAxMVxuICAgIGlmKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpeyBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKSB9XG4gICAgaWYodGhpcy5saXZlU29ja2V0LmlzVW5sb2FkZWQoKSl7XG4gICAgICB0aGlzLnNob3dMb2FkZXIoQkVGT1JFX1VOTE9BRF9MT0FERVJfVElNRU9VVClcbiAgICB9XG4gIH1cblxuICBvbkVycm9yKHJlYXNvbil7XG4gICAgdGhpcy5vbkNsb3NlKHJlYXNvbilcbiAgICBpZih0aGlzLmxpdmVTb2NrZXQuaXNDb25uZWN0ZWQoKSl7IHRoaXMubG9nKFwiZXJyb3JcIiwgKCkgPT4gW1widmlldyBjcmFzaGVkXCIsIHJlYXNvbl0pIH1cbiAgICBpZighdGhpcy5saXZlU29ja2V0LmlzVW5sb2FkZWQoKSl7IHRoaXMuZGlzcGxheUVycm9yKCkgfVxuICB9XG5cbiAgZGlzcGxheUVycm9yKCl7XG4gICAgaWYodGhpcy5pc01haW4oKSl7IERPTS5kaXNwYXRjaEV2ZW50KHdpbmRvdywgXCJwaHg6cGFnZS1sb2FkaW5nLXN0YXJ0XCIsIHtkZXRhaWw6IHt0bzogdGhpcy5ocmVmLCBraW5kOiBcImVycm9yXCJ9fSkgfVxuICAgIHRoaXMuc2hvd0xvYWRlcigpXG4gICAgdGhpcy5zZXRDb250YWluZXJDbGFzc2VzKFBIWF9ESVNDT05ORUNURURfQ0xBU1MsIFBIWF9FUlJPUl9DTEFTUylcbiAgICB0aGlzLmV4ZWNBbGwodGhpcy5iaW5kaW5nKFwiZGlzY29ubmVjdGVkXCIpKVxuICB9XG5cbiAgcHVzaFdpdGhSZXBseShyZWZHZW5lcmF0b3IsIGV2ZW50LCBwYXlsb2FkLCBvblJlcGx5ID0gZnVuY3Rpb24gKCl7IH0pe1xuICAgIGlmKCF0aGlzLmlzQ29ubmVjdGVkKCkpeyByZXR1cm4gfVxuXG4gICAgbGV0IFtyZWYsIFtlbF0sIG9wdHNdID0gcmVmR2VuZXJhdG9yID8gcmVmR2VuZXJhdG9yKCkgOiBbbnVsbCwgW10sIHt9XVxuICAgIGxldCBvbkxvYWRpbmdEb25lID0gZnVuY3Rpb24oKXsgfVxuICAgIGlmKG9wdHMucGFnZV9sb2FkaW5nIHx8IChlbCAmJiAoZWwuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhQSFhfUEFHRV9MT0FESU5HKSkgIT09IG51bGwpKSl7XG4gICAgICBvbkxvYWRpbmdEb25lID0gdGhpcy5saXZlU29ja2V0LndpdGhQYWdlTG9hZGluZyh7a2luZDogXCJlbGVtZW50XCIsIHRhcmdldDogZWx9KVxuICAgIH1cblxuICAgIGlmKHR5cGVvZiAocGF5bG9hZC5jaWQpICE9PSBcIm51bWJlclwiKXsgZGVsZXRlIHBheWxvYWQuY2lkIH1cbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5saXZlU29ja2V0LndyYXBQdXNoKHRoaXMsIHt0aW1lb3V0OiB0cnVlfSwgKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFubmVsLnB1c2goZXZlbnQsIHBheWxvYWQsIFBVU0hfVElNRU9VVCkucmVjZWl2ZShcIm9rXCIsIHJlc3AgPT4ge1xuICAgICAgICAgIGxldCBmaW5pc2ggPSAoaG9va1JlcGx5KSA9PiB7XG4gICAgICAgICAgICBpZihyZXNwLnJlZGlyZWN0KXsgdGhpcy5vblJlZGlyZWN0KHJlc3AucmVkaXJlY3QpIH1cbiAgICAgICAgICAgIGlmKHJlc3AubGl2ZV9wYXRjaCl7IHRoaXMub25MaXZlUGF0Y2gocmVzcC5saXZlX3BhdGNoKSB9XG4gICAgICAgICAgICBpZihyZXNwLmxpdmVfcmVkaXJlY3QpeyB0aGlzLm9uTGl2ZVJlZGlyZWN0KHJlc3AubGl2ZV9yZWRpcmVjdCkgfVxuICAgICAgICAgICAgaWYocmVmICE9PSBudWxsKXsgdGhpcy51bmRvUmVmcyhyZWYpIH1cbiAgICAgICAgICAgIG9uTG9hZGluZ0RvbmUoKVxuICAgICAgICAgICAgb25SZXBseShyZXNwLCBob29rUmVwbHkpXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKHJlc3AuZGlmZil7XG4gICAgICAgICAgICB0aGlzLmxpdmVTb2NrZXQucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuYXBwbHlEaWZmKFwidXBkYXRlXCIsIHJlc3AuZGlmZiwgKHtkaWZmLCByZXBseSwgZXZlbnRzfSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlKGRpZmYsIGV2ZW50cylcbiAgICAgICAgICAgICAgICBmaW5pc2gocmVwbHkpXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmaW5pc2gobnVsbClcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIClcbiAgfVxuXG4gIHVuZG9SZWZzKHJlZil7XG4gICAgaWYoIXRoaXMuaXNDb25uZWN0ZWQoKSl7IHJldHVybiB9IC8vIGV4aXQgaWYgZXh0ZXJuYWwgZm9ybSB0cmlnZ2VyZWRcblxuICAgIERPTS5hbGwoZG9jdW1lbnQsIGBbJHtQSFhfUkVGX1NSQ309XCIke3RoaXMuaWR9XCJdWyR7UEhYX1JFRn09XCIke3JlZn1cIl1gLCBlbCA9PiB7XG4gICAgICBsZXQgZGlzYWJsZWRWYWwgPSBlbC5nZXRBdHRyaWJ1dGUoUEhYX0RJU0FCTEVEKVxuICAgICAgLy8gcmVtb3ZlIHJlZnNcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShQSFhfUkVGKVxuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFBIWF9SRUZfU1JDKVxuICAgICAgLy8gcmVzdG9yZSBpbnB1dHNcbiAgICAgIGlmKGVsLmdldEF0dHJpYnV0ZShQSFhfUkVBRE9OTFkpICE9PSBudWxsKXtcbiAgICAgICAgZWwucmVhZE9ubHkgPSBmYWxzZVxuICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoUEhYX1JFQURPTkxZKVxuICAgICAgfVxuICAgICAgaWYoZGlzYWJsZWRWYWwgIT09IG51bGwpe1xuICAgICAgICBlbC5kaXNhYmxlZCA9IGRpc2FibGVkVmFsID09PSBcInRydWVcIiA/IHRydWUgOiBmYWxzZVxuICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoUEhYX0RJU0FCTEVEKVxuICAgICAgfVxuICAgICAgLy8gcmVtb3ZlIGNsYXNzZXNcbiAgICAgIFBIWF9FVkVOVF9DTEFTU0VTLmZvckVhY2goY2xhc3NOYW1lID0+IERPTS5yZW1vdmVDbGFzcyhlbCwgY2xhc3NOYW1lKSlcbiAgICAgIC8vIHJlc3RvcmUgZGlzYWJsZXNcbiAgICAgIGxldCBkaXNhYmxlUmVzdG9yZSA9IGVsLmdldEF0dHJpYnV0ZShQSFhfRElTQUJMRV9XSVRIX1JFU1RPUkUpXG4gICAgICBpZihkaXNhYmxlUmVzdG9yZSAhPT0gbnVsbCl7XG4gICAgICAgIGVsLmlubmVyVGV4dCA9IGRpc2FibGVSZXN0b3JlXG4gICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShQSFhfRElTQUJMRV9XSVRIX1JFU1RPUkUpXG4gICAgICB9XG4gICAgICBsZXQgdG9FbCA9IERPTS5wcml2YXRlKGVsLCBQSFhfUkVGKVxuICAgICAgaWYodG9FbCl7XG4gICAgICAgIGxldCBob29rID0gdGhpcy50cmlnZ2VyQmVmb3JlVXBkYXRlSG9vayhlbCwgdG9FbClcbiAgICAgICAgRE9NUGF0Y2gucGF0Y2hFbChlbCwgdG9FbCwgdGhpcy5saXZlU29ja2V0LmdldEFjdGl2ZUVsZW1lbnQoKSlcbiAgICAgICAgaWYoaG9vayl7IGhvb2suX191cGRhdGVkKCkgfVxuICAgICAgICBET00uZGVsZXRlUHJpdmF0ZShlbCwgUEhYX1JFRilcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcHV0UmVmKGVsZW1lbnRzLCBldmVudCwgb3B0cyA9IHt9KXtcbiAgICBsZXQgbmV3UmVmID0gdGhpcy5yZWYrK1xuICAgIGxldCBkaXNhYmxlV2l0aCA9IHRoaXMuYmluZGluZyhQSFhfRElTQUJMRV9XSVRIKVxuICAgIGlmKG9wdHMubG9hZGluZyl7IGVsZW1lbnRzID0gZWxlbWVudHMuY29uY2F0KERPTS5hbGwoZG9jdW1lbnQsIG9wdHMubG9hZGluZykpfVxuXG4gICAgZWxlbWVudHMuZm9yRWFjaChlbCA9PiB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKGBwaHgtJHtldmVudH0tbG9hZGluZ2ApXG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoUEhYX1JFRiwgbmV3UmVmKVxuICAgICAgZWwuc2V0QXR0cmlidXRlKFBIWF9SRUZfU1JDLCB0aGlzLmVsLmlkKVxuICAgICAgbGV0IGRpc2FibGVUZXh0ID0gZWwuZ2V0QXR0cmlidXRlKGRpc2FibGVXaXRoKVxuICAgICAgaWYoZGlzYWJsZVRleHQgIT09IG51bGwpe1xuICAgICAgICBpZighZWwuZ2V0QXR0cmlidXRlKFBIWF9ESVNBQkxFX1dJVEhfUkVTVE9SRSkpe1xuICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShQSFhfRElTQUJMRV9XSVRIX1JFU1RPUkUsIGVsLmlubmVyVGV4dClcbiAgICAgICAgfVxuICAgICAgICBpZihkaXNhYmxlVGV4dCAhPT0gXCJcIil7IGVsLmlubmVyVGV4dCA9IGRpc2FibGVUZXh0IH1cbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJcIilcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBbbmV3UmVmLCBlbGVtZW50cywgb3B0c11cbiAgfVxuXG4gIGNvbXBvbmVudElEKGVsKXtcbiAgICBsZXQgY2lkID0gZWwuZ2V0QXR0cmlidXRlICYmIGVsLmdldEF0dHJpYnV0ZShQSFhfQ09NUE9ORU5UKVxuICAgIHJldHVybiBjaWQgPyBwYXJzZUludChjaWQpIDogbnVsbFxuICB9XG5cbiAgdGFyZ2V0Q29tcG9uZW50SUQodGFyZ2V0LCB0YXJnZXRDdHgsIG9wdHMgPSB7fSl7XG4gICAgaWYoaXNDaWQodGFyZ2V0Q3R4KSl7IHJldHVybiB0YXJnZXRDdHggfVxuXG4gICAgbGV0IGNpZE9yU2VsZWN0b3IgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhcInRhcmdldFwiKSlcbiAgICBpZihpc0NpZChjaWRPclNlbGVjdG9yKSl7XG4gICAgICByZXR1cm4gcGFyc2VJbnQoY2lkT3JTZWxlY3RvcilcbiAgICB9IGVsc2UgaWYodGFyZ2V0Q3R4ICYmIChjaWRPclNlbGVjdG9yICE9PSBudWxsIHx8IG9wdHMudGFyZ2V0KSl7XG4gICAgICByZXR1cm4gdGhpcy5jbG9zZXN0Q29tcG9uZW50SUQodGFyZ2V0Q3R4KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgfVxuXG4gIGNsb3Nlc3RDb21wb25lbnRJRCh0YXJnZXRDdHgpe1xuICAgIGlmKGlzQ2lkKHRhcmdldEN0eCkpe1xuICAgICAgcmV0dXJuIHRhcmdldEN0eFxuICAgIH0gZWxzZSBpZih0YXJnZXRDdHgpe1xuICAgICAgcmV0dXJuIG1heWJlKHRhcmdldEN0eC5jbG9zZXN0KGBbJHtQSFhfQ09NUE9ORU5UfV1gKSwgZWwgPT4gdGhpcy5vd25zRWxlbWVudChlbCkgJiYgdGhpcy5jb21wb25lbnRJRChlbCkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9XG5cbiAgcHVzaEhvb2tFdmVudCh0YXJnZXRDdHgsIGV2ZW50LCBwYXlsb2FkLCBvblJlcGx5KXtcbiAgICBpZighdGhpcy5pc0Nvbm5lY3RlZCgpKXtcbiAgICAgIHRoaXMubG9nKFwiaG9va1wiLCAoKSA9PiBbXCJ1bmFibGUgdG8gcHVzaCBob29rIGV2ZW50LiBMaXZlVmlldyBub3QgY29ubmVjdGVkXCIsIGV2ZW50LCBwYXlsb2FkXSlcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBsZXQgW3JlZiwgZWxzLCBvcHRzXSA9IHRoaXMucHV0UmVmKFtdLCBcImhvb2tcIilcbiAgICB0aGlzLnB1c2hXaXRoUmVwbHkoKCkgPT4gW3JlZiwgZWxzLCBvcHRzXSwgXCJldmVudFwiLCB7XG4gICAgICB0eXBlOiBcImhvb2tcIixcbiAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgIHZhbHVlOiBwYXlsb2FkLFxuICAgICAgY2lkOiB0aGlzLmNsb3Nlc3RDb21wb25lbnRJRCh0YXJnZXRDdHgpXG4gICAgfSwgKHJlc3AsIHJlcGx5KSA9PiBvblJlcGx5KHJlcGx5LCByZWYpKVxuXG4gICAgcmV0dXJuIHJlZlxuICB9XG5cbiAgZXh0cmFjdE1ldGEoZWwsIG1ldGEsIHZhbHVlKXtcbiAgICBsZXQgcHJlZml4ID0gdGhpcy5iaW5kaW5nKFwidmFsdWUtXCIpXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGVsLmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspe1xuICAgICAgaWYoIW1ldGEpeyBtZXRhID0ge30gfVxuICAgICAgbGV0IG5hbWUgPSBlbC5hdHRyaWJ1dGVzW2ldLm5hbWVcbiAgICAgIGlmKG5hbWUuc3RhcnRzV2l0aChwcmVmaXgpKXsgbWV0YVtuYW1lLnJlcGxhY2UocHJlZml4LCBcIlwiKV0gPSBlbC5nZXRBdHRyaWJ1dGUobmFtZSkgfVxuICAgIH1cbiAgICBpZihlbC52YWx1ZSAhPT0gdW5kZWZpbmVkKXtcbiAgICAgIGlmKCFtZXRhKXsgbWV0YSA9IHt9IH1cbiAgICAgIG1ldGEudmFsdWUgPSBlbC52YWx1ZVxuXG4gICAgICBpZihlbC50YWdOYW1lID09PSBcIklOUFVUXCIgJiYgQ0hFQ0tBQkxFX0lOUFVUUy5pbmRleE9mKGVsLnR5cGUpID49IDAgJiYgIWVsLmNoZWNrZWQpe1xuICAgICAgICBkZWxldGUgbWV0YS52YWx1ZVxuICAgICAgfVxuICAgIH1cbiAgICBpZih2YWx1ZSl7XG4gICAgICBpZighbWV0YSl7IG1ldGEgPSB7fSB9XG4gICAgICBmb3IobGV0IGtleSBpbiB2YWx1ZSl7IG1ldGFba2V5XSA9IHZhbHVlW2tleV0gfVxuICAgIH1cbiAgICByZXR1cm4gbWV0YVxuICB9XG5cbiAgcHVzaEV2ZW50KHR5cGUsIGVsLCB0YXJnZXRDdHgsIHBoeEV2ZW50LCBtZXRhLCBvcHRzID0ge30pe1xuICAgIHRoaXMucHVzaFdpdGhSZXBseSgoKSA9PiB0aGlzLnB1dFJlZihbZWxdLCB0eXBlLCBvcHRzKSwgXCJldmVudFwiLCB7XG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgZXZlbnQ6IHBoeEV2ZW50LFxuICAgICAgdmFsdWU6IHRoaXMuZXh0cmFjdE1ldGEoZWwsIG1ldGEsIG9wdHMudmFsdWUpLFxuICAgICAgY2lkOiB0aGlzLnRhcmdldENvbXBvbmVudElEKGVsLCB0YXJnZXRDdHgsIG9wdHMpXG4gICAgfSlcbiAgfVxuXG4gIHB1c2hGaWxlUHJvZ3Jlc3MoZmlsZUVsLCBlbnRyeVJlZiwgcHJvZ3Jlc3MsIG9uUmVwbHkgPSBmdW5jdGlvbiAoKXsgfSl7XG4gICAgdGhpcy5saXZlU29ja2V0LndpdGhpbk93bmVycyhmaWxlRWwuZm9ybSwgKHZpZXcsIHRhcmdldEN0eCkgPT4ge1xuICAgICAgdmlldy5wdXNoV2l0aFJlcGx5KG51bGwsIFwicHJvZ3Jlc3NcIiwge1xuICAgICAgICBldmVudDogZmlsZUVsLmdldEF0dHJpYnV0ZSh2aWV3LmJpbmRpbmcoUEhYX1BST0dSRVNTKSksXG4gICAgICAgIHJlZjogZmlsZUVsLmdldEF0dHJpYnV0ZShQSFhfVVBMT0FEX1JFRiksXG4gICAgICAgIGVudHJ5X3JlZjogZW50cnlSZWYsXG4gICAgICAgIHByb2dyZXNzOiBwcm9ncmVzcyxcbiAgICAgICAgY2lkOiB2aWV3LnRhcmdldENvbXBvbmVudElEKGZpbGVFbC5mb3JtLCB0YXJnZXRDdHgpXG4gICAgICB9LCBvblJlcGx5KVxuICAgIH0pXG4gIH1cblxuICBwdXNoSW5wdXQoaW5wdXRFbCwgdGFyZ2V0Q3R4LCBmb3JjZUNpZCwgcGh4RXZlbnQsIG9wdHMsIGNhbGxiYWNrKXtcbiAgICBsZXQgdXBsb2Fkc1xuICAgIGxldCBjaWQgPSBpc0NpZChmb3JjZUNpZCkgPyBmb3JjZUNpZCA6IHRoaXMudGFyZ2V0Q29tcG9uZW50SUQoaW5wdXRFbC5mb3JtLCB0YXJnZXRDdHgpXG4gICAgbGV0IHJlZkdlbmVyYXRvciA9ICgpID0+IHRoaXMucHV0UmVmKFtpbnB1dEVsLCBpbnB1dEVsLmZvcm1dLCBcImNoYW5nZVwiLCBvcHRzKVxuICAgIGxldCBmb3JtRGF0YVxuICAgIGlmKGlucHV0RWwuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhcImNoYW5nZVwiKSkpe1xuICAgICAgZm9ybURhdGEgPSBzZXJpYWxpemVGb3JtKGlucHV0RWwuZm9ybSwge190YXJnZXQ6IG9wdHMuX3RhcmdldH0sIFtpbnB1dEVsLm5hbWVdKVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3JtRGF0YSA9IHNlcmlhbGl6ZUZvcm0oaW5wdXRFbC5mb3JtLCB7X3RhcmdldDogb3B0cy5fdGFyZ2V0fSlcbiAgICB9XG4gICAgaWYoRE9NLmlzVXBsb2FkSW5wdXQoaW5wdXRFbCkgJiYgaW5wdXRFbC5maWxlcyAmJiBpbnB1dEVsLmZpbGVzLmxlbmd0aCA+IDApe1xuICAgICAgTGl2ZVVwbG9hZGVyLnRyYWNrRmlsZXMoaW5wdXRFbCwgQXJyYXkuZnJvbShpbnB1dEVsLmZpbGVzKSlcbiAgICB9XG4gICAgdXBsb2FkcyA9IExpdmVVcGxvYWRlci5zZXJpYWxpemVVcGxvYWRzKGlucHV0RWwpXG4gICAgbGV0IGV2ZW50ID0ge1xuICAgICAgdHlwZTogXCJmb3JtXCIsXG4gICAgICBldmVudDogcGh4RXZlbnQsXG4gICAgICB2YWx1ZTogZm9ybURhdGEsXG4gICAgICB1cGxvYWRzOiB1cGxvYWRzLFxuICAgICAgY2lkOiBjaWRcbiAgICB9XG4gICAgdGhpcy5wdXNoV2l0aFJlcGx5KHJlZkdlbmVyYXRvciwgXCJldmVudFwiLCBldmVudCwgcmVzcCA9PiB7XG4gICAgICBET00uc2hvd0Vycm9yKGlucHV0RWwsIHRoaXMubGl2ZVNvY2tldC5iaW5kaW5nKFBIWF9GRUVEQkFDS19GT1IpKVxuICAgICAgaWYoRE9NLmlzVXBsb2FkSW5wdXQoaW5wdXRFbCkgJiYgaW5wdXRFbC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBoeC1hdXRvLXVwbG9hZFwiKSAhPT0gbnVsbCl7XG4gICAgICAgIGlmKExpdmVVcGxvYWRlci5maWxlc0F3YWl0aW5nUHJlZmxpZ2h0KGlucHV0RWwpLmxlbmd0aCA+IDApe1xuICAgICAgICAgIGxldCBbcmVmLCBfZWxzXSA9IHJlZkdlbmVyYXRvcigpXG4gICAgICAgICAgdGhpcy51cGxvYWRGaWxlcyhpbnB1dEVsLmZvcm0sIHRhcmdldEN0eCwgcmVmLCBjaWQsIChfdXBsb2FkcykgPT4ge1xuICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2socmVzcClcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlckF3YWl0aW5nU3VibWl0KGlucHV0RWwuZm9ybSlcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhyZXNwKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICB0cmlnZ2VyQXdhaXRpbmdTdWJtaXQoZm9ybUVsKXtcbiAgICBsZXQgYXdhaXRpbmdTdWJtaXQgPSB0aGlzLmdldFNjaGVkdWxlZFN1Ym1pdChmb3JtRWwpXG4gICAgaWYoYXdhaXRpbmdTdWJtaXQpe1xuICAgICAgbGV0IFtfZWwsIF9yZWYsIF9vcHRzLCBjYWxsYmFja10gPSBhd2FpdGluZ1N1Ym1pdFxuICAgICAgdGhpcy5jYW5jZWxTdWJtaXQoZm9ybUVsKVxuICAgICAgY2FsbGJhY2soKVxuICAgIH1cbiAgfVxuXG4gIGdldFNjaGVkdWxlZFN1Ym1pdChmb3JtRWwpe1xuICAgIHJldHVybiB0aGlzLmZvcm1TdWJtaXRzLmZpbmQoKFtlbCwgX3JlZiwgX29wdHMsIF9jYWxsYmFja10pID0+IGVsLmlzU2FtZU5vZGUoZm9ybUVsKSlcbiAgfVxuXG4gIHNjaGVkdWxlU3VibWl0KGZvcm1FbCwgcmVmLCBvcHRzLCBjYWxsYmFjayl7XG4gICAgaWYodGhpcy5nZXRTY2hlZHVsZWRTdWJtaXQoZm9ybUVsKSl7IHJldHVybiB0cnVlIH1cbiAgICB0aGlzLmZvcm1TdWJtaXRzLnB1c2goW2Zvcm1FbCwgcmVmLCBvcHRzLCBjYWxsYmFja10pXG4gIH1cblxuICBjYW5jZWxTdWJtaXQoZm9ybUVsKXtcbiAgICB0aGlzLmZvcm1TdWJtaXRzID0gdGhpcy5mb3JtU3VibWl0cy5maWx0ZXIoKFtlbCwgcmVmLCBfY2FsbGJhY2tdKSA9PiB7XG4gICAgICBpZihlbC5pc1NhbWVOb2RlKGZvcm1FbCkpe1xuICAgICAgICB0aGlzLnVuZG9SZWZzKHJlZilcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBkaXNhYmxlRm9ybShmb3JtRWwsIG9wdHMgPSB7fSl7XG4gICAgbGV0IGZpbHRlcklnbm9yZWQgPSBlbCA9PiB7XG4gICAgICBsZXQgdXNlcklnbm9yZWQgPSBjbG9zZXN0UGh4QmluZGluZyhlbCwgYCR7dGhpcy5iaW5kaW5nKFBIWF9VUERBVEUpfT1pZ25vcmVgLCBlbC5mb3JtKVxuICAgICAgcmV0dXJuICEodXNlcklnbm9yZWQgfHwgY2xvc2VzdFBoeEJpbmRpbmcoZWwsIFwiZGF0YS1waHgtdXBkYXRlPWlnbm9yZVwiLCBlbC5mb3JtKSlcbiAgICB9XG4gICAgbGV0IGZpbHRlckRpc2FibGVzID0gZWwgPT4ge1xuICAgICAgcmV0dXJuIGVsLmhhc0F0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoUEhYX0RJU0FCTEVfV0lUSCkpXG4gICAgfVxuICAgIGxldCBmaWx0ZXJCdXR0b24gPSBlbCA9PiBlbC50YWdOYW1lID09IFwiQlVUVE9OXCJcblxuICAgIGxldCBmaWx0ZXJJbnB1dCA9IGVsID0+IFtcIklOUFVUXCIsIFwiVEVYVEFSRUFcIiwgXCJTRUxFQ1RcIl0uaW5jbHVkZXMoZWwudGFnTmFtZSlcblxuICAgIGxldCBmb3JtRWxlbWVudHMgPSBBcnJheS5mcm9tKGZvcm1FbC5lbGVtZW50cylcbiAgICBsZXQgZGlzYWJsZXMgPSBmb3JtRWxlbWVudHMuZmlsdGVyKGZpbHRlckRpc2FibGVzKVxuICAgIGxldCBidXR0b25zID0gZm9ybUVsZW1lbnRzLmZpbHRlcihmaWx0ZXJCdXR0b24pLmZpbHRlcihmaWx0ZXJJZ25vcmVkKVxuICAgIGxldCBpbnB1dHMgPSBmb3JtRWxlbWVudHMuZmlsdGVyKGZpbHRlcklucHV0KS5maWx0ZXIoZmlsdGVySWdub3JlZClcblxuICAgIGJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4ge1xuICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZShQSFhfRElTQUJMRUQsIGJ1dHRvbi5kaXNhYmxlZClcbiAgICAgIGJ1dHRvbi5kaXNhYmxlZCA9IHRydWVcbiAgICB9KVxuICAgIGlucHV0cy5mb3JFYWNoKGlucHV0ID0+IHtcbiAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShQSFhfUkVBRE9OTFksIGlucHV0LnJlYWRPbmx5KVxuICAgICAgaW5wdXQucmVhZE9ubHkgPSB0cnVlXG4gICAgICBpZihpbnB1dC5maWxlcyl7XG4gICAgICAgIGlucHV0LnNldEF0dHJpYnV0ZShQSFhfRElTQUJMRUQsIGlucHV0LmRpc2FibGVkKVxuICAgICAgICBpbnB1dC5kaXNhYmxlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9KVxuICAgIGZvcm1FbC5zZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFBIWF9QQUdFX0xPQURJTkcpLCBcIlwiKVxuICAgIHJldHVybiB0aGlzLnB1dFJlZihbZm9ybUVsXS5jb25jYXQoZGlzYWJsZXMpLmNvbmNhdChidXR0b25zKS5jb25jYXQoaW5wdXRzKSwgXCJzdWJtaXRcIiwgb3B0cylcbiAgfVxuXG4gIHB1c2hGb3JtU3VibWl0KGZvcm1FbCwgdGFyZ2V0Q3R4LCBwaHhFdmVudCwgc3VibWl0dGVyLCBvcHRzLCBvblJlcGx5KXtcbiAgICBsZXQgcmVmR2VuZXJhdG9yID0gKCkgPT4gdGhpcy5kaXNhYmxlRm9ybShmb3JtRWwsIG9wdHMpXG4gICAgbGV0IGNpZCA9IHRoaXMudGFyZ2V0Q29tcG9uZW50SUQoZm9ybUVsLCB0YXJnZXRDdHgpXG4gICAgaWYoTGl2ZVVwbG9hZGVyLmhhc1VwbG9hZHNJblByb2dyZXNzKGZvcm1FbCkpe1xuICAgICAgbGV0IFtyZWYsIF9lbHNdID0gcmVmR2VuZXJhdG9yKClcbiAgICAgIGxldCBwdXNoID0gKCkgPT4gdGhpcy5wdXNoRm9ybVN1Ym1pdChmb3JtRWwsIHN1Ym1pdHRlciwgdGFyZ2V0Q3R4LCBwaHhFdmVudCwgb3B0cywgb25SZXBseSlcbiAgICAgIHJldHVybiB0aGlzLnNjaGVkdWxlU3VibWl0KGZvcm1FbCwgcmVmLCBvcHRzLCBwdXNoKVxuICAgIH0gZWxzZSBpZihMaXZlVXBsb2FkZXIuaW5wdXRzQXdhaXRpbmdQcmVmbGlnaHQoZm9ybUVsKS5sZW5ndGggPiAwKXtcbiAgICAgIGxldCBbcmVmLCBlbHNdID0gcmVmR2VuZXJhdG9yKClcbiAgICAgIGxldCBwcm94eVJlZkdlbiA9ICgpID0+IFtyZWYsIGVscywgb3B0c11cbiAgICAgIHRoaXMudXBsb2FkRmlsZXMoZm9ybUVsLCB0YXJnZXRDdHgsIHJlZiwgY2lkLCAoX3VwbG9hZHMpID0+IHtcbiAgICAgICAgbGV0IGZvcm1EYXRhID0gc2VyaWFsaXplRm9ybShmb3JtRWwsIHtzdWJtaXR0ZXJ9KVxuICAgICAgICB0aGlzLnB1c2hXaXRoUmVwbHkocHJveHlSZWZHZW4sIFwiZXZlbnRcIiwge1xuICAgICAgICAgIHR5cGU6IFwiZm9ybVwiLFxuICAgICAgICAgIGV2ZW50OiBwaHhFdmVudCxcbiAgICAgICAgICB2YWx1ZTogZm9ybURhdGEsXG4gICAgICAgICAgY2lkOiBjaWRcbiAgICAgICAgfSwgb25SZXBseSlcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBmb3JtRGF0YSA9IHNlcmlhbGl6ZUZvcm0oZm9ybUVsLCB7c3VibWl0dGVyfSlcbiAgICAgIHRoaXMucHVzaFdpdGhSZXBseShyZWZHZW5lcmF0b3IsIFwiZXZlbnRcIiwge1xuICAgICAgICB0eXBlOiBcImZvcm1cIixcbiAgICAgICAgZXZlbnQ6IHBoeEV2ZW50LFxuICAgICAgICB2YWx1ZTogZm9ybURhdGEsXG4gICAgICAgIGNpZDogY2lkXG4gICAgICB9LCBvblJlcGx5KVxuICAgIH1cbiAgfVxuXG4gIHVwbG9hZEZpbGVzKGZvcm1FbCwgdGFyZ2V0Q3R4LCByZWYsIGNpZCwgb25Db21wbGV0ZSl7XG4gICAgbGV0IGpvaW5Db3VudEF0VXBsb2FkID0gdGhpcy5qb2luQ291bnRcbiAgICBsZXQgaW5wdXRFbHMgPSBMaXZlVXBsb2FkZXIuYWN0aXZlRmlsZUlucHV0cyhmb3JtRWwpXG4gICAgbGV0IG51bUZpbGVJbnB1dHNJblByb2dyZXNzID0gaW5wdXRFbHMubGVuZ3RoXG5cbiAgICAvLyBnZXQgZWFjaCBmaWxlIGlucHV0XG4gICAgaW5wdXRFbHMuZm9yRWFjaChpbnB1dEVsID0+IHtcbiAgICAgIGxldCB1cGxvYWRlciA9IG5ldyBMaXZlVXBsb2FkZXIoaW5wdXRFbCwgdGhpcywgKCkgPT4ge1xuICAgICAgICBudW1GaWxlSW5wdXRzSW5Qcm9ncmVzcy0tXG4gICAgICAgIGlmKG51bUZpbGVJbnB1dHNJblByb2dyZXNzID09PSAwKXsgb25Db21wbGV0ZSgpIH1cbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnVwbG9hZGVyc1tpbnB1dEVsXSA9IHVwbG9hZGVyXG4gICAgICBsZXQgZW50cmllcyA9IHVwbG9hZGVyLmVudHJpZXMoKS5tYXAoZW50cnkgPT4gZW50cnkudG9QcmVmbGlnaHRQYXlsb2FkKCkpXG5cbiAgICAgIGxldCBwYXlsb2FkID0ge1xuICAgICAgICByZWY6IGlucHV0RWwuZ2V0QXR0cmlidXRlKFBIWF9VUExPQURfUkVGKSxcbiAgICAgICAgZW50cmllczogZW50cmllcyxcbiAgICAgICAgY2lkOiB0aGlzLnRhcmdldENvbXBvbmVudElEKGlucHV0RWwuZm9ybSwgdGFyZ2V0Q3R4KVxuICAgICAgfVxuXG4gICAgICB0aGlzLmxvZyhcInVwbG9hZFwiLCAoKSA9PiBbXCJzZW5kaW5nIHByZWZsaWdodCByZXF1ZXN0XCIsIHBheWxvYWRdKVxuXG4gICAgICB0aGlzLnB1c2hXaXRoUmVwbHkobnVsbCwgXCJhbGxvd191cGxvYWRcIiwgcGF5bG9hZCwgcmVzcCA9PiB7XG4gICAgICAgIHRoaXMubG9nKFwidXBsb2FkXCIsICgpID0+IFtcImdvdCBwcmVmbGlnaHQgcmVzcG9uc2VcIiwgcmVzcF0pXG4gICAgICAgIGlmKHJlc3AuZXJyb3Ipe1xuICAgICAgICAgIHRoaXMudW5kb1JlZnMocmVmKVxuICAgICAgICAgIGxldCBbZW50cnlfcmVmLCByZWFzb25dID0gcmVzcC5lcnJvclxuICAgICAgICAgIHRoaXMubG9nKFwidXBsb2FkXCIsICgpID0+IFtgZXJyb3IgZm9yIGVudHJ5ICR7ZW50cnlfcmVmfWAsIHJlYXNvbl0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IG9uRXJyb3IgPSAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbC5vbkVycm9yKCgpID0+IHtcbiAgICAgICAgICAgICAgaWYodGhpcy5qb2luQ291bnQgPT09IGpvaW5Db3VudEF0VXBsb2FkKXsgY2FsbGJhY2soKSB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICB1cGxvYWRlci5pbml0QWRhcHRlclVwbG9hZChyZXNwLCBvbkVycm9yLCB0aGlzLmxpdmVTb2NrZXQpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIGRpc3BhdGNoVXBsb2FkcyhuYW1lLCBmaWxlc09yQmxvYnMpe1xuICAgIGxldCBpbnB1dHMgPSBET00uZmluZFVwbG9hZElucHV0cyh0aGlzLmVsKS5maWx0ZXIoZWwgPT4gZWwubmFtZSA9PT0gbmFtZSlcbiAgICBpZihpbnB1dHMubGVuZ3RoID09PSAwKXsgbG9nRXJyb3IoYG5vIGxpdmUgZmlsZSBpbnB1dHMgZm91bmQgbWF0Y2hpbmcgdGhlIG5hbWUgXCIke25hbWV9XCJgKSB9XG4gICAgZWxzZSBpZihpbnB1dHMubGVuZ3RoID4gMSl7IGxvZ0Vycm9yKGBkdXBsaWNhdGUgbGl2ZSBmaWxlIGlucHV0cyBmb3VuZCBtYXRjaGluZyB0aGUgbmFtZSBcIiR7bmFtZX1cImApIH1cbiAgICBlbHNlIHsgRE9NLmRpc3BhdGNoRXZlbnQoaW5wdXRzWzBdLCBQSFhfVFJBQ0tfVVBMT0FEUywge2RldGFpbDoge2ZpbGVzOiBmaWxlc09yQmxvYnN9fSkgfVxuICB9XG5cbiAgcHVzaEZvcm1SZWNvdmVyeShmb3JtLCBuZXdDaWQsIGNhbGxiYWNrKXtcbiAgICB0aGlzLmxpdmVTb2NrZXQud2l0aGluT3duZXJzKGZvcm0sICh2aWV3LCB0YXJnZXRDdHgpID0+IHtcbiAgICAgIGxldCBpbnB1dCA9IEFycmF5LmZyb20oZm9ybS5lbGVtZW50cykuZmluZChlbCA9PiB7XG4gICAgICAgIHJldHVybiBET00uaXNGb3JtSW5wdXQoZWwpICYmIGVsLnR5cGUgIT09IFwiaGlkZGVuXCIgJiYgIWVsLmhhc0F0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJjaGFuZ2VcIikpXG4gICAgICB9KVxuICAgICAgbGV0IHBoeEV2ZW50ID0gZm9ybS5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFBIWF9BVVRPX1JFQ09WRVIpKSB8fCBmb3JtLmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJjaGFuZ2VcIikpXG5cbiAgICAgIEpTLmV4ZWMoXCJjaGFuZ2VcIiwgcGh4RXZlbnQsIHZpZXcsIGlucHV0LCBbXCJwdXNoXCIsIHtfdGFyZ2V0OiBpbnB1dC5uYW1lLCBuZXdDaWQ6IG5ld0NpZCwgY2FsbGJhY2s6IGNhbGxiYWNrfV0pXG4gICAgfSlcbiAgfVxuXG4gIHB1c2hMaW5rUGF0Y2goaHJlZiwgdGFyZ2V0RWwsIGNhbGxiYWNrKXtcbiAgICBsZXQgbGlua1JlZiA9IHRoaXMubGl2ZVNvY2tldC5zZXRQZW5kaW5nTGluayhocmVmKVxuICAgIGxldCByZWZHZW4gPSB0YXJnZXRFbCA/ICgpID0+IHRoaXMucHV0UmVmKFt0YXJnZXRFbF0sIFwiY2xpY2tcIikgOiBudWxsXG4gICAgbGV0IGZhbGxiYWNrID0gKCkgPT4gdGhpcy5saXZlU29ja2V0LnJlZGlyZWN0KHdpbmRvdy5sb2NhdGlvbi5ocmVmKVxuXG4gICAgbGV0IHB1c2ggPSB0aGlzLnB1c2hXaXRoUmVwbHkocmVmR2VuLCBcImxpdmVfcGF0Y2hcIiwge3VybDogaHJlZn0sIHJlc3AgPT4ge1xuICAgICAgdGhpcy5saXZlU29ja2V0LnJlcXVlc3RET01VcGRhdGUoKCkgPT4ge1xuICAgICAgICBpZihyZXNwLmxpbmtfcmVkaXJlY3Qpe1xuICAgICAgICAgIHRoaXMubGl2ZVNvY2tldC5yZXBsYWNlTWFpbihocmVmLCBudWxsLCBjYWxsYmFjaywgbGlua1JlZilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZih0aGlzLmxpdmVTb2NrZXQuY29tbWl0UGVuZGluZ0xpbmsobGlua1JlZikpe1xuICAgICAgICAgICAgdGhpcy5ocmVmID0gaHJlZlxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmFwcGx5UGVuZGluZ1VwZGF0ZXMoKVxuICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKGxpbmtSZWYpXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGlmKHB1c2gpe1xuICAgICAgcHVzaC5yZWNlaXZlKFwidGltZW91dFwiLCBmYWxsYmFjaylcbiAgICB9IGVsc2Uge1xuICAgICAgZmFsbGJhY2soKVxuICAgIH1cbiAgfVxuXG4gIGZvcm1zRm9yUmVjb3ZlcnkoaHRtbCl7XG4gICAgaWYodGhpcy5qb2luQ291bnQgPT09IDApeyByZXR1cm4gW10gfVxuXG4gICAgbGV0IHBoeENoYW5nZSA9IHRoaXMuYmluZGluZyhcImNoYW5nZVwiKVxuICAgIGxldCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKVxuICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IGh0bWxcblxuICAgIHJldHVybiAoXG4gICAgICBET00uYWxsKHRoaXMuZWwsIGBmb3JtWyR7cGh4Q2hhbmdlfV1gKVxuICAgICAgICAuZmlsdGVyKGZvcm0gPT4gZm9ybS5pZCAmJiB0aGlzLm93bnNFbGVtZW50KGZvcm0pKVxuICAgICAgICAuZmlsdGVyKGZvcm0gPT4gZm9ybS5lbGVtZW50cy5sZW5ndGggPiAwKVxuICAgICAgICAuZmlsdGVyKGZvcm0gPT4gZm9ybS5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFBIWF9BVVRPX1JFQ09WRVIpKSAhPT0gXCJpZ25vcmVcIilcbiAgICAgICAgLm1hcChmb3JtID0+IHtcbiAgICAgICAgICBsZXQgbmV3Rm9ybSA9IHRlbXBsYXRlLmNvbnRlbnQucXVlcnlTZWxlY3RvcihgZm9ybVtpZD1cIiR7Zm9ybS5pZH1cIl1bJHtwaHhDaGFuZ2V9PVwiJHtmb3JtLmdldEF0dHJpYnV0ZShwaHhDaGFuZ2UpfVwiXWApXG4gICAgICAgICAgaWYobmV3Rm9ybSl7XG4gICAgICAgICAgICByZXR1cm4gW2Zvcm0sIG5ld0Zvcm0sIHRoaXMudGFyZ2V0Q29tcG9uZW50SUQobmV3Rm9ybSldXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbZm9ybSwgbnVsbCwgbnVsbF1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC5maWx0ZXIoKFtmb3JtLCBuZXdGb3JtLCBuZXdDaWRdKSA9PiBuZXdGb3JtKVxuICAgIClcbiAgfVxuXG4gIG1heWJlUHVzaENvbXBvbmVudHNEZXN0cm95ZWQoZGVzdHJveWVkQ0lEcyl7XG4gICAgbGV0IHdpbGxEZXN0cm95Q0lEcyA9IGRlc3Ryb3llZENJRHMuZmlsdGVyKGNpZCA9PiB7XG4gICAgICByZXR1cm4gRE9NLmZpbmRDb21wb25lbnROb2RlTGlzdCh0aGlzLmVsLCBjaWQpLmxlbmd0aCA9PT0gMFxuICAgIH0pXG4gICAgaWYod2lsbERlc3Ryb3lDSURzLmxlbmd0aCA+IDApe1xuICAgICAgdGhpcy5wcnVuaW5nQ0lEcy5wdXNoKC4uLndpbGxEZXN0cm95Q0lEcylcblxuICAgICAgdGhpcy5wdXNoV2l0aFJlcGx5KG51bGwsIFwiY2lkc193aWxsX2Rlc3Ryb3lcIiwge2NpZHM6IHdpbGxEZXN0cm95Q0lEc30sICgpID0+IHtcbiAgICAgICAgLy8gVGhlIGNpZHMgYXJlIGVpdGhlciBiYWNrIG9uIHRoZSBwYWdlIG9yIHRoZXkgd2lsbCBiZSBmdWxseSByZW1vdmVkLFxuICAgICAgICAvLyBzbyB3ZSBjYW4gcmVtb3ZlIHRoZW0gZnJvbSB0aGUgcHJ1bmluZ0NJRHMuXG4gICAgICAgIHRoaXMucHJ1bmluZ0NJRHMgPSB0aGlzLnBydW5pbmdDSURzLmZpbHRlcihjaWQgPT4gd2lsbERlc3Ryb3lDSURzLmluZGV4T2YoY2lkKSAhPT0gLTEpXG5cbiAgICAgICAgLy8gU2VlIGlmIGFueSBvZiB0aGUgY2lkcyB3ZSB3YW50ZWQgdG8gZGVzdHJveSB3ZXJlIGFkZGVkIGJhY2ssXG4gICAgICAgIC8vIGlmIHRoZXkgd2VyZSBhZGRlZCBiYWNrLCB3ZSBkb24ndCBhY3R1YWxseSBkZXN0cm95IHRoZW0uXG4gICAgICAgIGxldCBjb21wbGV0ZWx5RGVzdHJveUNJRHMgPSB3aWxsRGVzdHJveUNJRHMuZmlsdGVyKGNpZCA9PiB7XG4gICAgICAgICAgcmV0dXJuIERPTS5maW5kQ29tcG9uZW50Tm9kZUxpc3QodGhpcy5lbCwgY2lkKS5sZW5ndGggPT09IDBcbiAgICAgICAgfSlcblxuICAgICAgICBpZihjb21wbGV0ZWx5RGVzdHJveUNJRHMubGVuZ3RoID4gMCl7XG4gICAgICAgICAgdGhpcy5wdXNoV2l0aFJlcGx5KG51bGwsIFwiY2lkc19kZXN0cm95ZWRcIiwge2NpZHM6IGNvbXBsZXRlbHlEZXN0cm95Q0lEc30sIChyZXNwKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVkLnBydW5lQ0lEcyhyZXNwLmNpZHMpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBvd25zRWxlbWVudChlbCl7XG4gICAgbGV0IHBhcmVudFZpZXdFbCA9IGVsLmNsb3Nlc3QoUEhYX1ZJRVdfU0VMRUNUT1IpXG4gICAgcmV0dXJuIGVsLmdldEF0dHJpYnV0ZShQSFhfUEFSRU5UX0lEKSA9PT0gdGhpcy5pZCB8fFxuICAgICAgKHBhcmVudFZpZXdFbCAmJiBwYXJlbnRWaWV3RWwuaWQgPT09IHRoaXMuaWQpIHx8XG4gICAgICAoIXBhcmVudFZpZXdFbCAmJiB0aGlzLmlzRGVhZClcbiAgfVxuXG4gIHN1Ym1pdEZvcm0oZm9ybSwgdGFyZ2V0Q3R4LCBwaHhFdmVudCwgc3VibWl0dGVyLCBvcHRzID0ge30pe1xuICAgIERPTS5wdXRQcml2YXRlKGZvcm0sIFBIWF9IQVNfU1VCTUlUVEVELCB0cnVlKVxuICAgIGxldCBwaHhGZWVkYmFjayA9IHRoaXMubGl2ZVNvY2tldC5iaW5kaW5nKFBIWF9GRUVEQkFDS19GT1IpXG4gICAgbGV0IGlucHV0cyA9IEFycmF5LmZyb20oZm9ybS5lbGVtZW50cylcbiAgICBpbnB1dHMuZm9yRWFjaChpbnB1dCA9PiBET00ucHV0UHJpdmF0ZShpbnB1dCwgUEhYX0hBU19TVUJNSVRURUQsIHRydWUpKVxuICAgIHRoaXMubGl2ZVNvY2tldC5ibHVyQWN0aXZlRWxlbWVudCh0aGlzKVxuICAgIHRoaXMucHVzaEZvcm1TdWJtaXQoZm9ybSwgdGFyZ2V0Q3R4LCBwaHhFdmVudCwgc3VibWl0dGVyLCBvcHRzLCAoKSA9PiB7XG4gICAgICBpbnB1dHMuZm9yRWFjaChpbnB1dCA9PiBET00uc2hvd0Vycm9yKGlucHV0LCBwaHhGZWVkYmFjaykpXG4gICAgICB0aGlzLmxpdmVTb2NrZXQucmVzdG9yZVByZXZpb3VzbHlBY3RpdmVGb2N1cygpXG4gICAgfSlcbiAgfVxuXG4gIGJpbmRpbmcoa2luZCl7IHJldHVybiB0aGlzLmxpdmVTb2NrZXQuYmluZGluZyhraW5kKSB9XG59XG4iLCAiLyoqIEluaXRpYWxpemVzIHRoZSBMaXZlU29ja2V0XG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbmRQb2ludCAtIFRoZSBzdHJpbmcgV2ViU29ja2V0IGVuZHBvaW50LCBpZSwgYFwid3NzOi8vZXhhbXBsZS5jb20vbGl2ZVwiYCxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgXCIvbGl2ZVwiYCAoaW5oZXJpdGVkIGhvc3QgJiBwcm90b2NvbClcbiAqIEBwYXJhbSB7UGhvZW5peC5Tb2NrZXR9IHNvY2tldCAtIHRoZSByZXF1aXJlZCBQaG9lbml4IFNvY2tldCBjbGFzcyBpbXBvcnRlZCBmcm9tIFwicGhvZW5peFwiLiBGb3IgZXhhbXBsZTpcbiAqXG4gKiAgICAgaW1wb3J0IHtTb2NrZXR9IGZyb20gXCJwaG9lbml4XCJcbiAqICAgICBpbXBvcnQge0xpdmVTb2NrZXR9IGZyb20gXCJwaG9lbml4X2xpdmVfdmlld1wiXG4gKiAgICAgbGV0IGxpdmVTb2NrZXQgPSBuZXcgTGl2ZVNvY2tldChcIi9saXZlXCIsIFNvY2tldCwgey4uLn0pXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzXSAtIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24uIE91dHNpZGUgb2Yga2V5cyBsaXN0ZWQgYmVsb3csIGFsbFxuICogY29uZmlndXJhdGlvbiBpcyBwYXNzZWQgZGlyZWN0bHkgdG8gdGhlIFBob2VuaXggU29ja2V0IGNvbnN0cnVjdG9yLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzLmRlZmF1bHRzXSAtIFRoZSBvcHRpb25hbCBkZWZhdWx0cyB0byB1c2UgZm9yIHZhcmlvdXMgYmluZGluZ3MsXG4gKiBzdWNoIGFzIGBwaHgtZGVib3VuY2VgLiBTdXBwb3J0cyB0aGUgZm9sbG93aW5nIGtleXM6XG4gKlxuICogICAtIGRlYm91bmNlIC0gdGhlIG1pbGxpc2Vjb25kIHBoeC1kZWJvdW5jZSB0aW1lLiBEZWZhdWx0cyAzMDBcbiAqICAgLSB0aHJvdHRsZSAtIHRoZSBtaWxsaXNlY29uZCBwaHgtdGhyb3R0bGUgdGltZS4gRGVmYXVsdHMgMzAwXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMucGFyYW1zXSAtIFRoZSBvcHRpb25hbCBmdW5jdGlvbiBmb3IgcGFzc2luZyBjb25uZWN0IHBhcmFtcy5cbiAqIFRoZSBmdW5jdGlvbiByZWNlaXZlcyB0aGUgZWxlbWVudCBhc3NvY2lhdGVkIHdpdGggYSBnaXZlbiBMaXZlVmlldy4gRm9yIGV4YW1wbGU6XG4gKlxuICogICAgIChlbCkgPT4ge3ZpZXc6IGVsLmdldEF0dHJpYnV0ZShcImRhdGEtbXktdmlldy1uYW1lXCIsIHRva2VuOiB3aW5kb3cubXlUb2tlbn1cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdHMuYmluZGluZ1ByZWZpeF0gLSBUaGUgb3B0aW9uYWwgcHJlZml4IHRvIHVzZSBmb3IgYWxsIHBoeCBET00gYW5ub3RhdGlvbnMuXG4gKiBEZWZhdWx0cyB0byBcInBoeC1cIi5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cy5ob29rc10gLSBUaGUgb3B0aW9uYWwgb2JqZWN0IGZvciByZWZlcmVuY2luZyBMaXZlVmlldyBob29rIGNhbGxiYWNrcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cy51cGxvYWRlcnNdIC0gVGhlIG9wdGlvbmFsIG9iamVjdCBmb3IgcmVmZXJlbmNpbmcgTGl2ZVZpZXcgdXBsb2FkZXIgY2FsbGJhY2tzLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBbb3B0cy5sb2FkZXJUaW1lb3V0XSAtIFRoZSBvcHRpb25hbCBkZWxheSBpbiBtaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgYXBwbHlcbiAqIGxvYWRpbmcgc3RhdGVzLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBbb3B0cy5tYXhSZWxvYWRzXSAtIFRoZSBtYXhpbXVtIHJlbG9hZHMgYmVmb3JlIGVudGVyaW5nIGZhaWxzYWZlIG1vZGUuXG4gKiBAcGFyYW0ge2ludGVnZXJ9IFtvcHRzLnJlbG9hZEppdHRlck1pbl0gLSBUaGUgbWluaW11bSB0aW1lIGJldHdlZW4gbm9ybWFsIHJlbG9hZCBhdHRlbXB0cy5cbiAqIEBwYXJhbSB7aW50ZWdlcn0gW29wdHMucmVsb2FkSml0dGVyTWF4XSAtIFRoZSBtYXhpbXVtIHRpbWUgYmV0d2VlbiBub3JtYWwgcmVsb2FkIGF0dGVtcHRzLlxuICogQHBhcmFtIHtpbnRlZ2VyfSBbb3B0cy5mYWlsc2FmZUppdHRlcl0gLSBUaGUgdGltZSBiZXR3ZWVuIHJlbG9hZCBhdHRlbXB0cyBpbiBmYWlsc2FmZSBtb2RlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMudmlld0xvZ2dlcl0gLSBUaGUgb3B0aW9uYWwgZnVuY3Rpb24gdG8gbG9nIGRlYnVnIGluZm9ybWF0aW9uLiBGb3IgZXhhbXBsZTpcbiAqXG4gKiAgICAgKHZpZXcsIGtpbmQsIG1zZywgb2JqKSA9PiBjb25zb2xlLmxvZyhgJHt2aWV3LmlkfSAke2tpbmR9OiAke21zZ30gLSBgLCBvYmopXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzLm1ldGFkYXRhXSAtIFRoZSBvcHRpb25hbCBvYmplY3QgbWFwcGluZyBldmVudCBuYW1lcyB0byBmdW5jdGlvbnMgZm9yXG4gKiBwb3B1bGF0aW5nIGV2ZW50IG1ldGFkYXRhLiBGb3IgZXhhbXBsZTpcbiAqXG4gKiAgICAgbWV0YWRhdGE6IHtcbiAqICAgICAgIGNsaWNrOiAoZSwgZWwpID0+IHtcbiAqICAgICAgICAgcmV0dXJuIHtcbiAqICAgICAgICAgICBjdHJsS2V5OiBlLmN0cmxLZXksXG4gKiAgICAgICAgICAgbWV0YUtleTogZS5tZXRhS2V5LFxuICogICAgICAgICAgIGRldGFpbDogZS5kZXRhaWwgfHwgMSxcbiAqICAgICAgICAgfVxuICogICAgICAgfSxcbiAqICAgICAgIGtleWRvd246IChlLCBlbCkgPT4ge1xuICogICAgICAgICByZXR1cm4ge1xuICogICAgICAgICAgIGtleTogZS5rZXksXG4gKiAgICAgICAgICAgY3RybEtleTogZS5jdHJsS2V5LFxuICogICAgICAgICAgIG1ldGFLZXk6IGUubWV0YUtleSxcbiAqICAgICAgICAgICBzaGlmdEtleTogZS5zaGlmdEtleVxuICogICAgICAgICB9XG4gKiAgICAgICB9XG4gKiAgICAgfVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzLnNlc3Npb25TdG9yYWdlXSAtIEFuIG9wdGlvbmFsIFN0b3JhZ2UgY29tcGF0aWJsZSBvYmplY3RcbiAqIFVzZWZ1bCB3aGVuIExpdmVWaWV3IHdvbid0IGhhdmUgYWNjZXNzIHRvIGBzZXNzaW9uU3RvcmFnZWAuICBGb3IgZXhhbXBsZSwgVGhpcyBjb3VsZFxuICogaGFwcGVuIGlmIGEgc2l0ZSBsb2FkcyBhIGNyb3NzLWRvbWFpbiBMaXZlVmlldyBpbiBhbiBpZnJhbWUuICBFeGFtcGxlIHVzYWdlOlxuICpcbiAqICAgICBjbGFzcyBJbk1lbW9yeVN0b3JhZ2Uge1xuICogICAgICAgY29uc3RydWN0b3IoKSB7IHRoaXMuc3RvcmFnZSA9IHt9IH1cbiAqICAgICAgIGdldEl0ZW0oa2V5TmFtZSkgeyByZXR1cm4gdGhpcy5zdG9yYWdlW2tleU5hbWVdIHx8IG51bGwgfVxuICogICAgICAgcmVtb3ZlSXRlbShrZXlOYW1lKSB7IGRlbGV0ZSB0aGlzLnN0b3JhZ2Vba2V5TmFtZV0gfVxuICogICAgICAgc2V0SXRlbShrZXlOYW1lLCBrZXlWYWx1ZSkgeyB0aGlzLnN0b3JhZ2Vba2V5TmFtZV0gPSBrZXlWYWx1ZSB9XG4gKiAgICAgfVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0cy5sb2NhbFN0b3JhZ2VdIC0gQW4gb3B0aW9uYWwgU3RvcmFnZSBjb21wYXRpYmxlIG9iamVjdFxuICogVXNlZnVsIGZvciB3aGVuIExpdmVWaWV3IHdvbid0IGhhdmUgYWNjZXNzIHRvIGBsb2NhbFN0b3JhZ2VgLlxuICogU2VlIGBvcHRzLnNlc3Npb25TdG9yYWdlYCBmb3IgZXhhbXBsZXMuXG4qL1xuXG5pbXBvcnQge1xuICBCSU5ESU5HX1BSRUZJWCxcbiAgQ09OU0VDVVRJVkVfUkVMT0FEUyxcbiAgREVGQVVMVFMsXG4gIEZBSUxTQUZFX0pJVFRFUixcbiAgTE9BREVSX1RJTUVPVVQsXG4gIE1BWF9SRUxPQURTLFxuICBQSFhfREVCT1VOQ0UsXG4gIFBIWF9EUk9QX1RBUkdFVCxcbiAgUEhYX0hBU19GT0NVU0VELFxuICBQSFhfS0VZLFxuICBQSFhfTElOS19TVEFURSxcbiAgUEhYX0xJVkVfTElOSyxcbiAgUEhYX0xWX0RFQlVHLFxuICBQSFhfTFZfTEFURU5DWV9TSU0sXG4gIFBIWF9MVl9QUk9GSUxFLFxuICBQSFhfTUFJTixcbiAgUEhYX1BBUkVOVF9JRCxcbiAgUEhYX1ZJRVdfU0VMRUNUT1IsXG4gIFBIWF9ST09UX0lELFxuICBQSFhfVEhST1RUTEUsXG4gIFBIWF9UUkFDS19VUExPQURTLFxuICBQSFhfU0VTU0lPTixcbiAgUEhYX0ZFRURCQUNLX0ZPUixcbiAgUkVMT0FEX0pJVFRFUl9NSU4sXG4gIFJFTE9BRF9KSVRURVJfTUFYLFxufSBmcm9tIFwiLi9jb25zdGFudHNcIlxuXG5pbXBvcnQge1xuICBjbG9uZSxcbiAgY2xvc2VzdFBoeEJpbmRpbmcsXG4gIGNsb3N1cmUsXG4gIGRlYnVnLFxuICBpc09iamVjdCxcbiAgbWF5YmVcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5pbXBvcnQgQnJvd3NlciBmcm9tIFwiLi9icm93c2VyXCJcbmltcG9ydCBET00gZnJvbSBcIi4vZG9tXCJcbmltcG9ydCBIb29rcyBmcm9tIFwiLi9ob29rc1wiXG5pbXBvcnQgTGl2ZVVwbG9hZGVyIGZyb20gXCIuL2xpdmVfdXBsb2FkZXJcIlxuaW1wb3J0IFZpZXcgZnJvbSBcIi4vdmlld1wiXG5pbXBvcnQgSlMgZnJvbSBcIi4vanNcIlxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaXZlU29ja2V0IHtcbiAgY29uc3RydWN0b3IodXJsLCBwaHhTb2NrZXQsIG9wdHMgPSB7fSl7XG4gICAgdGhpcy51bmxvYWRlZCA9IGZhbHNlXG4gICAgaWYoIXBoeFNvY2tldCB8fCBwaHhTb2NrZXQuY29uc3RydWN0b3IubmFtZSA9PT0gXCJPYmplY3RcIil7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFxuICAgICAgYSBwaG9lbml4IFNvY2tldCBtdXN0IGJlIHByb3ZpZGVkIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gdGhlIExpdmVTb2NrZXQgY29uc3RydWN0b3IuIEZvciBleGFtcGxlOlxuXG4gICAgICAgICAgaW1wb3J0IHtTb2NrZXR9IGZyb20gXCJwaG9lbml4XCJcbiAgICAgICAgICBpbXBvcnQge0xpdmVTb2NrZXR9IGZyb20gXCJwaG9lbml4X2xpdmVfdmlld1wiXG4gICAgICAgICAgbGV0IGxpdmVTb2NrZXQgPSBuZXcgTGl2ZVNvY2tldChcIi9saXZlXCIsIFNvY2tldCwgey4uLn0pXG4gICAgICBgKVxuICAgIH1cbiAgICB0aGlzLnNvY2tldCA9IG5ldyBwaHhTb2NrZXQodXJsLCBvcHRzKVxuICAgIHRoaXMuYmluZGluZ1ByZWZpeCA9IG9wdHMuYmluZGluZ1ByZWZpeCB8fCBCSU5ESU5HX1BSRUZJWFxuICAgIHRoaXMub3B0cyA9IG9wdHNcbiAgICB0aGlzLnBhcmFtcyA9IGNsb3N1cmUob3B0cy5wYXJhbXMgfHwge30pXG4gICAgdGhpcy52aWV3TG9nZ2VyID0gb3B0cy52aWV3TG9nZ2VyXG4gICAgdGhpcy5tZXRhZGF0YUNhbGxiYWNrcyA9IG9wdHMubWV0YWRhdGEgfHwge31cbiAgICB0aGlzLmRlZmF1bHRzID0gT2JqZWN0LmFzc2lnbihjbG9uZShERUZBVUxUUyksIG9wdHMuZGVmYXVsdHMgfHwge30pXG4gICAgdGhpcy5hY3RpdmVFbGVtZW50ID0gbnVsbFxuICAgIHRoaXMucHJldkFjdGl2ZSA9IG51bGxcbiAgICB0aGlzLnNpbGVuY2VkID0gZmFsc2VcbiAgICB0aGlzLm1haW4gPSBudWxsXG4gICAgdGhpcy5vdXRnb2luZ01haW5FbCA9IG51bGxcbiAgICB0aGlzLmNsaWNrU3RhcnRlZEF0VGFyZ2V0ID0gbnVsbFxuICAgIHRoaXMubGlua1JlZiA9IDFcbiAgICB0aGlzLnJvb3RzID0ge31cbiAgICB0aGlzLmhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZlxuICAgIHRoaXMucGVuZGluZ0xpbmsgPSBudWxsXG4gICAgdGhpcy5jdXJyZW50TG9jYXRpb24gPSBjbG9uZSh3aW5kb3cubG9jYXRpb24pXG4gICAgdGhpcy5ob29rcyA9IG9wdHMuaG9va3MgfHwge31cbiAgICB0aGlzLnVwbG9hZGVycyA9IG9wdHMudXBsb2FkZXJzIHx8IHt9XG4gICAgdGhpcy5sb2FkZXJUaW1lb3V0ID0gb3B0cy5sb2FkZXJUaW1lb3V0IHx8IExPQURFUl9USU1FT1VUXG4gICAgdGhpcy5yZWxvYWRXaXRoSml0dGVyVGltZXIgPSBudWxsXG4gICAgdGhpcy5tYXhSZWxvYWRzID0gb3B0cy5tYXhSZWxvYWRzIHx8IE1BWF9SRUxPQURTXG4gICAgdGhpcy5yZWxvYWRKaXR0ZXJNaW4gPSBvcHRzLnJlbG9hZEppdHRlck1pbiB8fCBSRUxPQURfSklUVEVSX01JTlxuICAgIHRoaXMucmVsb2FkSml0dGVyTWF4ID0gb3B0cy5yZWxvYWRKaXR0ZXJNYXggfHwgUkVMT0FEX0pJVFRFUl9NQVhcbiAgICB0aGlzLmZhaWxzYWZlSml0dGVyID0gb3B0cy5mYWlsc2FmZUppdHRlciB8fCBGQUlMU0FGRV9KSVRURVJcbiAgICB0aGlzLmxvY2FsU3RvcmFnZSA9IG9wdHMubG9jYWxTdG9yYWdlIHx8IHdpbmRvdy5sb2NhbFN0b3JhZ2VcbiAgICB0aGlzLnNlc3Npb25TdG9yYWdlID0gb3B0cy5zZXNzaW9uU3RvcmFnZSB8fCB3aW5kb3cuc2Vzc2lvblN0b3JhZ2VcbiAgICB0aGlzLmJvdW5kVG9wTGV2ZWxFdmVudHMgPSBmYWxzZVxuICAgIHRoaXMuZG9tQ2FsbGJhY2tzID0gT2JqZWN0LmFzc2lnbih7b25Ob2RlQWRkZWQ6IGNsb3N1cmUoKSwgb25CZWZvcmVFbFVwZGF0ZWQ6IGNsb3N1cmUoKX0sIG9wdHMuZG9tIHx8IHt9KVxuICAgIHRoaXMudHJhbnNpdGlvbnMgPSBuZXcgVHJhbnNpdGlvblNldCgpXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBfZSA9PiB7XG4gICAgICB0aGlzLnVubG9hZGVkID0gdHJ1ZVxuICAgIH0pXG4gICAgdGhpcy5zb2NrZXQub25PcGVuKCgpID0+IHtcbiAgICAgIGlmKHRoaXMuaXNVbmxvYWRlZCgpKXtcbiAgICAgICAgLy8gcmVsb2FkIHBhZ2UgaWYgYmVpbmcgcmVzdG9yZWQgZnJvbSBiYWNrL2ZvcndhcmQgY2FjaGUgYW5kIGJyb3dzZXIgZG9lcyBub3QgZW1pdCBcInBhZ2VzaG93XCJcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8vIHB1YmxpY1xuXG4gIGlzUHJvZmlsZUVuYWJsZWQoKXsgcmV0dXJuIHRoaXMuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShQSFhfTFZfUFJPRklMRSkgPT09IFwidHJ1ZVwiIH1cblxuICBpc0RlYnVnRW5hYmxlZCgpeyByZXR1cm4gdGhpcy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFBIWF9MVl9ERUJVRykgPT09IFwidHJ1ZVwiIH1cblxuICBpc0RlYnVnRGlzYWJsZWQoKXsgcmV0dXJuIHRoaXMuc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShQSFhfTFZfREVCVUcpID09PSBcImZhbHNlXCIgfVxuXG4gIGVuYWJsZURlYnVnKCl7IHRoaXMuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShQSFhfTFZfREVCVUcsIFwidHJ1ZVwiKSB9XG5cbiAgZW5hYmxlUHJvZmlsaW5nKCl7IHRoaXMuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShQSFhfTFZfUFJPRklMRSwgXCJ0cnVlXCIpIH1cblxuICBkaXNhYmxlRGVidWcoKXsgdGhpcy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFBIWF9MVl9ERUJVRywgXCJmYWxzZVwiKSB9XG5cbiAgZGlzYWJsZVByb2ZpbGluZygpeyB0aGlzLnNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oUEhYX0xWX1BST0ZJTEUpIH1cblxuICBlbmFibGVMYXRlbmN5U2ltKHVwcGVyQm91bmRNcyl7XG4gICAgdGhpcy5lbmFibGVEZWJ1ZygpXG4gICAgY29uc29sZS5sb2coXCJsYXRlbmN5IHNpbXVsYXRvciBlbmFibGVkIGZvciB0aGUgZHVyYXRpb24gb2YgdGhpcyBicm93c2VyIHNlc3Npb24uIENhbGwgZGlzYWJsZUxhdGVuY3lTaW0oKSB0byBkaXNhYmxlXCIpXG4gICAgdGhpcy5zZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFBIWF9MVl9MQVRFTkNZX1NJTSwgdXBwZXJCb3VuZE1zKVxuICB9XG5cbiAgZGlzYWJsZUxhdGVuY3lTaW0oKXsgdGhpcy5zZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKFBIWF9MVl9MQVRFTkNZX1NJTSkgfVxuXG4gIGdldExhdGVuY3lTaW0oKXtcbiAgICBsZXQgc3RyID0gdGhpcy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFBIWF9MVl9MQVRFTkNZX1NJTSlcbiAgICByZXR1cm4gc3RyID8gcGFyc2VJbnQoc3RyKSA6IG51bGxcbiAgfVxuXG4gIGdldFNvY2tldCgpeyByZXR1cm4gdGhpcy5zb2NrZXQgfVxuXG4gIGNvbm5lY3QoKXtcbiAgICAvLyBlbmFibGUgZGVidWcgYnkgZGVmYXVsdCBpZiBvbiBsb2NhbGhvc3QgYW5kIG5vdCBleHBsaWNpdGx5IGRpc2FibGVkXG4gICAgaWYod2luZG93LmxvY2F0aW9uLmhvc3RuYW1lID09PSBcImxvY2FsaG9zdFwiICYmICF0aGlzLmlzRGVidWdEaXNhYmxlZCgpKXsgdGhpcy5lbmFibGVEZWJ1ZygpIH1cbiAgICBsZXQgZG9Db25uZWN0ID0gKCkgPT4ge1xuICAgICAgaWYodGhpcy5qb2luUm9vdFZpZXdzKCkpe1xuICAgICAgICB0aGlzLmJpbmRUb3BMZXZlbEV2ZW50cygpXG4gICAgICAgIHRoaXMuc29ja2V0LmNvbm5lY3QoKVxuICAgICAgfSBlbHNlIGlmKHRoaXMubWFpbil7XG4gICAgICAgIHRoaXMuc29ja2V0LmNvbm5lY3QoKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5iaW5kVG9wTGV2ZWxFdmVudHMoe2RlYWQ6IHRydWV9KVxuICAgICAgfVxuICAgICAgdGhpcy5qb2luRGVhZFZpZXcoKVxuICAgIH1cbiAgICBpZihbXCJjb21wbGV0ZVwiLCBcImxvYWRlZFwiLCBcImludGVyYWN0aXZlXCJdLmluZGV4T2YoZG9jdW1lbnQucmVhZHlTdGF0ZSkgPj0gMCl7XG4gICAgICBkb0Nvbm5lY3QoKVxuICAgIH0gZWxzZSB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKSA9PiBkb0Nvbm5lY3QoKSlcbiAgICB9XG4gIH1cblxuICBkaXNjb25uZWN0KGNhbGxiYWNrKXtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5yZWxvYWRXaXRoSml0dGVyVGltZXIpXG4gICAgdGhpcy5zb2NrZXQuZGlzY29ubmVjdChjYWxsYmFjaylcbiAgfVxuXG4gIHJlcGxhY2VUcmFuc3BvcnQodHJhbnNwb3J0KXtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5yZWxvYWRXaXRoSml0dGVyVGltZXIpXG4gICAgdGhpcy5zb2NrZXQucmVwbGFjZVRyYW5zcG9ydCh0cmFuc3BvcnQpXG4gICAgdGhpcy5jb25uZWN0KClcbiAgfVxuXG4gIGV4ZWNKUyhlbCwgZW5jb2RlZEpTLCBldmVudFR5cGUgPSBudWxsKXtcbiAgICB0aGlzLm93bmVyKGVsLCB2aWV3ID0+IEpTLmV4ZWMoZXZlbnRUeXBlLCBlbmNvZGVkSlMsIHZpZXcsIGVsKSlcbiAgfVxuXG4gIC8vIHByaXZhdGVcblxuICB1bmxvYWQoKXtcbiAgICBpZih0aGlzLnVubG9hZGVkKXsgcmV0dXJuIH1cbiAgICBpZih0aGlzLm1haW4gJiYgdGhpcy5pc0Nvbm5lY3RlZCgpKXsgdGhpcy5sb2codGhpcy5tYWluLCBcInNvY2tldFwiLCAoKSA9PiBbXCJkaXNjb25uZWN0IGZvciBwYWdlIG5hdlwiXSkgfVxuICAgIHRoaXMudW5sb2FkZWQgPSB0cnVlXG4gICAgdGhpcy5kZXN0cm95QWxsVmlld3MoKVxuICAgIHRoaXMuZGlzY29ubmVjdCgpXG4gIH1cblxuICB0cmlnZ2VyRE9NKGtpbmQsIGFyZ3MpeyB0aGlzLmRvbUNhbGxiYWNrc1traW5kXSguLi5hcmdzKSB9XG5cbiAgdGltZShuYW1lLCBmdW5jKXtcbiAgICBpZighdGhpcy5pc1Byb2ZpbGVFbmFibGVkKCkgfHwgIWNvbnNvbGUudGltZSl7IHJldHVybiBmdW5jKCkgfVxuICAgIGNvbnNvbGUudGltZShuYW1lKVxuICAgIGxldCByZXN1bHQgPSBmdW5jKClcbiAgICBjb25zb2xlLnRpbWVFbmQobmFtZSlcbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBsb2codmlldywga2luZCwgbXNnQ2FsbGJhY2spe1xuICAgIGlmKHRoaXMudmlld0xvZ2dlcil7XG4gICAgICBsZXQgW21zZywgb2JqXSA9IG1zZ0NhbGxiYWNrKClcbiAgICAgIHRoaXMudmlld0xvZ2dlcih2aWV3LCBraW5kLCBtc2csIG9iailcbiAgICB9IGVsc2UgaWYodGhpcy5pc0RlYnVnRW5hYmxlZCgpKXtcbiAgICAgIGxldCBbbXNnLCBvYmpdID0gbXNnQ2FsbGJhY2soKVxuICAgICAgZGVidWcodmlldywga2luZCwgbXNnLCBvYmopXG4gICAgfVxuICB9XG5cbiAgcmVxdWVzdERPTVVwZGF0ZShjYWxsYmFjayl7XG4gICAgdGhpcy50cmFuc2l0aW9ucy5hZnRlcihjYWxsYmFjaylcbiAgfVxuXG4gIHRyYW5zaXRpb24odGltZSwgb25TdGFydCwgb25Eb25lID0gZnVuY3Rpb24oKXt9KXtcbiAgICB0aGlzLnRyYW5zaXRpb25zLmFkZFRyYW5zaXRpb24odGltZSwgb25TdGFydCwgb25Eb25lKVxuICB9XG5cbiAgb25DaGFubmVsKGNoYW5uZWwsIGV2ZW50LCBjYil7XG4gICAgY2hhbm5lbC5vbihldmVudCwgZGF0YSA9PiB7XG4gICAgICBsZXQgbGF0ZW5jeSA9IHRoaXMuZ2V0TGF0ZW5jeVNpbSgpXG4gICAgICBpZighbGF0ZW5jeSl7XG4gICAgICAgIGNiKGRhdGEpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IGNiKGRhdGEpLCBsYXRlbmN5KVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICB3cmFwUHVzaCh2aWV3LCBvcHRzLCBwdXNoKXtcbiAgICBsZXQgbGF0ZW5jeSA9IHRoaXMuZ2V0TGF0ZW5jeVNpbSgpXG4gICAgbGV0IG9sZEpvaW5Db3VudCA9IHZpZXcuam9pbkNvdW50XG4gICAgaWYoIWxhdGVuY3kpe1xuICAgICAgaWYodGhpcy5pc0Nvbm5lY3RlZCgpICYmIG9wdHMudGltZW91dCl7XG4gICAgICAgIHJldHVybiBwdXNoKCkucmVjZWl2ZShcInRpbWVvdXRcIiwgKCkgPT4ge1xuICAgICAgICAgIGlmKHZpZXcuam9pbkNvdW50ID09PSBvbGRKb2luQ291bnQgJiYgIXZpZXcuaXNEZXN0cm95ZWQoKSl7XG4gICAgICAgICAgICB0aGlzLnJlbG9hZFdpdGhKaXR0ZXIodmlldywgKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmxvZyh2aWV3LCBcInRpbWVvdXRcIiwgKCkgPT4gW1wicmVjZWl2ZWQgdGltZW91dCB3aGlsZSBjb21tdW5pY2F0aW5nIHdpdGggc2VydmVyLiBGYWxsaW5nIGJhY2sgdG8gaGFyZCByZWZyZXNoIGZvciByZWNvdmVyeVwiXSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHB1c2goKVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBmYWtlUHVzaCA9IHtcbiAgICAgIHJlY2VpdmVzOiBbXSxcbiAgICAgIHJlY2VpdmUoa2luZCwgY2IpeyB0aGlzLnJlY2VpdmVzLnB1c2goW2tpbmQsIGNiXSkgfVxuICAgIH1cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmKHZpZXcuaXNEZXN0cm95ZWQoKSl7IHJldHVybiB9XG4gICAgICBmYWtlUHVzaC5yZWNlaXZlcy5yZWR1Y2UoKGFjYywgW2tpbmQsIGNiXSkgPT4gYWNjLnJlY2VpdmUoa2luZCwgY2IpLCBwdXNoKCkpXG4gICAgfSwgbGF0ZW5jeSlcbiAgICByZXR1cm4gZmFrZVB1c2hcbiAgfVxuXG4gIHJlbG9hZFdpdGhKaXR0ZXIodmlldywgbG9nKXtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5yZWxvYWRXaXRoSml0dGVyVGltZXIpXG4gICAgdGhpcy5kaXNjb25uZWN0KClcbiAgICBsZXQgbWluTXMgPSB0aGlzLnJlbG9hZEppdHRlck1pblxuICAgIGxldCBtYXhNcyA9IHRoaXMucmVsb2FkSml0dGVyTWF4XG4gICAgbGV0IGFmdGVyTXMgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4TXMgLSBtaW5NcyArIDEpKSArIG1pbk1zXG4gICAgbGV0IHRyaWVzID0gQnJvd3Nlci51cGRhdGVMb2NhbCh0aGlzLmxvY2FsU3RvcmFnZSwgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLCBDT05TRUNVVElWRV9SRUxPQURTLCAwLCBjb3VudCA9PiBjb3VudCArIDEpXG4gICAgaWYodHJpZXMgPiB0aGlzLm1heFJlbG9hZHMpe1xuICAgICAgYWZ0ZXJNcyA9IHRoaXMuZmFpbHNhZmVKaXR0ZXJcbiAgICB9XG4gICAgdGhpcy5yZWxvYWRXaXRoSml0dGVyVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIC8vIGlmIHZpZXcgaGFzIHJlY292ZXJlZCwgc3VjaCBhcyB0cmFuc3BvcnQgcmVwbGFjZWQsIHRoZW4gY2FuY2VsXG4gICAgICBpZih2aWV3LmlzRGVzdHJveWVkKCkgfHwgdmlldy5pc0Nvbm5lY3RlZCgpKXsgcmV0dXJuIH1cbiAgICAgIHZpZXcuZGVzdHJveSgpXG4gICAgICBsb2cgPyBsb2coKSA6IHRoaXMubG9nKHZpZXcsIFwiam9pblwiLCAoKSA9PiBbYGVuY291bnRlcmVkICR7dHJpZXN9IGNvbnNlY3V0aXZlIHJlbG9hZHNgXSlcbiAgICAgIGlmKHRyaWVzID4gdGhpcy5tYXhSZWxvYWRzKXtcbiAgICAgICAgdGhpcy5sb2codmlldywgXCJqb2luXCIsICgpID0+IFtgZXhjZWVkZWQgJHt0aGlzLm1heFJlbG9hZHN9IGNvbnNlY3V0aXZlIHJlbG9hZHMuIEVudGVyaW5nIGZhaWxzYWZlIG1vZGVgXSlcbiAgICAgIH1cbiAgICAgIGlmKHRoaXMuaGFzUGVuZGluZ0xpbmsoKSl7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IHRoaXMucGVuZGluZ0xpbmtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKVxuICAgICAgfVxuICAgIH0sIGFmdGVyTXMpXG4gIH1cblxuICBnZXRIb29rQ2FsbGJhY2tzKG5hbWUpe1xuICAgIHJldHVybiBuYW1lICYmIG5hbWUuc3RhcnRzV2l0aChcIlBob2VuaXguXCIpID8gSG9va3NbbmFtZS5zcGxpdChcIi5cIilbMV1dIDogdGhpcy5ob29rc1tuYW1lXVxuICB9XG5cbiAgaXNVbmxvYWRlZCgpeyByZXR1cm4gdGhpcy51bmxvYWRlZCB9XG5cbiAgaXNDb25uZWN0ZWQoKXsgcmV0dXJuIHRoaXMuc29ja2V0LmlzQ29ubmVjdGVkKCkgfVxuXG4gIGdldEJpbmRpbmdQcmVmaXgoKXsgcmV0dXJuIHRoaXMuYmluZGluZ1ByZWZpeCB9XG5cbiAgYmluZGluZyhraW5kKXsgcmV0dXJuIGAke3RoaXMuZ2V0QmluZGluZ1ByZWZpeCgpfSR7a2luZH1gIH1cblxuICBjaGFubmVsKHRvcGljLCBwYXJhbXMpeyByZXR1cm4gdGhpcy5zb2NrZXQuY2hhbm5lbCh0b3BpYywgcGFyYW1zKSB9XG5cbiAgam9pbkRlYWRWaWV3KCl7XG4gICAgbGV0IGJvZHkgPSBkb2N1bWVudC5ib2R5XG4gICAgaWYoYm9keSAmJiAhdGhpcy5pc1BoeFZpZXcoYm9keSkgJiYgIXRoaXMuaXNQaHhWaWV3KGRvY3VtZW50LmZpcnN0RWxlbWVudENoaWxkKSl7XG4gICAgICBsZXQgdmlldyA9IHRoaXMubmV3Um9vdFZpZXcoYm9keSlcbiAgICAgIHZpZXcuc2V0SHJlZih0aGlzLmdldEhyZWYoKSlcbiAgICAgIHZpZXcuam9pbkRlYWQoKVxuICAgICAgaWYoIXRoaXMubWFpbil7IHRoaXMubWFpbiA9IHZpZXcgfVxuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB2aWV3LmV4ZWNOZXdNb3VudGVkKCkpXG4gICAgfVxuICB9XG5cbiAgam9pblJvb3RWaWV3cygpe1xuICAgIGxldCByb290c0ZvdW5kID0gZmFsc2VcbiAgICBET00uYWxsKGRvY3VtZW50LCBgJHtQSFhfVklFV19TRUxFQ1RPUn06bm90KFske1BIWF9QQVJFTlRfSUR9XSlgLCByb290RWwgPT4ge1xuICAgICAgaWYoIXRoaXMuZ2V0Um9vdEJ5SWQocm9vdEVsLmlkKSl7XG4gICAgICAgIGxldCB2aWV3ID0gdGhpcy5uZXdSb290Vmlldyhyb290RWwpXG4gICAgICAgIHZpZXcuc2V0SHJlZih0aGlzLmdldEhyZWYoKSlcbiAgICAgICAgdmlldy5qb2luKClcbiAgICAgICAgaWYocm9vdEVsLmhhc0F0dHJpYnV0ZShQSFhfTUFJTikpeyB0aGlzLm1haW4gPSB2aWV3IH1cbiAgICAgIH1cbiAgICAgIHJvb3RzRm91bmQgPSB0cnVlXG4gICAgfSlcbiAgICByZXR1cm4gcm9vdHNGb3VuZFxuICB9XG5cbiAgcmVkaXJlY3QodG8sIGZsYXNoKXtcbiAgICB0aGlzLnVubG9hZCgpXG4gICAgQnJvd3Nlci5yZWRpcmVjdCh0bywgZmxhc2gpXG4gIH1cblxuICByZXBsYWNlTWFpbihocmVmLCBmbGFzaCwgY2FsbGJhY2sgPSBudWxsLCBsaW5rUmVmID0gdGhpcy5zZXRQZW5kaW5nTGluayhocmVmKSl7XG4gICAgbGV0IGxpdmVSZWZlcmVyID0gdGhpcy5jdXJyZW50TG9jYXRpb24uaHJlZlxuICAgIHRoaXMub3V0Z29pbmdNYWluRWwgPSB0aGlzLm91dGdvaW5nTWFpbkVsIHx8IHRoaXMubWFpbi5lbFxuICAgIGxldCBuZXdNYWluRWwgPSBET00uY2xvbmVOb2RlKHRoaXMub3V0Z29pbmdNYWluRWwsIFwiXCIpXG4gICAgdGhpcy5tYWluLnNob3dMb2FkZXIodGhpcy5sb2FkZXJUaW1lb3V0KVxuICAgIHRoaXMubWFpbi5kZXN0cm95KClcblxuICAgIHRoaXMubWFpbiA9IHRoaXMubmV3Um9vdFZpZXcobmV3TWFpbkVsLCBmbGFzaCwgbGl2ZVJlZmVyZXIpXG4gICAgdGhpcy5tYWluLnNldFJlZGlyZWN0KGhyZWYpXG4gICAgdGhpcy50cmFuc2l0aW9uUmVtb3ZlcygpXG4gICAgdGhpcy5tYWluLmpvaW4oKGpvaW5Db3VudCwgb25Eb25lKSA9PiB7XG4gICAgICBpZihqb2luQ291bnQgPT09IDEgJiYgdGhpcy5jb21taXRQZW5kaW5nTGluayhsaW5rUmVmKSl7XG4gICAgICAgIHRoaXMucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiB7XG4gICAgICAgICAgRE9NLmZpbmRQaHhTdGlja3koZG9jdW1lbnQpLmZvckVhY2goZWwgPT4gbmV3TWFpbkVsLmFwcGVuZENoaWxkKGVsKSlcbiAgICAgICAgICB0aGlzLm91dGdvaW5nTWFpbkVsLnJlcGxhY2VXaXRoKG5ld01haW5FbClcbiAgICAgICAgICB0aGlzLm91dGdvaW5nTWFpbkVsID0gbnVsbFxuICAgICAgICAgIGNhbGxiYWNrICYmIHJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjaylcbiAgICAgICAgICBvbkRvbmUoKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICB0cmFuc2l0aW9uUmVtb3ZlcyhlbGVtZW50cyl7XG4gICAgbGV0IHJlbW92ZUF0dHIgPSB0aGlzLmJpbmRpbmcoXCJyZW1vdmVcIilcbiAgICBlbGVtZW50cyA9IGVsZW1lbnRzIHx8IERPTS5hbGwoZG9jdW1lbnQsIGBbJHtyZW1vdmVBdHRyfV1gKVxuICAgIGVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xuICAgICAgaWYoZG9jdW1lbnQuYm9keS5jb250YWlucyhlbCkpeyAvLyBza2lwIGNoaWxkcmVuIGFscmVhZHkgcmVtb3ZlZFxuICAgICAgICB0aGlzLmV4ZWNKUyhlbCwgZWwuZ2V0QXR0cmlidXRlKHJlbW92ZUF0dHIpLCBcInJlbW92ZVwiKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBpc1BoeFZpZXcoZWwpeyByZXR1cm4gZWwuZ2V0QXR0cmlidXRlICYmIGVsLmdldEF0dHJpYnV0ZShQSFhfU0VTU0lPTikgIT09IG51bGwgfVxuXG4gIG5ld1Jvb3RWaWV3KGVsLCBmbGFzaCwgbGl2ZVJlZmVyZXIpe1xuICAgIGxldCB2aWV3ID0gbmV3IFZpZXcoZWwsIHRoaXMsIG51bGwsIGZsYXNoLCBsaXZlUmVmZXJlcilcbiAgICB0aGlzLnJvb3RzW3ZpZXcuaWRdID0gdmlld1xuICAgIHJldHVybiB2aWV3XG4gIH1cblxuICBvd25lcihjaGlsZEVsLCBjYWxsYmFjayl7XG4gICAgbGV0IHZpZXcgPSBtYXliZShjaGlsZEVsLmNsb3Nlc3QoUEhYX1ZJRVdfU0VMRUNUT1IpLCBlbCA9PiB0aGlzLmdldFZpZXdCeUVsKGVsKSkgfHwgdGhpcy5tYWluXG4gICAgaWYodmlldyl7IGNhbGxiYWNrKHZpZXcpIH1cbiAgfVxuXG4gIHdpdGhpbk93bmVycyhjaGlsZEVsLCBjYWxsYmFjayl7XG4gICAgdGhpcy5vd25lcihjaGlsZEVsLCB2aWV3ID0+IGNhbGxiYWNrKHZpZXcsIGNoaWxkRWwpKVxuICB9XG5cbiAgZ2V0Vmlld0J5RWwoZWwpe1xuICAgIGxldCByb290SWQgPSBlbC5nZXRBdHRyaWJ1dGUoUEhYX1JPT1RfSUQpXG4gICAgcmV0dXJuIG1heWJlKHRoaXMuZ2V0Um9vdEJ5SWQocm9vdElkKSwgcm9vdCA9PiByb290LmdldERlc2NlbmRlbnRCeUVsKGVsKSlcbiAgfVxuXG4gIGdldFJvb3RCeUlkKGlkKXsgcmV0dXJuIHRoaXMucm9vdHNbaWRdIH1cblxuICBkZXN0cm95QWxsVmlld3MoKXtcbiAgICBmb3IobGV0IGlkIGluIHRoaXMucm9vdHMpe1xuICAgICAgdGhpcy5yb290c1tpZF0uZGVzdHJveSgpXG4gICAgICBkZWxldGUgdGhpcy5yb290c1tpZF1cbiAgICB9XG4gICAgdGhpcy5tYWluID0gbnVsbFxuICB9XG5cbiAgZGVzdHJveVZpZXdCeUVsKGVsKXtcbiAgICBsZXQgcm9vdCA9IHRoaXMuZ2V0Um9vdEJ5SWQoZWwuZ2V0QXR0cmlidXRlKFBIWF9ST09UX0lEKSlcbiAgICBpZihyb290ICYmIHJvb3QuaWQgPT09IGVsLmlkKXtcbiAgICAgIHJvb3QuZGVzdHJveSgpXG4gICAgICBkZWxldGUgdGhpcy5yb290c1tyb290LmlkXVxuICAgIH0gZWxzZSBpZihyb290KXtcbiAgICAgIHJvb3QuZGVzdHJveURlc2NlbmRlbnQoZWwuaWQpXG4gICAgfVxuICB9XG5cbiAgc2V0QWN0aXZlRWxlbWVudCh0YXJnZXQpe1xuICAgIGlmKHRoaXMuYWN0aXZlRWxlbWVudCA9PT0gdGFyZ2V0KXsgcmV0dXJuIH1cbiAgICB0aGlzLmFjdGl2ZUVsZW1lbnQgPSB0YXJnZXRcbiAgICBsZXQgY2FuY2VsID0gKCkgPT4ge1xuICAgICAgaWYodGFyZ2V0ID09PSB0aGlzLmFjdGl2ZUVsZW1lbnQpeyB0aGlzLmFjdGl2ZUVsZW1lbnQgPSBudWxsIH1cbiAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzKVxuICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCB0aGlzKVxuICAgIH1cbiAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgY2FuY2VsKVxuICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgY2FuY2VsKVxuICB9XG5cbiAgZ2V0QWN0aXZlRWxlbWVudCgpe1xuICAgIGlmKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGRvY3VtZW50LmJvZHkpe1xuICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlRWxlbWVudCB8fCBkb2N1bWVudC5hY3RpdmVFbGVtZW50XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgY2FuIGJlIG51bGwgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTFcbiAgICAgIHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50IHx8IGRvY3VtZW50LmJvZHlcbiAgICB9XG4gIH1cblxuICBkcm9wQWN0aXZlRWxlbWVudCh2aWV3KXtcbiAgICBpZih0aGlzLnByZXZBY3RpdmUgJiYgdmlldy5vd25zRWxlbWVudCh0aGlzLnByZXZBY3RpdmUpKXtcbiAgICAgIHRoaXMucHJldkFjdGl2ZSA9IG51bGxcbiAgICB9XG4gIH1cblxuICByZXN0b3JlUHJldmlvdXNseUFjdGl2ZUZvY3VzKCl7XG4gICAgaWYodGhpcy5wcmV2QWN0aXZlICYmIHRoaXMucHJldkFjdGl2ZSAhPT0gZG9jdW1lbnQuYm9keSl7XG4gICAgICB0aGlzLnByZXZBY3RpdmUuZm9jdXMoKVxuICAgIH1cbiAgfVxuXG4gIGJsdXJBY3RpdmVFbGVtZW50KCl7XG4gICAgdGhpcy5wcmV2QWN0aXZlID0gdGhpcy5nZXRBY3RpdmVFbGVtZW50KClcbiAgICBpZih0aGlzLnByZXZBY3RpdmUgIT09IGRvY3VtZW50LmJvZHkpeyB0aGlzLnByZXZBY3RpdmUuYmx1cigpIH1cbiAgfVxuXG4gIGJpbmRUb3BMZXZlbEV2ZW50cyh7ZGVhZH0gPSB7fSl7XG4gICAgaWYodGhpcy5ib3VuZFRvcExldmVsRXZlbnRzKXsgcmV0dXJuIH1cblxuICAgIHRoaXMuYm91bmRUb3BMZXZlbEV2ZW50cyA9IHRydWVcbiAgICAvLyBlbnRlciBmYWlsc2FmZSByZWxvYWQgaWYgc2VydmVyIGhhcyBnb25lIGF3YXkgaW50ZW50aW9uYWxseSwgc3VjaCBhcyBcImRpc2Nvbm5lY3RcIiBicm9hZGNhc3RcbiAgICB0aGlzLnNvY2tldC5vbkNsb3NlKGV2ZW50ID0+IHtcbiAgICAgIC8vIHVubG9hZCB3aGVuIG5hdmlnYXRpbmcgaHJlZiBvciBmb3JtIHN1Ym1pdCAoc3VjaCBhcyBmb3IgZmlyZWZveClcbiAgICAgIGlmKGV2ZW50ICYmIGV2ZW50LmNvZGUgPT09IDEwMDEpeyByZXR1cm4gdGhpcy51bmxvYWQoKSB9XG4gICAgICAvLyBmYWlsc2FmZSByZWxvYWQgaWYgbm9ybWFsIGNsb3N1cmUgYW5kIHdlIHN0aWxsIGhhdmUgYSBtYWluIExWXG4gICAgICBpZihldmVudCAmJiBldmVudC5jb2RlID09PSAxMDAwICYmIHRoaXMubWFpbil7IHJldHVybiB0aGlzLnJlbG9hZFdpdGhKaXR0ZXIodGhpcy5tYWluKSB9XG4gICAgfSlcbiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoKXsgfSkgLy8gZW5zdXJlIGFsbCBjbGljayBldmVudHMgYnViYmxlIGZvciBtb2JpbGUgU2FmYXJpXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlc2hvd1wiLCBlID0+IHtcbiAgICAgIGlmKGUucGVyc2lzdGVkKXsgLy8gcmVsb2FkIHBhZ2UgaWYgYmVpbmcgcmVzdG9yZWQgZnJvbSBiYWNrL2ZvcndhcmQgY2FjaGVcbiAgICAgICAgdGhpcy5nZXRTb2NrZXQoKS5kaXNjb25uZWN0KClcbiAgICAgICAgdGhpcy53aXRoUGFnZUxvYWRpbmcoe3RvOiB3aW5kb3cubG9jYXRpb24uaHJlZiwga2luZDogXCJyZWRpcmVjdFwifSlcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpXG4gICAgICB9XG4gICAgfSwgdHJ1ZSlcbiAgICBpZighZGVhZCl7IHRoaXMuYmluZE5hdigpIH1cbiAgICB0aGlzLmJpbmRDbGlja3MoKVxuICAgIGlmKCFkZWFkKXsgdGhpcy5iaW5kRm9ybXMoKSB9XG4gICAgdGhpcy5iaW5kKHtrZXl1cDogXCJrZXl1cFwiLCBrZXlkb3duOiBcImtleWRvd25cIn0sIChlLCB0eXBlLCB2aWV3LCB0YXJnZXRFbCwgcGh4RXZlbnQsIGV2ZW50VGFyZ2V0KSA9PiB7XG4gICAgICBsZXQgbWF0Y2hLZXkgPSB0YXJnZXRFbC5nZXRBdHRyaWJ1dGUodGhpcy5iaW5kaW5nKFBIWF9LRVkpKVxuICAgICAgbGV0IHByZXNzZWRLZXkgPSBlLmtleSAmJiBlLmtleS50b0xvd2VyQ2FzZSgpIC8vIGNocm9tZSBjbGlja2VkIGF1dG9jb21wbGV0ZXMgc2VuZCBhIGtleWRvd24gd2l0aG91dCBrZXlcbiAgICAgIGlmKG1hdGNoS2V5ICYmIG1hdGNoS2V5LnRvTG93ZXJDYXNlKCkgIT09IHByZXNzZWRLZXkpeyByZXR1cm4gfVxuXG4gICAgICBsZXQgZGF0YSA9IHtrZXk6IGUua2V5LCAuLi50aGlzLmV2ZW50TWV0YSh0eXBlLCBlLCB0YXJnZXRFbCl9XG4gICAgICBKUy5leGVjKHR5cGUsIHBoeEV2ZW50LCB2aWV3LCB0YXJnZXRFbCwgW1wicHVzaFwiLCB7ZGF0YX1dKVxuICAgIH0pXG4gICAgdGhpcy5iaW5kKHtibHVyOiBcImZvY3Vzb3V0XCIsIGZvY3VzOiBcImZvY3VzaW5cIn0sIChlLCB0eXBlLCB2aWV3LCB0YXJnZXRFbCwgcGh4RXZlbnQsIGV2ZW50VGFyZ2V0KSA9PiB7XG4gICAgICBpZighZXZlbnRUYXJnZXQpe1xuICAgICAgICBsZXQgZGF0YSA9IHtrZXk6IGUua2V5LCAuLi50aGlzLmV2ZW50TWV0YSh0eXBlLCBlLCB0YXJnZXRFbCl9XG4gICAgICAgIEpTLmV4ZWModHlwZSwgcGh4RXZlbnQsIHZpZXcsIHRhcmdldEVsLCBbXCJwdXNoXCIsIHtkYXRhfV0pXG4gICAgICB9XG4gICAgfSlcbiAgICB0aGlzLmJpbmQoe2JsdXI6IFwiYmx1clwiLCBmb2N1czogXCJmb2N1c1wifSwgKGUsIHR5cGUsIHZpZXcsIHRhcmdldEVsLCB0YXJnZXRDdHgsIHBoeEV2ZW50LCBwaHhUYXJnZXQpID0+IHtcbiAgICAgIC8vIGJsdXIgYW5kIGZvY3VzIGFyZSB0cmlnZ2VyZWQgb24gZG9jdW1lbnQgYW5kIHdpbmRvdy4gRGlzY2FyZCBvbmUgdG8gYXZvaWQgZHVwc1xuICAgICAgaWYocGh4VGFyZ2V0ID09PSBcIndpbmRvd1wiKXtcbiAgICAgICAgbGV0IGRhdGEgPSB0aGlzLmV2ZW50TWV0YSh0eXBlLCBlLCB0YXJnZXRFbClcbiAgICAgICAgSlMuZXhlYyh0eXBlLCBwaHhFdmVudCwgdmlldywgdGFyZ2V0RWwsIFtcInB1c2hcIiwge2RhdGF9XSlcbiAgICAgIH1cbiAgICB9KVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ292ZXJcIiwgZSA9PiBlLnByZXZlbnREZWZhdWx0KCkpXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJkcm9wXCIsIGUgPT4ge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICBsZXQgZHJvcFRhcmdldElkID0gbWF5YmUoY2xvc2VzdFBoeEJpbmRpbmcoZS50YXJnZXQsIHRoaXMuYmluZGluZyhQSFhfRFJPUF9UQVJHRVQpKSwgdHJ1ZVRhcmdldCA9PiB7XG4gICAgICAgIHJldHVybiB0cnVlVGFyZ2V0LmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoUEhYX0RST1BfVEFSR0VUKSlcbiAgICAgIH0pXG4gICAgICBsZXQgZHJvcFRhcmdldCA9IGRyb3BUYXJnZXRJZCAmJiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChkcm9wVGFyZ2V0SWQpXG4gICAgICBsZXQgZmlsZXMgPSBBcnJheS5mcm9tKGUuZGF0YVRyYW5zZmVyLmZpbGVzIHx8IFtdKVxuICAgICAgaWYoIWRyb3BUYXJnZXQgfHwgZHJvcFRhcmdldC5kaXNhYmxlZCB8fCBmaWxlcy5sZW5ndGggPT09IDAgfHwgIShkcm9wVGFyZ2V0LmZpbGVzIGluc3RhbmNlb2YgRmlsZUxpc3QpKXsgcmV0dXJuIH1cblxuICAgICAgTGl2ZVVwbG9hZGVyLnRyYWNrRmlsZXMoZHJvcFRhcmdldCwgZmlsZXMsIGUuZGF0YVRyYW5zZmVyKVxuICAgICAgZHJvcFRhcmdldC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcImlucHV0XCIsIHtidWJibGVzOiB0cnVlfSkpXG4gICAgfSlcbiAgICB0aGlzLm9uKFBIWF9UUkFDS19VUExPQURTLCBlID0+IHtcbiAgICAgIGxldCB1cGxvYWRUYXJnZXQgPSBlLnRhcmdldFxuICAgICAgaWYoIURPTS5pc1VwbG9hZElucHV0KHVwbG9hZFRhcmdldCkpeyByZXR1cm4gfVxuICAgICAgbGV0IGZpbGVzID0gQXJyYXkuZnJvbShlLmRldGFpbC5maWxlcyB8fCBbXSkuZmlsdGVyKGYgPT4gZiBpbnN0YW5jZW9mIEZpbGUgfHwgZiBpbnN0YW5jZW9mIEJsb2IpXG4gICAgICBMaXZlVXBsb2FkZXIudHJhY2tGaWxlcyh1cGxvYWRUYXJnZXQsIGZpbGVzKVxuICAgICAgdXBsb2FkVGFyZ2V0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiaW5wdXRcIiwge2J1YmJsZXM6IHRydWV9KSlcbiAgICB9KVxuICB9XG5cbiAgZXZlbnRNZXRhKGV2ZW50TmFtZSwgZSwgdGFyZ2V0RWwpe1xuICAgIGxldCBjYWxsYmFjayA9IHRoaXMubWV0YWRhdGFDYWxsYmFja3NbZXZlbnROYW1lXVxuICAgIHJldHVybiBjYWxsYmFjayA/IGNhbGxiYWNrKGUsIHRhcmdldEVsKSA6IHt9XG4gIH1cblxuICBzZXRQZW5kaW5nTGluayhocmVmKXtcbiAgICB0aGlzLmxpbmtSZWYrK1xuICAgIHRoaXMucGVuZGluZ0xpbmsgPSBocmVmXG4gICAgcmV0dXJuIHRoaXMubGlua1JlZlxuICB9XG5cbiAgY29tbWl0UGVuZGluZ0xpbmsobGlua1JlZil7XG4gICAgaWYodGhpcy5saW5rUmVmICE9PSBsaW5rUmVmKXtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhyZWYgPSB0aGlzLnBlbmRpbmdMaW5rXG4gICAgICB0aGlzLnBlbmRpbmdMaW5rID0gbnVsbFxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cblxuICBnZXRIcmVmKCl7IHJldHVybiB0aGlzLmhyZWYgfVxuXG4gIGhhc1BlbmRpbmdMaW5rKCl7IHJldHVybiAhIXRoaXMucGVuZGluZ0xpbmsgfVxuXG4gIGJpbmQoZXZlbnRzLCBjYWxsYmFjayl7XG4gICAgZm9yKGxldCBldmVudCBpbiBldmVudHMpe1xuICAgICAgbGV0IGJyb3dzZXJFdmVudE5hbWUgPSBldmVudHNbZXZlbnRdXG5cbiAgICAgIHRoaXMub24oYnJvd3NlckV2ZW50TmFtZSwgZSA9PiB7XG4gICAgICAgIGxldCBiaW5kaW5nID0gdGhpcy5iaW5kaW5nKGV2ZW50KVxuICAgICAgICBsZXQgd2luZG93QmluZGluZyA9IHRoaXMuYmluZGluZyhgd2luZG93LSR7ZXZlbnR9YClcbiAgICAgICAgbGV0IHRhcmdldFBoeEV2ZW50ID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlICYmIGUudGFyZ2V0LmdldEF0dHJpYnV0ZShiaW5kaW5nKVxuICAgICAgICBpZih0YXJnZXRQaHhFdmVudCl7XG4gICAgICAgICAgdGhpcy5kZWJvdW5jZShlLnRhcmdldCwgZSwgYnJvd3NlckV2ZW50TmFtZSwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53aXRoaW5Pd25lcnMoZS50YXJnZXQsIHZpZXcgPT4ge1xuICAgICAgICAgICAgICBjYWxsYmFjayhlLCBldmVudCwgdmlldywgZS50YXJnZXQsIHRhcmdldFBoeEV2ZW50LCBudWxsKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIERPTS5hbGwoZG9jdW1lbnQsIGBbJHt3aW5kb3dCaW5kaW5nfV1gLCBlbCA9PiB7XG4gICAgICAgICAgICBsZXQgcGh4RXZlbnQgPSBlbC5nZXRBdHRyaWJ1dGUod2luZG93QmluZGluZylcbiAgICAgICAgICAgIHRoaXMuZGVib3VuY2UoZWwsIGUsIGJyb3dzZXJFdmVudE5hbWUsICgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy53aXRoaW5Pd25lcnMoZWwsIHZpZXcgPT4ge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGUsIGV2ZW50LCB2aWV3LCBlbCwgcGh4RXZlbnQsIFwid2luZG93XCIpXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgYmluZENsaWNrcygpe1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZSA9PiB0aGlzLmNsaWNrU3RhcnRlZEF0VGFyZ2V0ID0gZS50YXJnZXQpXG4gICAgdGhpcy5iaW5kQ2xpY2soXCJjbGlja1wiLCBcImNsaWNrXCIsIGZhbHNlKVxuICAgIHRoaXMuYmluZENsaWNrKFwibW91c2Vkb3duXCIsIFwiY2FwdHVyZS1jbGlja1wiLCB0cnVlKVxuICB9XG5cbiAgYmluZENsaWNrKGV2ZW50TmFtZSwgYmluZGluZ05hbWUsIGNhcHR1cmUpe1xuICAgIGxldCBjbGljayA9IHRoaXMuYmluZGluZyhiaW5kaW5nTmFtZSlcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGUgPT4ge1xuICAgICAgbGV0IHRhcmdldCA9IG51bGxcbiAgICAgIGlmKGNhcHR1cmUpe1xuICAgICAgICB0YXJnZXQgPSBlLnRhcmdldC5tYXRjaGVzKGBbJHtjbGlja31dYCkgPyBlLnRhcmdldCA6IGUudGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoYFske2NsaWNrfV1gKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGNsaWNrU3RhcnRlZEF0VGFyZ2V0ID0gdGhpcy5jbGlja1N0YXJ0ZWRBdFRhcmdldCB8fCBlLnRhcmdldFxuICAgICAgICB0YXJnZXQgPSBjbG9zZXN0UGh4QmluZGluZyhjbGlja1N0YXJ0ZWRBdFRhcmdldCwgY2xpY2spXG4gICAgICAgIHRoaXMuZGlzcGF0Y2hDbGlja0F3YXkoZSwgY2xpY2tTdGFydGVkQXRUYXJnZXQpXG4gICAgICAgIHRoaXMuY2xpY2tTdGFydGVkQXRUYXJnZXQgPSBudWxsXG4gICAgICB9XG4gICAgICBsZXQgcGh4RXZlbnQgPSB0YXJnZXQgJiYgdGFyZ2V0LmdldEF0dHJpYnV0ZShjbGljaylcbiAgICAgIGlmKCFwaHhFdmVudCl7XG4gICAgICAgIGxldCBocmVmID0gZS50YXJnZXQgaW5zdGFuY2VvZiBIVE1MQW5jaG9yRWxlbWVudCA/IGUudGFyZ2V0LmdldEF0dHJpYnV0ZShcImhyZWZcIikgOiBudWxsXG4gICAgICAgIGlmKCFjYXB0dXJlICYmIGhyZWYgIT09IG51bGwgJiYgIURPTS53YW50c05ld1RhYihlKSAmJiBET00uaXNOZXdQYWdlSHJlZihocmVmLCB3aW5kb3cubG9jYXRpb24pKXtcbiAgICAgICAgICB0aGlzLnVubG9hZCgpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBpZih0YXJnZXQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIpeyBlLnByZXZlbnREZWZhdWx0KCkgfVxuXG4gICAgICB0aGlzLmRlYm91bmNlKHRhcmdldCwgZSwgXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgIHRoaXMud2l0aGluT3duZXJzKHRhcmdldCwgdmlldyA9PiB7XG4gICAgICAgICAgSlMuZXhlYyhcImNsaWNrXCIsIHBoeEV2ZW50LCB2aWV3LCB0YXJnZXQsIFtcInB1c2hcIiwge2RhdGE6IHRoaXMuZXZlbnRNZXRhKFwiY2xpY2tcIiwgZSwgdGFyZ2V0KX1dKVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9LCBjYXB0dXJlKVxuICB9XG5cbiAgZGlzcGF0Y2hDbGlja0F3YXkoZSwgY2xpY2tTdGFydGVkQXQpe1xuICAgIGxldCBwaHhDbGlja0F3YXkgPSB0aGlzLmJpbmRpbmcoXCJjbGljay1hd2F5XCIpXG4gICAgRE9NLmFsbChkb2N1bWVudCwgYFske3BoeENsaWNrQXdheX1dYCwgZWwgPT4ge1xuICAgICAgaWYoIShlbC5pc1NhbWVOb2RlKGNsaWNrU3RhcnRlZEF0KSB8fCBlbC5jb250YWlucyhjbGlja1N0YXJ0ZWRBdCkpKXtcbiAgICAgICAgdGhpcy53aXRoaW5Pd25lcnMoZS50YXJnZXQsIHZpZXcgPT4ge1xuICAgICAgICAgIGxldCBwaHhFdmVudCA9IGVsLmdldEF0dHJpYnV0ZShwaHhDbGlja0F3YXkpXG4gICAgICAgICAgaWYoSlMuaXNWaXNpYmxlKGVsKSl7XG4gICAgICAgICAgICBKUy5leGVjKFwiY2xpY2tcIiwgcGh4RXZlbnQsIHZpZXcsIGVsLCBbXCJwdXNoXCIsIHtkYXRhOiB0aGlzLmV2ZW50TWV0YShcImNsaWNrXCIsIGUsIGUudGFyZ2V0KX1dKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgYmluZE5hdigpe1xuICAgIGlmKCFCcm93c2VyLmNhblB1c2hTdGF0ZSgpKXsgcmV0dXJuIH1cbiAgICBpZihoaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uKXsgaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwibWFudWFsXCIgfVxuICAgIGxldCBzY3JvbGxUaW1lciA9IG51bGxcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBfZSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQoc2Nyb2xsVGltZXIpXG4gICAgICBzY3JvbGxUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBCcm93c2VyLnVwZGF0ZUN1cnJlbnRTdGF0ZShzdGF0ZSA9PiBPYmplY3QuYXNzaWduKHN0YXRlLCB7c2Nyb2xsOiB3aW5kb3cuc2Nyb2xsWX0pKVxuICAgICAgfSwgMTAwKVxuICAgIH0pXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwb3BzdGF0ZVwiLCBldmVudCA9PiB7XG4gICAgICBpZighdGhpcy5yZWdpc3Rlck5ld0xvY2F0aW9uKHdpbmRvdy5sb2NhdGlvbikpeyByZXR1cm4gfVxuICAgICAgbGV0IHt0eXBlLCBpZCwgcm9vdCwgc2Nyb2xsfSA9IGV2ZW50LnN0YXRlIHx8IHt9XG4gICAgICBsZXQgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmXG5cbiAgICAgIHRoaXMucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiB7XG4gICAgICAgIGlmKHRoaXMubWFpbi5pc0Nvbm5lY3RlZCgpICYmICh0eXBlID09PSBcInBhdGNoXCIgJiYgaWQgPT09IHRoaXMubWFpbi5pZCkpe1xuICAgICAgICAgIHRoaXMubWFpbi5wdXNoTGlua1BhdGNoKGhyZWYsIG51bGwsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubWF5YmVTY3JvbGwoc2Nyb2xsKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5yZXBsYWNlTWFpbihocmVmLCBudWxsLCAoKSA9PiB7XG4gICAgICAgICAgICBpZihyb290KXsgdGhpcy5yZXBsYWNlUm9vdEhpc3RvcnkoKSB9XG4gICAgICAgICAgICB0aGlzLm1heWJlU2Nyb2xsKHNjcm9sbClcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sIGZhbHNlKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZSA9PiB7XG4gICAgICBsZXQgdGFyZ2V0ID0gY2xvc2VzdFBoeEJpbmRpbmcoZS50YXJnZXQsIFBIWF9MSVZFX0xJTkspXG4gICAgICBsZXQgdHlwZSA9IHRhcmdldCAmJiB0YXJnZXQuZ2V0QXR0cmlidXRlKFBIWF9MSVZFX0xJTkspXG4gICAgICBpZighdHlwZSB8fCAhdGhpcy5pc0Nvbm5lY3RlZCgpIHx8ICF0aGlzLm1haW4gfHwgRE9NLndhbnRzTmV3VGFiKGUpKXsgcmV0dXJuIH1cblxuICAgICAgbGV0IGhyZWYgPSB0YXJnZXQuaHJlZlxuICAgICAgbGV0IGxpbmtTdGF0ZSA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoUEhYX0xJTktfU1RBVEUpXG4gICAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCkgLy8gZG8gbm90IGJ1YmJsZSBjbGljayB0byByZWd1bGFyIHBoeC1jbGljayBiaW5kaW5nc1xuICAgICAgaWYodGhpcy5wZW5kaW5nTGluayA9PT0gaHJlZil7IHJldHVybiB9XG5cbiAgICAgIHRoaXMucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiB7XG4gICAgICAgIGlmKHR5cGUgPT09IFwicGF0Y2hcIil7XG4gICAgICAgICAgdGhpcy5wdXNoSGlzdG9yeVBhdGNoKGhyZWYsIGxpbmtTdGF0ZSwgdGFyZ2V0KVxuICAgICAgICB9IGVsc2UgaWYodHlwZSA9PT0gXCJyZWRpcmVjdFwiKXtcbiAgICAgICAgICB0aGlzLmhpc3RvcnlSZWRpcmVjdChocmVmLCBsaW5rU3RhdGUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBleHBlY3RlZCAke1BIWF9MSVZFX0xJTkt9IHRvIGJlIFwicGF0Y2hcIiBvciBcInJlZGlyZWN0XCIsIGdvdDogJHt0eXBlfWApXG4gICAgICAgIH1cbiAgICAgICAgbGV0IHBoeENsaWNrID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJjbGlja1wiKSlcbiAgICAgICAgaWYocGh4Q2xpY2spe1xuICAgICAgICAgIHRoaXMucmVxdWVzdERPTVVwZGF0ZSgoKSA9PiB0aGlzLmV4ZWNKUyh0YXJnZXQsIHBoeENsaWNrLCBcImNsaWNrXCIpKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0sIGZhbHNlKVxuICB9XG5cbiAgbWF5YmVTY3JvbGwoc2Nyb2xsKSB7XG4gICAgaWYodHlwZW9mKHNjcm9sbCkgPT09IFwibnVtYmVyXCIpe1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIHNjcm9sbClcbiAgICAgIH0pIC8vIHRoZSBib2R5IG5lZWRzIHRvIHJlbmRlciBiZWZvcmUgd2Ugc2Nyb2xsLlxuICAgIH1cbiAgfVxuXG4gIGRpc3BhdGNoRXZlbnQoZXZlbnQsIHBheWxvYWQgPSB7fSl7XG4gICAgRE9NLmRpc3BhdGNoRXZlbnQod2luZG93LCBgcGh4OiR7ZXZlbnR9YCwge2RldGFpbDogcGF5bG9hZH0pXG4gIH1cblxuICBkaXNwYXRjaEV2ZW50cyhldmVudHMpe1xuICAgIGV2ZW50cy5mb3JFYWNoKChbZXZlbnQsIHBheWxvYWRdKSA9PiB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQsIHBheWxvYWQpKVxuICB9XG5cbiAgd2l0aFBhZ2VMb2FkaW5nKGluZm8sIGNhbGxiYWNrKXtcbiAgICBET00uZGlzcGF0Y2hFdmVudCh3aW5kb3csIFwicGh4OnBhZ2UtbG9hZGluZy1zdGFydFwiLCB7ZGV0YWlsOiBpbmZvfSlcbiAgICBsZXQgZG9uZSA9ICgpID0+IERPTS5kaXNwYXRjaEV2ZW50KHdpbmRvdywgXCJwaHg6cGFnZS1sb2FkaW5nLXN0b3BcIiwge2RldGFpbDogaW5mb30pXG4gICAgcmV0dXJuIGNhbGxiYWNrID8gY2FsbGJhY2soZG9uZSkgOiBkb25lXG4gIH1cblxuICBwdXNoSGlzdG9yeVBhdGNoKGhyZWYsIGxpbmtTdGF0ZSwgdGFyZ2V0RWwpe1xuICAgIGlmKCF0aGlzLmlzQ29ubmVjdGVkKCkpeyByZXR1cm4gQnJvd3Nlci5yZWRpcmVjdChocmVmKSB9XG5cbiAgICB0aGlzLndpdGhQYWdlTG9hZGluZyh7dG86IGhyZWYsIGtpbmQ6IFwicGF0Y2hcIn0sIGRvbmUgPT4ge1xuICAgICAgdGhpcy5tYWluLnB1c2hMaW5rUGF0Y2goaHJlZiwgdGFyZ2V0RWwsIGxpbmtSZWYgPT4ge1xuICAgICAgICB0aGlzLmhpc3RvcnlQYXRjaChocmVmLCBsaW5rU3RhdGUsIGxpbmtSZWYpXG4gICAgICAgIGRvbmUoKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgaGlzdG9yeVBhdGNoKGhyZWYsIGxpbmtTdGF0ZSwgbGlua1JlZiA9IHRoaXMuc2V0UGVuZGluZ0xpbmsoaHJlZikpe1xuICAgIGlmKCF0aGlzLmNvbW1pdFBlbmRpbmdMaW5rKGxpbmtSZWYpKXsgcmV0dXJuIH1cblxuICAgIEJyb3dzZXIucHVzaFN0YXRlKGxpbmtTdGF0ZSwge3R5cGU6IFwicGF0Y2hcIiwgaWQ6IHRoaXMubWFpbi5pZH0sIGhyZWYpXG4gICAgdGhpcy5yZWdpc3Rlck5ld0xvY2F0aW9uKHdpbmRvdy5sb2NhdGlvbilcbiAgfVxuXG4gIGhpc3RvcnlSZWRpcmVjdChocmVmLCBsaW5rU3RhdGUsIGZsYXNoKXtcbiAgICAvLyBjb252ZXJ0IHRvIGZ1bGwgaHJlZiBpZiBvbmx5IHBhdGggcHJlZml4XG4gICAgaWYoIXRoaXMuaXNDb25uZWN0ZWQoKSl7IHJldHVybiBCcm93c2VyLnJlZGlyZWN0KGhyZWYsIGZsYXNoKSB9XG4gICAgaWYoL15cXC8kfF5cXC9bXlxcL10rLiokLy50ZXN0KGhyZWYpKXtcbiAgICAgIGxldCB7cHJvdG9jb2wsIGhvc3R9ID0gd2luZG93LmxvY2F0aW9uXG4gICAgICBocmVmID0gYCR7cHJvdG9jb2x9Ly8ke2hvc3R9JHtocmVmfWBcbiAgICB9XG4gICAgbGV0IHNjcm9sbCA9IHdpbmRvdy5zY3JvbGxZXG4gICAgdGhpcy53aXRoUGFnZUxvYWRpbmcoe3RvOiBocmVmLCBraW5kOiBcInJlZGlyZWN0XCJ9LCBkb25lID0+IHtcbiAgICAgIHRoaXMucmVwbGFjZU1haW4oaHJlZiwgZmxhc2gsICgpID0+IHtcbiAgICAgICAgQnJvd3Nlci5wdXNoU3RhdGUobGlua1N0YXRlLCB7dHlwZTogXCJyZWRpcmVjdFwiLCBpZDogdGhpcy5tYWluLmlkLCBzY3JvbGw6IHNjcm9sbH0sIGhyZWYpXG4gICAgICAgIHRoaXMucmVnaXN0ZXJOZXdMb2NhdGlvbih3aW5kb3cubG9jYXRpb24pXG4gICAgICAgIGRvbmUoKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgcmVwbGFjZVJvb3RIaXN0b3J5KCl7XG4gICAgQnJvd3Nlci5wdXNoU3RhdGUoXCJyZXBsYWNlXCIsIHtyb290OiB0cnVlLCB0eXBlOiBcInBhdGNoXCIsIGlkOiB0aGlzLm1haW4uaWR9KVxuICB9XG5cbiAgcmVnaXN0ZXJOZXdMb2NhdGlvbihuZXdMb2NhdGlvbil7XG4gICAgbGV0IHtwYXRobmFtZSwgc2VhcmNofSA9IHRoaXMuY3VycmVudExvY2F0aW9uXG4gICAgaWYocGF0aG5hbWUgKyBzZWFyY2ggPT09IG5ld0xvY2F0aW9uLnBhdGhuYW1lICsgbmV3TG9jYXRpb24uc2VhcmNoKXtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnJlbnRMb2NhdGlvbiA9IGNsb25lKG5ld0xvY2F0aW9uKVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cblxuICBiaW5kRm9ybXMoKXtcbiAgICBsZXQgaXRlcmF0aW9ucyA9IDBcbiAgICBsZXQgZXh0ZXJuYWxGb3JtU3VibWl0dGVkID0gZmFsc2VcblxuICAgIC8vIGRpc2FibGUgZm9ybXMgb24gc3VibWl0IHRoYXQgdHJhY2sgcGh4LWNoYW5nZSBidXQgcGVyZm9ybSBleHRlcm5hbCBzdWJtaXRcbiAgICB0aGlzLm9uKFwic3VibWl0XCIsIGUgPT4ge1xuICAgICAgbGV0IHBoeFN1Ym1pdCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSh0aGlzLmJpbmRpbmcoXCJzdWJtaXRcIikpXG4gICAgICBsZXQgcGh4Q2hhbmdlID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhcImNoYW5nZVwiKSlcbiAgICAgIGlmKCFleHRlcm5hbEZvcm1TdWJtaXR0ZWQgJiYgcGh4Q2hhbmdlICYmICFwaHhTdWJtaXQpe1xuICAgICAgICBleHRlcm5hbEZvcm1TdWJtaXR0ZWQgPSB0cnVlXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICB0aGlzLndpdGhpbk93bmVycyhlLnRhcmdldCwgdmlldyA9PiB7XG4gICAgICAgICAgdmlldy5kaXNhYmxlRm9ybShlLnRhcmdldClcbiAgICAgICAgICAvLyBzYWZhcmkgbmVlZHMgbmV4dCB0aWNrXG4gICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICBpZihET00uaXNVbmxvYWRhYmxlRm9ybVN1Ym1pdChlKSl7IHRoaXMudW5sb2FkKCkgfVxuICAgICAgICAgICAgZS50YXJnZXQuc3VibWl0KClcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0sIHRydWUpXG5cbiAgICB0aGlzLm9uKFwic3VibWl0XCIsIGUgPT4ge1xuICAgICAgbGV0IHBoeEV2ZW50ID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKHRoaXMuYmluZGluZyhcInN1Ym1pdFwiKSlcbiAgICAgIGlmKCFwaHhFdmVudCl7XG4gICAgICAgIGlmKERPTS5pc1VubG9hZGFibGVGb3JtU3VibWl0KGUpKXsgdGhpcy51bmxvYWQoKSB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICBlLnRhcmdldC5kaXNhYmxlZCA9IHRydWVcbiAgICAgIHRoaXMud2l0aGluT3duZXJzKGUudGFyZ2V0LCB2aWV3ID0+IHtcbiAgICAgICAgSlMuZXhlYyhcInN1Ym1pdFwiLCBwaHhFdmVudCwgdmlldywgZS50YXJnZXQsIFtcInB1c2hcIiwge3N1Ym1pdHRlcjogZS5zdWJtaXR0ZXJ9XSlcbiAgICAgIH0pXG4gICAgfSwgZmFsc2UpXG5cbiAgICBmb3IobGV0IHR5cGUgb2YgW1wiY2hhbmdlXCIsIFwiaW5wdXRcIl0pe1xuICAgICAgdGhpcy5vbih0eXBlLCBlID0+IHtcbiAgICAgICAgbGV0IHBoeENoYW5nZSA9IHRoaXMuYmluZGluZyhcImNoYW5nZVwiKVxuICAgICAgICBsZXQgaW5wdXQgPSBlLnRhcmdldFxuICAgICAgICBsZXQgaW5wdXRFdmVudCA9IGlucHV0LmdldEF0dHJpYnV0ZShwaHhDaGFuZ2UpXG4gICAgICAgIGxldCBmb3JtRXZlbnQgPSBpbnB1dC5mb3JtICYmIGlucHV0LmZvcm0uZ2V0QXR0cmlidXRlKHBoeENoYW5nZSlcbiAgICAgICAgbGV0IHBoeEV2ZW50ID0gaW5wdXRFdmVudCB8fCBmb3JtRXZlbnRcbiAgICAgICAgaWYoIXBoeEV2ZW50KXsgcmV0dXJuIH1cbiAgICAgICAgaWYoaW5wdXQudHlwZSA9PT0gXCJudW1iZXJcIiAmJiBpbnB1dC52YWxpZGl0eSAmJiBpbnB1dC52YWxpZGl0eS5iYWRJbnB1dCl7IHJldHVybiB9XG5cbiAgICAgICAgbGV0IGRpc3BhdGNoZXIgPSBpbnB1dEV2ZW50ID8gaW5wdXQgOiBpbnB1dC5mb3JtXG4gICAgICAgIGxldCBjdXJyZW50SXRlcmF0aW9ucyA9IGl0ZXJhdGlvbnNcbiAgICAgICAgaXRlcmF0aW9ucysrXG4gICAgICAgIGxldCB7YXQ6IGF0LCB0eXBlOiBsYXN0VHlwZX0gPSBET00ucHJpdmF0ZShpbnB1dCwgXCJwcmV2LWl0ZXJhdGlvblwiKSB8fCB7fVxuICAgICAgICAvLyBkZXRlY3QgZHVwIGJlY2F1c2Ugc29tZSBicm93c2VycyBkaXNwYXRjaCBib3RoIFwiaW5wdXRcIiBhbmQgXCJjaGFuZ2VcIlxuICAgICAgICBpZihhdCA9PT0gY3VycmVudEl0ZXJhdGlvbnMgLSAxICYmIHR5cGUgIT09IGxhc3RUeXBlKXsgcmV0dXJuIH1cblxuICAgICAgICBET00ucHV0UHJpdmF0ZShpbnB1dCwgXCJwcmV2LWl0ZXJhdGlvblwiLCB7YXQ6IGN1cnJlbnRJdGVyYXRpb25zLCB0eXBlOiB0eXBlfSlcblxuICAgICAgICB0aGlzLmRlYm91bmNlKGlucHV0LCBlLCB0eXBlLCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy53aXRoaW5Pd25lcnMoZGlzcGF0Y2hlciwgdmlldyA9PiB7XG4gICAgICAgICAgICBET00ucHV0UHJpdmF0ZShpbnB1dCwgUEhYX0hBU19GT0NVU0VELCB0cnVlKVxuICAgICAgICAgICAgaWYoIURPTS5pc1RleHR1YWxJbnB1dChpbnB1dCkpe1xuICAgICAgICAgICAgICB0aGlzLnNldEFjdGl2ZUVsZW1lbnQoaW5wdXQpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBKUy5leGVjKFwiY2hhbmdlXCIsIHBoeEV2ZW50LCB2aWV3LCBpbnB1dCwgW1wicHVzaFwiLCB7X3RhcmdldDogZS50YXJnZXQubmFtZSwgZGlzcGF0Y2hlcjogZGlzcGF0Y2hlcn1dKVxuICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgICB9LCBmYWxzZSlcbiAgICB9XG4gICAgdGhpcy5vbihcInJlc2V0XCIsIChlKSA9PiB7XG4gICAgICBsZXQgZm9ybSA9IGUudGFyZ2V0XG4gICAgICBET00ucmVzZXRGb3JtKGZvcm0sIHRoaXMuYmluZGluZyhQSFhfRkVFREJBQ0tfRk9SKSlcbiAgICAgIGxldCBpbnB1dCA9IEFycmF5LmZyb20oZm9ybS5lbGVtZW50cykuZmluZChlbCA9PiBlbC50eXBlID09PSBcInJlc2V0XCIpXG4gICAgICAvLyB3YWl0IHVudGlsIG5leHQgdGljayB0byBnZXQgdXBkYXRlZCBpbnB1dCB2YWx1ZVxuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIGlucHV0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiaW5wdXRcIiwge2J1YmJsZXM6IHRydWUsIGNhbmNlbGFibGU6IGZhbHNlfSkpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBkZWJvdW5jZShlbCwgZXZlbnQsIGV2ZW50VHlwZSwgY2FsbGJhY2spe1xuICAgIGlmKGV2ZW50VHlwZSA9PT0gXCJibHVyXCIgfHwgZXZlbnRUeXBlID09PSBcImZvY3Vzb3V0XCIpeyByZXR1cm4gY2FsbGJhY2soKSB9XG5cbiAgICBsZXQgcGh4RGVib3VuY2UgPSB0aGlzLmJpbmRpbmcoUEhYX0RFQk9VTkNFKVxuICAgIGxldCBwaHhUaHJvdHRsZSA9IHRoaXMuYmluZGluZyhQSFhfVEhST1RUTEUpXG4gICAgbGV0IGRlZmF1bHREZWJvdW5jZSA9IHRoaXMuZGVmYXVsdHMuZGVib3VuY2UudG9TdHJpbmcoKVxuICAgIGxldCBkZWZhdWx0VGhyb3R0bGUgPSB0aGlzLmRlZmF1bHRzLnRocm90dGxlLnRvU3RyaW5nKClcblxuICAgIHRoaXMud2l0aGluT3duZXJzKGVsLCB2aWV3ID0+IHtcbiAgICAgIGxldCBhc3luY0ZpbHRlciA9ICgpID0+ICF2aWV3LmlzRGVzdHJveWVkKCkgJiYgZG9jdW1lbnQuYm9keS5jb250YWlucyhlbClcbiAgICAgIERPTS5kZWJvdW5jZShlbCwgZXZlbnQsIHBoeERlYm91bmNlLCBkZWZhdWx0RGVib3VuY2UsIHBoeFRocm90dGxlLCBkZWZhdWx0VGhyb3R0bGUsIGFzeW5jRmlsdGVyLCAoKSA9PiB7XG4gICAgICAgIGNhbGxiYWNrKClcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIHNpbGVuY2VFdmVudHMoY2FsbGJhY2spe1xuICAgIHRoaXMuc2lsZW5jZWQgPSB0cnVlXG4gICAgY2FsbGJhY2soKVxuICAgIHRoaXMuc2lsZW5jZWQgPSBmYWxzZVxuICB9XG5cbiAgb24oZXZlbnQsIGNhbGxiYWNrKXtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgZSA9PiB7XG4gICAgICBpZighdGhpcy5zaWxlbmNlZCl7IGNhbGxiYWNrKGUpIH1cbiAgICB9KVxuICB9XG59XG5cbmNsYXNzIFRyYW5zaXRpb25TZXQge1xuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHRoaXMudHJhbnNpdGlvbnMgPSBuZXcgU2V0KClcbiAgICB0aGlzLnBlbmRpbmdPcHMgPSBbXVxuICB9XG5cbiAgcmVzZXQoKXtcbiAgICB0aGlzLnRyYW5zaXRpb25zLmZvckVhY2godGltZXIgPT4ge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKVxuICAgICAgdGhpcy50cmFuc2l0aW9ucy5kZWxldGUodGltZXIpXG4gICAgfSlcbiAgICB0aGlzLmZsdXNoUGVuZGluZ09wcygpXG4gIH1cblxuICBhZnRlcihjYWxsYmFjayl7XG4gICAgaWYodGhpcy5zaXplKCkgPT09IDApe1xuICAgICAgY2FsbGJhY2soKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnB1c2hQZW5kaW5nT3AoY2FsbGJhY2spXG4gICAgfVxuICB9XG5cbiAgYWRkVHJhbnNpdGlvbih0aW1lLCBvblN0YXJ0LCBvbkRvbmUpe1xuICAgIG9uU3RhcnQoKVxuICAgIGxldCB0aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy50cmFuc2l0aW9ucy5kZWxldGUodGltZXIpXG4gICAgICBvbkRvbmUoKVxuICAgICAgdGhpcy5mbHVzaFBlbmRpbmdPcHMoKVxuICAgIH0sIHRpbWUpXG4gICAgdGhpcy50cmFuc2l0aW9ucy5hZGQodGltZXIpXG4gIH1cblxuICBwdXNoUGVuZGluZ09wKG9wKXsgdGhpcy5wZW5kaW5nT3BzLnB1c2gob3ApIH1cblxuICBzaXplKCl7IHJldHVybiB0aGlzLnRyYW5zaXRpb25zLnNpemUgfVxuXG4gIGZsdXNoUGVuZGluZ09wcygpe1xuICAgIGlmKHRoaXMuc2l6ZSgpID4gMCl7IHJldHVybiB9XG4gICAgbGV0IG9wID0gdGhpcy5wZW5kaW5nT3BzLnNoaWZ0KClcbiAgICBpZihvcCl7XG4gICAgICBvcCgpXG4gICAgICB0aGlzLmZsdXNoUGVuZGluZ09wcygpXG4gICAgfVxuICB9XG59XG4iLCAiaW1wb3J0IFwiLi4vY3NzL3ByaXNtLXZzYy1kYXJrLXBsdXMuY3NzXCI7XG5pbXBvcnQgXCIuLi9jc3MvYnVsbWEuY3NzXCI7XG5pbXBvcnQgXCIuLi9jc3MvYW5pbWF0ZS5jc3NcIjtcbmltcG9ydCBcIi4uL2Nzcy9hcHAuY3NzXCI7XG5cbi8vIHdlYnBhY2sgYXV0b21hdGljYWxseSBidW5kbGVzIGFsbCBtb2R1bGVzIGluIHlvdXJcbi8vIGVudHJ5IHBvaW50cy4gVGhvc2UgZW50cnkgcG9pbnRzIGNhbiBiZSBjb25maWd1cmVkXG4vLyBpbiBcIndlYnBhY2suY29uZmlnLmpzXCIuXG4vL1xuLy8gSW1wb3J0IGRlcHMgd2l0aCB0aGUgZGVwIG5hbWUgb3IgbG9jYWwgZmlsZXMgd2l0aCBhIHJlbGF0aXZlIHBhdGgsIGZvciBleGFtcGxlOlxuLy9cbi8vICAgICBpbXBvcnQge1NvY2tldH0gZnJvbSBcInBob2VuaXhcIlxuLy8gICAgIGltcG9ydCBzb2NrZXQgZnJvbSBcIi4vc29ja2V0XCJcbi8vXG5pbXBvcnQgXCJwaG9lbml4X2h0bWxcIlxuaW1wb3J0IHtTb2NrZXR9IGZyb20gXCJwaG9lbml4XCJcbmltcG9ydCB7TGl2ZVNvY2tldH0gZnJvbSBcInBob2VuaXhfbGl2ZV92aWV3XCJcbmltcG9ydCBQcmlzbSBmcm9tICcuLi92ZW5kb3IvcHJpc20uanMnO1xuLy8gVW5jb21tZW50IHdoZW4gd2Ugc3RhcnQgdXNpbmcgbWVybWFpZFxuLy8gaW1wb3J0IG1lcm1haWQgZnJvbSBcIm1lcm1haWRcIlxuLy8gbWVybWFpZC5pbml0aWFsaXplKHtzdGFydE9uTG9hZDpmYWxzZX0pO1xuXG53aW5kb3cudG9nZ2xlTm9kZSA9IChhKSA9PiB7XG4gIGEucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcubWVudS1saXN0JykuY2xhc3NMaXN0LnRvZ2dsZSgnaXMtaGlkZGVuJylcbiAgY29uc3QgaSA9IGEucXVlcnlTZWxlY3Rvcignc3Bhbi5pY29uID4gaScpXG4gIGkuY2xhc3NMaXN0LnRvZ2dsZSgnZmEtZm9sZGVyLW9wZW4nKVxuICBpLmNsYXNzTGlzdC50b2dnbGUoJ2ZhLWZvbGRlcicpXG59XG5cbmxldCBIb29rcyA9IHt9XG5cbkhvb2tzLkV2ZW50TG9nID0ge1xuICB1cGRhdGVkKCl7XG4gICAgY29uc3QgZXZlbnRMb2cgPSB0aGlzLmVsLnBhcmVudE5vZGVcbiAgICBldmVudExvZy5zY3JvbGxUb3AgPSBldmVudExvZy5zY3JvbGxIZWlnaHRcbiAgfVxufVxuXG53aW5kb3cuaGFuZGxlRW5hYmxlTGF0ZW5jeVNpbUNsaWNrID0gZnVuY3Rpb24oY2hlY2tib3gpIHtcbiAgbGV0IHNvY2tldCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGxheWdyb3VuZC1pZnJhbWVcIikuY29udGVudFdpbmRvdy5saXZlU29ja2V0XG4gIGxldCB2YWx1ZUlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkZWJ1Z19wcm9maWxlX2xhdGVuY3lfc2ltX3ZhbHVlXCIpXG5cbiAgaWYgKGNoZWNrYm94LmNoZWNrZWQpIHtcbiAgICB2YWx1ZUlucHV0LmRpc2FibGVkID0gZmFsc2VcbiAgICBsZXQgdmFsdWUgPSB2YWx1ZUlucHV0LnZhbHVlIHx8IDEwMFxuICAgIHZhbHVlSW5wdXQudmFsdWUgPSB2YWx1ZVxuICAgIHNvY2tldC5lbmFibGVMYXRlbmN5U2ltKHZhbHVlKVxuICB9IGVsc2Uge1xuICAgIHNvY2tldC5kaXNhYmxlTGF0ZW5jeVNpbSgpXG4gICAgdmFsdWVJbnB1dC5kaXNhYmxlZCA9IHRydWVcbiAgfVxuXG4gIHVwZGF0ZVBsYXlncm91bmRUYWJMYWJlbCgpXG59XG5cbndpbmRvdy5oYW5kbGVFbmFibGVEZWJ1Z0NsaWNrID0gZnVuY3Rpb24oY2hlY2tib3gpIHtcbiAgbGV0IHNvY2tldCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGxheWdyb3VuZC1pZnJhbWVcIikuY29udGVudFdpbmRvdy5saXZlU29ja2V0XG5cbiAgaWYgKGNoZWNrYm94LmNoZWNrZWQpIHtcbiAgICBzb2NrZXQuZW5hYmxlRGVidWcoKVxuICB9IGVsc2Uge1xuICAgIHNvY2tldC5kaXNhYmxlRGVidWcoKVxuICB9XG59XG5cbndpbmRvdy5oYW5kbGVFbmFibGVQcm9maWxlQ2xpY2sgPSBmdW5jdGlvbihjaGVja2JveCkge1xuICBsZXQgc29ja2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwbGF5Z3JvdW5kLWlmcmFtZVwiKS5jb250ZW50V2luZG93LmxpdmVTb2NrZXRcblxuICBpZiAoY2hlY2tib3guY2hlY2tlZCkge1xuICAgIHNvY2tldC5lbmFibGVQcm9maWxpbmcoKVxuICB9IGVsc2Uge1xuICAgIHNvY2tldC5kaXNhYmxlUHJvZmlsaW5nKClcbiAgfVxufVxuXG53aW5kb3cuaGFuZGxlTGF0ZW5jeVNpbVZhbHVlQmx1ciA9IGZ1bmN0aW9uKGlucHV0KSB7XG4gIGNvbnN0IHNvY2tldCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGxheWdyb3VuZC1pZnJhbWVcIikuY29udGVudFdpbmRvdy5saXZlU29ja2V0XG4gIGNvbnN0IG9sZFZhbHVlID0gc29ja2V0LmdldExhdGVuY3lTaW0oKVxuXG4gIGlmIChpbnB1dC52YWx1ZSAhPSBvbGRWYWx1ZSkge1xuICAgIGNvbnN0IHZhbHVlID0gaW5wdXQudmFsdWUgfHwgMTAwMFxuICAgIGlucHV0LnZhbHVlID0gdmFsdWVcbiAgICBzb2NrZXQuZW5hYmxlTGF0ZW5jeVNpbSh2YWx1ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0RGVidWdQcm9maWxlKHNvY2tldCkge1xuICBjb25zdCBkZWJ1Z1Byb2ZpbGVEaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBsYXlncm91bmQtdG9vbHMtZGVidWctcHJvZmlsZVwiKVxuICBjb25zdCBkZWJ1Z1Byb2ZpbGVEaXNhYmxlZERpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGxheWdyb3VuZC10b29scy1kZWJ1Zy1wcm9maWxlLWRpc2FibGVkXCIpXG5cbiAgaWYgKCFzb2NrZXQpIHtcbiAgICBkZWJ1Z1Byb2ZpbGVEaXYuaGlkZGVuID0gdHJ1ZVxuICAgIGRlYnVnUHJvZmlsZURpc2FibGVkRGl2LmhpZGRlbiA9IGZhbHNlXG4gICAgcmV0dXJuXG4gIH1cblxuICBkZWJ1Z1Byb2ZpbGVEaXYuaGlkZGVuID0gZmFsc2VcbiAgZGVidWdQcm9maWxlRGlzYWJsZWREaXYuaGlkZGVuID0gdHJ1ZVxuXG4gIGNvbnN0IGRlYnVnQ2hlY2tib3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRlYnVnX3Byb2ZpbGVfZW5hYmxlX2RlYnVnXCIpXG4gIGRlYnVnQ2hlY2tib3guY2hlY2tlZCA9IHNvY2tldC5pc0RlYnVnRW5hYmxlZCgpXG5cbiAgY29uc3QgcHJvZmlsZUNoZWNrYm94ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkZWJ1Z19wcm9maWxlX2VuYWJsZV9wcm9maWxlXCIpXG4gIHByb2ZpbGVDaGVja2JveC5jaGVja2VkID0gc29ja2V0LmlzUHJvZmlsZUVuYWJsZWQoKVxuXG4gIGNvbnN0IGxhdGVuY3lTaW1DaGVja2JveCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGVidWdfcHJvZmlsZV9lbmFibGVfbGF0ZW5jeV9zaW1cIilcbiAgY29uc3QgbGF0ZW5jeVNpbUlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJkZWJ1Z19wcm9maWxlX2xhdGVuY3lfc2ltX3ZhbHVlXCIpXG4gIGNvbnN0IGxhdGVuY3lTaW1WYWx1ZSA9IHNvY2tldC5nZXRMYXRlbmN5U2ltKClcblxuICBpZiAobGF0ZW5jeVNpbVZhbHVlKSB7XG4gICAgbGF0ZW5jeVNpbUNoZWNrYm94LmNoZWNrZWQgPSB0cnVlXG4gICAgbGF0ZW5jeVNpbUlucHV0LnZhbHVlID0gbGF0ZW5jeVNpbVZhbHVlXG4gIH1cbiAgdXBkYXRlUGxheWdyb3VuZFRhYkxhYmVsKClcbn1cblxuZnVuY3Rpb24gdXBkYXRlUGxheWdyb3VuZFRhYkxhYmVsKCkge1xuICBjb25zdCBzb2NrZXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInBsYXlncm91bmQtaWZyYW1lXCIpLmNvbnRlbnRXaW5kb3cubGl2ZVNvY2tldFxuICBjb25zdCBsYWJlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGxheWdyb3VuZC10YWItbGFiZWxcIilcblxuICBpZiAoc29ja2V0LmdldExhdGVuY3lTaW0oKSkge1xuICAgIGxhYmVsLmlubmVySFRNTCA9ICdQbGF5Z3JvdW5kIDxzcGFuIGNsYXNzPVwiaXMtc2l6ZS02XCIgdGl0bGU9XCJMYXRlbmN5IHNpbXVsYXRvciBpcyBlbmFibGVkXCI+XHUyNkEwXHVGRTBGPC9zcGFuPidcbiAgfSBlbHNlIHtcbiAgICBsYWJlbC5pbm5lclRleHQgPSBcIlBsYXlncm91bmRcIlxuICB9XG59XG5cbmZ1bmN0aW9uIG1heWJlUGF0Y2hTb2NrZXQoc29ja2V0KSB7XG4gIGlmICghc29ja2V0KSB7XG4gICAgY29uc29sZS5sb2coXCJbQ2F0YWxvZ3VlXSB3aW5kb3cubGl2ZVNvY2tldCBoYXMgbm90IGJlZW4gc2V0LiBEZWJ1Zy9Qcm9maWxlIHRhYiB3aWxsIGJlIGRpc2FibGVkLlwiKVxuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKHNvY2tldC5wYXRjaGVkKVxuICAgIHJldHVyblxuXG4gIGNvbnN0IHBhdGggPSBzb2NrZXQuY3VycmVudExvY2F0aW9uLnBhdGhuYW1lXG4gIGNvbnN0IFBIWF9MVl9ERUJVRyA9IGBwaHg6bGl2ZS1zb2NrZXQ6ZGVidWc6JHtwYXRofWBcbiAgY29uc3QgUEhYX0xWX1BST0ZJTEUgPSBgcGh4OmxpdmUtc29ja2V0OnByb2ZpbGluZzoke3BhdGh9YFxuICBjb25zdCBQSFhfTFZfTEFURU5DWV9TSU0gPSBgcGh4OmxpdmUtc29ja2V0OmxhdGVuY3ktc2ltOiR7cGF0aH1gXG5cbiAgLy8gTGF0ZW5jeSBTaW11bGF0aW9uXG5cbiAgc29ja2V0LmVuYWJsZUxhdGVuY3lTaW0gPSBmdW5jdGlvbih1cHBlckJvdW5kTXMpe1xuICAgIGNvbnNvbGUubG9nKGBsYXRlbmN5IHNpbXVsYXRvciBlbmFibGVkIGFzICR7dXBwZXJCb3VuZE1zfW1zIGZvciB0aGUgZHVyYXRpb24gb2YgdGhpcyBicm93c2VyIHNlc3Npb24uYClcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFBIWF9MVl9MQVRFTkNZX1NJTSwgdXBwZXJCb3VuZE1zKVxuICB9XG5cbiAgc29ja2V0LmRpc2FibGVMYXRlbmN5U2ltID0gZnVuY3Rpb24oKXsgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShQSFhfTFZfTEFURU5DWV9TSU0pfVxuXG4gIHNvY2tldC5nZXRMYXRlbmN5U2ltID0gZnVuY3Rpb24oKSB7XG4gICAgbGV0IHN0ciA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oUEhYX0xWX0xBVEVOQ1lfU0lNKVxuICAgIHJldHVybiBzdHIgPyBwYXJzZUludChzdHIpIDogbnVsbFxuICB9XG5cbiAgLy8gRGVidWdcblxuICBzb2NrZXQuaXNEZWJ1Z0VuYWJsZWQgPSBmdW5jdGlvbigpeyByZXR1cm4gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShQSFhfTFZfREVCVUcpID09PSBcInRydWVcIiB9XG5cbiAgc29ja2V0LmVuYWJsZURlYnVnID0gZnVuY3Rpb24oKXsgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShQSFhfTFZfREVCVUcsIFwidHJ1ZVwiKSB9XG5cbiAgc29ja2V0LmRpc2FibGVEZWJ1ZyA9IGZ1bmN0aW9uKCl7IHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oUEhYX0xWX0RFQlVHKSB9XG5cbiAgLy8gUHJvZmlsZVxuXG4gIHNvY2tldC5pc1Byb2ZpbGVFbmFibGVkID0gZnVuY3Rpb24oKXsgcmV0dXJuIHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oUEhYX0xWX1BST0ZJTEUpID09PSBcInRydWVcIiB9XG5cbiAgc29ja2V0LmVuYWJsZVByb2ZpbGluZyA9IGZ1bmN0aW9uKCl7IHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oUEhYX0xWX1BST0ZJTEUsIFwidHJ1ZVwiKSB9XG5cbiAgc29ja2V0LmRpc2FibGVQcm9maWxpbmcgPSBmdW5jdGlvbigpeyBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKFBIWF9MVl9QUk9GSUxFKSB9XG5cbiAgc29ja2V0LnBhdGNoZWQgPSB0cnVlXG59XG5cbmNvbnN0IGRlYnVnID0gKHZpZXcsIGtpbmQsIG1zZywgb2JqKSA9PiB7XG4gIGlmICh3aW5kb3cubGl2ZVNvY2tldC5pc0RlYnVnRW5hYmxlZCgpKSB7XG4gICAgY29uc29sZS5sb2coYCR7dmlldy5pZH0gJHtraW5kfTogJHttc2d9IC0gYCwgb2JqKVxuICB9IGVsc2UgaWYgKHZpZXcuaWQgPT0gXCJwbGF5Z3JvdW5kXCIpIHtcbiAgICBtYXliZVBhdGNoU29ja2V0KHZpZXcubGl2ZVNvY2tldClcbiAgICBpZiAodmlldy5saXZlU29ja2V0LmlzRGVidWdFbmFibGVkKCkpXG4gICAgICBjb25zb2xlLmxvZyhgJHt2aWV3LmlkfSAke2tpbmR9OiAke21zZ30gLSBgLCBvYmopXG4gIH1cbn1cblxuSG9va3MuSWZyYW1lQm9keSA9IHtcbiAgbW91bnRlZCgpe1xuICAgIGNvbnN0IGlmcmFtZSA9IHRoaXMuZWxcbiAgICBpZnJhbWUuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZSA9PiB7XG4gICAgICBpZiAoaWZyYW1lLmlkID09IFwicGxheWdyb3VuZC1pZnJhbWVcIikge1xuICAgICAgICBjb25zdCBzb2NrZXQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5saXZlU29ja2V0XG4gICAgICAgIG1heWJlUGF0Y2hTb2NrZXQoc29ja2V0KVxuICAgICAgICBpbml0RGVidWdQcm9maWxlKHNvY2tldClcbiAgICAgIH1cbiAgICB9KTtcbiAgICBsZXQgc2VuZFJlc2l6ZTtcbiAgICBpZnJhbWUuY29udGVudFdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGUgPT4ge1xuICAgICAgaWYgKGlmcmFtZS5pZCA9PSBcInBsYXlncm91bmQtaWZyYW1lXCIpIHtcbiAgICAgICAgaWYgKGlmcmFtZS5vZmZzZXRXaWR0aCA+IGlmcmFtZS5wYXJlbnRFbGVtZW50Lm9mZnNldFdpZHRoKVxuICAgICAgICAgIGlmcmFtZS5zdHlsZS53aWR0aCA9IFwiMTAwJVwiXG5cbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXNcbiAgICAgICAgY2xlYXJUaW1lb3V0KHNlbmRSZXNpemUpXG4gICAgICAgIHNlbmRSZXNpemUgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYucHVzaEV2ZW50KFwicGxheWdyb3VuZF9yZXNpemVcIiwge2hlaWdodDogaWZyYW1lLnN0eWxlLmhlaWdodCwgd2lkdGg6IGlmcmFtZS5zdHlsZS53aWR0aH0pXG4gICAgICAgIH0sIDMwMClcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcblxuSG9va3NbXCJIaWdobGlnaHRcIl0gPSB7XG4gIG1vdW50ZWQoKSB7XG4gICAgUHJpc20uaGlnaGxpZ2h0RWxlbWVudCh0aGlzLmVsKVxuXG4gICAgLy8gQ2FsbCBpdCBhZ2FpbiB0byBmaXggbWlzcGxhY2VkIHNlbGVjdGVkIGxpbmVzIG9uIHBhZ2UgcmVsb2FkXG4gICAgUHJpc20uaGlnaGxpZ2h0RWxlbWVudCh0aGlzLmVsKVxuICB9LFxuICB1cGRhdGVkKCkge1xuICAgIFByaXNtLmhpZ2hsaWdodEVsZW1lbnQodGhpcy5lbCk7XG4gIH1cbn1cblxuSG9va3NbXCJNZXJtYWlkXCJdID0ge1xuICBtb3VudGVkKCkge1xuICAgIG1lcm1haWQuaW5pdCh1bmRlZmluZWQsIGAjJHt0aGlzLmVsLmlkfWApO1xuICB9XG59XG5cbkhvb2tzW1wiU2VjdGlvbkhlYWRpbmdcIl0gPSB7XG4gIG1vdW50ZWQoKSB7XG4gICAgY29uc3QgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXG4gICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gYDxhIGhyZWY9XCIjJHt0aGlzLmVsLmlkfVwiIGNsYXNzPVwiaG92ZXItbGlua1wiPlxuICAgICAgPHNwYW4gY2xhc3M9XCJpY29uLWxpbmtcIiBhcmlhLWhpZGRlbj1cInRydWVcIj5cbiAgICAgICAgPHN2ZyB2aWV3Qm94PVwiMCAwIDE2IDE2XCIgdmVyc2lvbj1cIjEuMVwiIHdpZHRoPVwiMjBcIiBoZWlnaHQ9XCIyMFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjxwYXRoIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiBkPVwiTTcuNzc1IDMuMjc1YS43NS43NSAwIDAwMS4wNiAxLjA2bDEuMjUtMS4yNWEyIDIgMCAxMTIuODMgMi44M2wtMi41IDIuNWEyIDIgMCAwMS0yLjgzIDAgLjc1Ljc1IDAgMDAtMS4wNiAxLjA2IDMuNSAzLjUgMCAwMDQuOTUgMGwyLjUtMi41YTMuNSAzLjUgMCAwMC00Ljk1LTQuOTVsLTEuMjUgMS4yNXptLTQuNjkgOS42NGEyIDIgMCAwMTAtMi44M2wyLjUtMi41YTIgMiAwIDAxMi44MyAwIC43NS43NSAwIDAwMS4wNi0xLjA2IDMuNSAzLjUgMCAwMC00Ljk1IDBsLTIuNSAyLjVhMy41IDMuNSAwIDAwNC45NSA0Ljk1bDEuMjUtMS4yNWEuNzUuNzUgMCAwMC0xLjA2LTEuMDZsLTEuMjUgMS4yNWEyIDIgMCAwMS0yLjgzIDB6XCI+PC9wYXRoPjwvc3ZnPlxuICAgICAgPC9zcGFuPlxuICAgIDwvYT5gXG4gICAgdGhpcy5lbC5pbnNlcnRCZWZvcmUodGVtcGxhdGUuZmlyc3RDaGlsZCwgdGhpcy5lbC5maXJzdENoaWxkKVxuICB9XG59XG5cbmxldCBjc3JmVG9rZW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwibWV0YVtuYW1lPSdjc3JmLXRva2VuJ11cIikuZ2V0QXR0cmlidXRlKFwiY29udGVudFwiKVxubGV0IGxpdmVTb2NrZXQgPSBuZXcgTGl2ZVNvY2tldChcIi9saXZlXCIsIFNvY2tldCwge3BhcmFtczoge19jc3JmX3Rva2VuOiBjc3JmVG9rZW59LCBob29rczogSG9va3MsIHZpZXdMb2dnZXI6IGRlYnVnfSlcblxuLy8gY29ubmVjdCBpZiB0aGVyZSBhcmUgYW55IExpdmVWaWV3cyBvbiB0aGUgcGFnZVxubGl2ZVNvY2tldC5jb25uZWN0KClcblxuLy8gZXhwb3NlIGxpdmVTb2NrZXQgb24gd2luZG93IGZvciB3ZWIgY29uc29sZSBkZWJ1ZyBsb2dzIGFuZCBsYXRlbmN5IHNpbXVsYXRpb25cbndpbmRvdy5saXZlU29ja2V0ID0gbGl2ZVNvY2tldFxuXG4iXSwKICAibWFwcGluZ3MiOiAiaStCQUFBLElBQUFBLEdBQUFDLEdBQUEsQ0FBQUMsR0FBQUMsS0FBQSxDQUVBLElBQUlDLEdBQW1CLE9BQU8sUUFBcEIsWUFBMkIsT0FBb0IsT0FBTyxtQkFBcEIsYUFBdUMsZ0JBQWdCLGtCQUFrQixLQUFLLENBQUMsRUFBRUMsRUFBTSxTQUFTQyxFQUFFLENBQUMsSUFBSUMsRUFBRSw4QkFBOEJDLEVBQUUsRUFBRUMsRUFBRSxDQUFDLEVBQUVDLEVBQUUsQ0FBQyxPQUFPSixFQUFFLE9BQU9BLEVBQUUsTUFBTSxPQUFPLDRCQUE0QkEsRUFBRSxPQUFPQSxFQUFFLE1BQU0sNEJBQTRCLEtBQUssQ0FBQyxPQUFPLFNBQVNHLEVBQUVELEVBQUUsQ0FBQyxPQUFPQSxhQUFhRyxFQUFFLElBQUlBLEVBQUVILEVBQUUsS0FBS0MsRUFBRUQsRUFBRSxPQUFPLEVBQUVBLEVBQUUsS0FBSyxFQUFFLE1BQU0sUUFBUUEsQ0FBQyxFQUFFQSxFQUFFLElBQUlDLENBQUMsRUFBRUQsRUFBRSxRQUFRLEtBQUssT0FBTyxFQUFFLFFBQVEsS0FBSyxNQUFNLEVBQUUsUUFBUSxVQUFVLEdBQUcsQ0FBQyxFQUFFLEtBQUssU0FBU0MsRUFBRSxDQUFDLE9BQU8sT0FBTyxVQUFVLFNBQVMsS0FBS0EsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxNQUFNLFNBQVNBLEVBQUUsQ0FBQyxPQUFPQSxFQUFFLE1BQU0sT0FBTyxlQUFlQSxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUVELENBQUMsQ0FBQyxFQUFFQyxFQUFFLElBQUksRUFBRSxNQUFNLFNBQVNHLEVBQUVILEVBQUVJLEVBQUUsQ0FBQyxJQUFJQyxFQUFFTixFQUFFLE9BQU9LLEVBQUVBLEdBQUcsQ0FBQyxFQUFFSCxFQUFFLEtBQUssS0FBS0QsQ0FBQyxFQUFFLENBQUMsSUFBSSxTQUFTLEdBQUdELEVBQUVFLEVBQUUsS0FBSyxNQUFNRCxDQUFDLEVBQUVJLEVBQUVMLEdBQUcsT0FBT0ssRUFBRUwsR0FBRyxRQUFRTyxLQUFLRCxFQUFFLENBQUMsRUFBRUQsRUFBRUwsR0FBR00sRUFBRUwsRUFBRUEsRUFBRSxlQUFlTSxDQUFDLElBQUlELEVBQUVDLEdBQUdILEVBQUVILEVBQUVNLEdBQUdGLENBQUMsR0FBRyxPQUFPQyxFQUFFLElBQUksUUFBUSxPQUFPTixFQUFFRSxFQUFFLEtBQUssTUFBTUQsQ0FBQyxFQUFFSSxFQUFFTCxHQUFHSyxFQUFFTCxJQUFJTSxFQUFFLENBQUMsRUFBRUQsRUFBRUwsR0FBR00sRUFBRUwsRUFBRSxRQUFRLFNBQVNBLEVBQUVELEVBQUUsQ0FBQ00sRUFBRU4sR0FBR0ksRUFBRUgsRUFBRUksQ0FBQyxDQUFDLENBQUMsRUFBRUMsR0FBRyxRQUFRLE9BQU9MLENBQUMsQ0FBQyxFQUFFLFlBQVksU0FBU0EsRUFBRSxDQUFDLEtBQUtBLEdBQUcsQ0FBQ0YsRUFBRSxLQUFLRSxFQUFFLFNBQVMsR0FBR0EsRUFBRUEsRUFBRSxjQUFjLE9BQU9BLEdBQUdBLEVBQUUsVUFBVSxNQUFNRixDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxHQUFHLFlBQVksRUFBRSxNQUFNLEVBQUUsY0FBYyxVQUFVLENBQUMsR0FBZ0IsT0FBTyxVQUFwQixZQUE2QixPQUFPLEtBQUssR0FBRyxrQkFBa0IsU0FBUyxPQUFPLFNBQVMsY0FBYyxHQUFHLENBQUMsTUFBTSxJQUFJLEtBQUssT0FBT0UsRUFBTixDQUFTLElBQUlELEdBQUcsK0JBQStCLEtBQUtDLEVBQUUsS0FBSyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUdELEVBQUUsQ0FBQyxJQUFJSSxFQUFFLFNBQVMscUJBQXFCLFFBQVEsRUFBRSxRQUFRQyxLQUFLRCxFQUFFLEdBQUdBLEVBQUVDLEdBQUcsS0FBS0wsRUFBRSxPQUFPSSxFQUFFQyxFQUFFLENBQUMsT0FBTyxJQUFJLENBQUMsRUFBRSxTQUFTLFNBQVNKLEVBQUVELEVBQUVJLEVBQUUsQ0FBQyxRQUFRQyxFQUFFLE1BQU1MLEVBQUVDLEdBQUcsQ0FBQyxJQUFJSyxFQUFFTCxFQUFFLFVBQVUsR0FBR0ssRUFBRSxTQUFTTixDQUFDLEVBQUUsTUFBTSxHQUFHLEdBQUdNLEVBQUUsU0FBU0QsQ0FBQyxFQUFFLE1BQU0sR0FBR0osRUFBRUEsRUFBRSxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUNHLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxNQUFNSCxFQUFFLFVBQVVBLEVBQUUsS0FBS0EsRUFBRSxJQUFJQSxFQUFFLE9BQU8sU0FBU0EsRUFBRUQsRUFBRSxDQUFDLElBQUlJLEVBQUVGLEVBQUUsS0FBSyxNQUFNQSxFQUFFLFVBQVVELEVBQUUsRUFBRSxRQUFRSSxLQUFLTCxFQUFFSSxFQUFFQyxHQUFHTCxFQUFFSyxHQUFHLE9BQU9ELENBQUMsRUFBRSxhQUFhLFNBQVNBLEVBQUVILEVBQUVELEVBQUVLLEVBQUUsQ0FBQyxJQUFJQyxHQUFHRCxFQUFFQSxHQUFHSCxFQUFFLFdBQVdFLEdBQUdHLEVBQUUsQ0FBQyxFQUFFLFFBQVFDLEtBQUtGLEVBQUUsR0FBR0EsRUFBRSxlQUFlRSxDQUFDLEVBQUUsQ0FBQyxHQUFHQSxHQUFHUCxFQUFFLFFBQVFRLEtBQUtULEVBQUVBLEVBQUUsZUFBZVMsQ0FBQyxJQUFJRixFQUFFRSxHQUFHVCxFQUFFUyxJQUFJVCxFQUFFLGVBQWVRLENBQUMsSUFBSUQsRUFBRUMsR0FBR0YsRUFBRUUsR0FBRyxDQUFDLElBQUlFLEVBQUVMLEVBQUVELEdBQUcsT0FBT0MsRUFBRUQsR0FBR0csRUFBRUwsRUFBRSxVQUFVLElBQUlBLEVBQUUsVUFBVSxTQUFTRCxFQUFFRCxFQUFFLENBQUNBLElBQUlVLEdBQUdULEdBQUdHLElBQUksS0FBS0gsR0FBR00sRUFBRSxDQUFDLEVBQUVBLENBQUMsRUFBRSxJQUFJLFNBQVNOLEVBQUVELEVBQUVJLEVBQUVDLEVBQUVDLEVBQUUsQ0FBQ0EsRUFBRUEsR0FBRyxDQUFDLEVBQUUsSUFBSUMsRUFBRUwsRUFBRSxLQUFLLE1BQU0sUUFBUU0sS0FBS1IsRUFBRSxHQUFHQSxFQUFFLGVBQWVRLENBQUMsRUFBRSxDQUFDSixFQUFFLEtBQUtKLEVBQUVRLEVBQUVSLEVBQUVRLEdBQUdILEdBQUdHLENBQUMsRUFBRSxJQUFJQyxFQUFFVCxFQUFFUSxHQUFHRSxFQUFFUixFQUFFLEtBQUssS0FBS08sQ0FBQyxFQUFhQyxJQUFYLFVBQWNKLEVBQUVDLEVBQUVFLENBQUMsR0FBYUMsSUFBVixTQUFhSixFQUFFQyxFQUFFRSxDQUFDLEtBQUtILEVBQUVDLEVBQUVFLENBQUMsR0FBRyxHQUFHUixFQUFFUSxFQUFFTCxFQUFFSSxF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QU8sTUFBTSxPQUFRLE1BQU9BLEVBQU8sTUFBTSxLQUFLLENBQUMsQ0FDOUYsRUFBRyxHQUFHLENBQ1IsQ0FDRixDQUFDLENBQ0gsQ0FDRixFQUVBOUIsR0FBTSxVQUFlLENBQ25CLFNBQVUsQ0FDUixHQUFBa0MsUUFBTSxpQkFBaUIsS0FBSyxFQUFFLEVBRzlCLEdBQUFBLFFBQU0saUJBQWlCLEtBQUssRUFBRSxDQUNoQyxFQUNBLFNBQVUsQ0FDUixHQUFBQSxRQUFNLGlCQUFpQixLQUFLLEVBQUUsQ0FDaEMsQ0FDRixFQUVBbEMsR0FBTSxRQUFhLENBQ2pCLFNBQVUsQ0FDUixRQUFRLEtBQUssT0FBVyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQzFDLENBQ0YsRUFFQUEsR0FBTSxlQUFvQixDQUN4QixTQUFVLENBQ1IsSUFBTW1DLEVBQVcsU0FBUyxjQUFjLEtBQUssRUFDN0NBLEVBQVMsVUFBWSxhQUFhLEtBQUssR0FBRztBQUFBO0FBQUE7QUFBQTtBQUFBLFVBSzFDLEtBQUssR0FBRyxhQUFhQSxFQUFTLFdBQVksS0FBSyxHQUFHLFVBQVUsQ0FDOUQsQ0FDRixFQUVBLElBQUlDLEdBQVksU0FBUyxjQUFjLHlCQUF5QixFQUFFLGFBQWEsU0FBUyxFQUNwRkMsR0FBYSxJQUFJQyxHQUFXLFFBQVNDLEdBQVEsQ0FBQyxPQUFRLENBQUMsWUFBYUgsRUFBUyxFQUFHLE1BQU9wQyxHQUFPLFdBQVl5QixFQUFLLENBQUMsRUFHcEhZLEdBQVcsUUFBUSxFQUduQixPQUFPLFdBQWFBIiwKICAibmFtZXMiOiBbInJlcXVpcmVfcHJpc20iLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJfc2VsZiIsICJQcmlzbSIsICJ1IiwgImMiLCAibiIsICJlIiwgIk0iLCAiVyIsICJ0IiwgInIiLCAiYSIsICJpIiwgImwiLCAibyIsICJzIiwgIkkiLCAiZyIsICJmIiwgImgiLCAiZCIsICJ2IiwgInAiLCAibSIsICJ5IiwgImsiLCAiYiIsICJ4IiwgInoiLCAidyIsICJBIiwgIlAiLCAiUyIsICJFIiwgIk8iLCAiTCIsICJOIiwgImoiLCAicSIsICJDIiwgIl8iLCAiUG9seWZpbGxFdmVudCIsICJldmVudENvbnN0cnVjdG9yIiwgIkN1c3RvbUV2ZW50IiwgImV2ZW50IiwgInBhcmFtcyIsICJldnQiLCAiYnVpbGRIaWRkZW5JbnB1dCIsICJuYW1lIiwgInZhbHVlIiwgImlucHV0IiwgImhhbmRsZUNsaWNrIiwgImVsZW1lbnQiLCAidGFyZ2V0TW9kaWZpZXJLZXkiLCAidG8iLCAibWV0aG9kIiwgImNzcmYiLCAiZm9ybSIsICJzdWJtaXQiLCAidGFyZ2V0IiwgImUiLCAicGhvZW5peExpbmtFdmVudCIsICJtZXNzYWdlIiwgImNsb3N1cmUiLCAidmFsdWUiLCAiZ2xvYmFsU2VsZiIsICJwaHhXaW5kb3ciLCAiZ2xvYmFsIiwgIkRFRkFVTFRfVlNOIiwgIlNPQ0tFVF9TVEFURVMiLCAiREVGQVVMVF9USU1FT1VUIiwgIldTX0NMT1NFX05PUk1BTCIsICJDSEFOTkVMX1NUQVRFUyIsICJDSEFOTkVMX0VWRU5UUyIsICJUUkFOU1BPUlRTIiwgIlhIUl9TVEFURVMiLCAiUHVzaCIsICJjaGFubmVsIiwgImV2ZW50IiwgInBheWxvYWQiLCAidGltZW91dCIsICJzdGF0dXMiLCAiY2FsbGJhY2siLCAicmVzcG9uc2UiLCAiX3JlZiIsICJoIiwgIlRpbWVyIiwgInRpbWVyQ2FsYyIsICJDaGFubmVsIiwgInRvcGljIiwgInBhcmFtcyIsICJzb2NrZXQiLCAicHVzaEV2ZW50IiwgInJlYXNvbiIsICJyZWYiLCAiYmluZCIsICJvbkNsb3NlIiwgImxlYXZlUHVzaCIsICJfZXZlbnQiLCAiam9pblJlZiIsICJoYW5kbGVkUGF5bG9hZCIsICJldmVudEJpbmRpbmdzIiwgImkiLCAiQWpheCIsICJtZXRob2QiLCAiZW5kUG9pbnQiLCAiYWNjZXB0IiwgImJvZHkiLCAib250aW1lb3V0IiwgInJlcSIsICJyZXNwIiwgImUiLCAib2JqIiwgInBhcmVudEtleSIsICJxdWVyeVN0ciIsICJrZXkiLCAicGFyYW1LZXkiLCAicGFyYW1WYWwiLCAidXJsIiwgInByZWZpeCIsICJMb25nUG9sbCIsICJjb2RlIiwgIndhc0NsZWFuIiwgInRva2VuIiwgIm1lc3NhZ2VzIiwgIm1zZyIsICJvcHRzIiwgImNvbnRlbnRUeXBlIiwgIm9uQ2FsbGVyVGltZW91dCIsICJzZXJpYWxpemVyX2RlZmF1bHQiLCAibXNnIiwgImNhbGxiYWNrIiwgInBheWxvYWQiLCAicmF3UGF5bG9hZCIsICJqb2luX3JlZiIsICJyZWYiLCAidG9waWMiLCAiZXZlbnQiLCAibWVzc2FnZSIsICJtZXRhTGVuZ3RoIiwgImhlYWRlciIsICJ2aWV3IiwgIm9mZnNldCIsICJjaGFyIiwgImNvbWJpbmVkIiwgImJ1ZmZlciIsICJraW5kIiwgImRlY29kZXIiLCAiam9pblJlZlNpemUiLCAidG9waWNTaXplIiwgImV2ZW50U2l6ZSIsICJqb2luUmVmIiwgImRhdGEiLCAicmVmU2l6ZSIsICJDSEFOTkVMX0VWRU5UUyIsICJTb2NrZXQiLCAiZW5kUG9pbnQiLCAib3B0cyIsICJERUZBVUxUX1RJTUVPVVQiLCAiZ2xvYmFsIiwgIkxvbmdQb2xsIiwgImF3YWl0aW5nQ29ubmVjdGlvbk9uUGFnZVNob3ciLCAicGh4V2luZG93IiwgIl9lIiwgInRyaWVzIiwgImNsb3N1cmUiLCAiVFJBTlNQT1JUUyIsICJERUZBVUxUX1ZTTiIsICJUaW1lciIsICJuZXdUcmFuc3BvcnQiLCAidXJpIiwgIkFqYXgiLCAiY29kZSIsICJyZWFzb24iLCAicGFyYW1zIiwgImVycm9yIiwgInN0YXJ0VGltZSIsICJvbk1zZ1JlZiIsICJXU19DTE9TRV9OT1JNQUwiLCAiU09DS0VUX1NUQVRFUyIsICJjbG9zZUNvZGUiLCAidHJhbnNwb3J0QmVmb3JlIiwgImVzdGFibGlzaGVkQmVmb3JlIiwgImNoYW5uZWwiLCAiYyIsICJyZWZzIiwgImtleSIsICJjaGFuUGFyYW1zIiwgImNoYW4iLCAiQ2hhbm5lbCIsICJyZXN1bHQiLCAibmV3UmVmIiwgInJhd01lc3NhZ2UiLCAiaSIsICJkdXBDaGFubmVsIiwgIkNPTlNFQ1VUSVZFX1JFTE9BRFMiLCAiTUFYX1JFTE9BRFMiLCAiUkVMT0FEX0pJVFRFUl9NSU4iLCAiUkVMT0FEX0pJVFRFUl9NQVgiLCAiRkFJTFNBRkVfSklUVEVSIiwgIlBIWF9FVkVOVF9DTEFTU0VTIiwgIlBIWF9DT01QT05FTlQiLCAiUEhYX0xJVkVfTElOSyIsICJQSFhfVFJBQ0tfU1RBVElDIiwgIlBIWF9MSU5LX1NUQVRFIiwgIlBIWF9SRUYiLCAiUEhYX1JFRl9TUkMiLCAiUEhYX1RSQUNLX1VQTE9BRFMiLCAiUEhYX1VQTE9BRF9SRUYiLCAiUEhYX1BSRUZMSUdIVEVEX1JFRlMiLCAiUEhYX0RPTkVfUkVGUyIsICJQSFhfRFJPUF9UQVJHRVQiLCAiUEhYX0FDVElWRV9FTlRSWV9SRUZTIiwgIlBIWF9MSVZFX0ZJTEVfVVBEQVRFRCIsICJQSFhfU0tJUCIsICJQSFhfUFJVTkUiLCAiUEhYX1BBR0VfTE9BRElORyIsICJQSFhfQ09OTkVDVEVEX0NMQVNTIiwgIlBIWF9ESVNDT05ORUNURURfQ0xBU1MiLCAiUEhYX05PX0ZFRURCQUNLX0NMQVNTIiwgIlBIWF9FUlJPUl9DTEFTUyIsICJQSFhfUEFSRU5UX0lEIiwgIlBIWF9NQUlOIiwgIlBIWF9ST09UX0lEIiwgIlBIWF9UUklHR0VSX0FDVElPTiIsICJQSFhfRkVFREJBQ0tfRk9SIiwgIlBIWF9IQVNfRk9DVVNFRCIsICJGT0NVU0FCTEVfSU5QVVRTIiwgIkNIRUNLQUJMRV9JTlBVVFMiLCAiUEhYX0hBU19TVUJNSVRURUQiLCAiUEhYX1NFU1NJT04iLCAiUEhYX1ZJRVdfU0VMRUNUT1IiLCAiUEhYX1NUSUNLWSIsICJQSFhfU1RBVElDIiwgIlBIWF9SRUFET05MWSIsICJQSFhfRElTQUJMRUQiLCAiUEhYX0RJU0FCTEVfV0lUSCIsICJQSFhfRElTQUJMRV9XSVRIX1JFU1RPUkUiLCAiUEhYX0hPT0siLCAiUEhYX0RFQk9VTkNFIiwgIlBIWF9USFJPVFRMRSIsICJQSFhfVVBEQVRFIiwgIlBIWF9TVFJFQU0iLCAiUEhYX0tFWSIsICJQSFhfUFJJVkFURSIsICJQSFhfQVVUT19SRUNPVkVSIiwgIlBIWF9MVl9ERUJVRyIsICJQSFhfTFZfUFJPRklMRSIsICJQSFhfTFZfTEFURU5DWV9TSU0iLCAiUEhYX1BST0dSRVNTIiwgIlBIWF9NT1VOVEVEIiwgIkxPQURFUl9USU1FT1VUIiwgIkJFRk9SRV9VTkxPQURfTE9BREVSX1RJTUVPVVQiLCAiQklORElOR19QUkVGSVgiLCAiUFVTSF9USU1FT1VUIiwgIkRFQk9VTkNFX1RSSUdHRVIiLCAiVEhST1RUTEVEIiwgIkRFQk9VTkNFX1BSRVZfS0VZIiwgIkRFRkFVTFRTIiwgIkRZTkFNSUNTIiwgIlNUQVRJQyIsICJDT01QT05FTlRTIiwgIkVWRU5UUyIsICJSRVBMWSIsICJUSVRMRSIsICJURU1QTEFURVMiLCAiU1RSRUFNIiwgIkVudHJ5VXBsb2FkZXIiLCAiZW50cnkiLCAiY2h1bmtTaXplIiwgImxpdmVTb2NrZXQiLCAicmVhc29uIiwgIl9kYXRhIiwgInJlYWRlciIsICJibG9iIiwgImUiLCAibG9nRXJyb3IiLCAiY2h1bmsiLCAibXNnIiwgIm9iaiIsICJpc0NpZCIsICJjaWQiLCAidHlwZSIsICJkZXRlY3REdXBsaWNhdGVJZHMiLCAiaWRzIiwgImVsZW1zIiwgImxlbiIsICJkZWJ1ZyIsICJ2aWV3IiwgImtpbmQiLCAiY2xvc3VyZSIsICJ2YWwiLCAiY2xvbmUiLCAiY2xvc2VzdFBoeEJpbmRpbmciLCAiZWwiLCAiYmluZGluZyIsICJib3JkZXJFbCIsICJpc09iamVjdCIsICJpc0VxdWFsT2JqIiwgIm9iajEiLCAib2JqMiIsICJpc0VtcHR5IiwgIngiLCAibWF5YmUiLCAiY2FsbGJhY2siLCAiY2hhbm5lbFVwbG9hZGVyIiwgImVudHJpZXMiLCAib25FcnJvciIsICJyZXNwIiwgIkJyb3dzZXIiLCAibG9jYWxTdG9yYWdlIiwgIm5hbWVzcGFjZSIsICJzdWJrZXkiLCAiaW5pdGlhbCIsICJmdW5jIiwgImN1cnJlbnQiLCAia2V5IiwgIm5ld1ZhbCIsICJtZXRhIiwgInRvIiwgImN1cnJlbnRTdGF0ZSIsICJoYXNoRWwiLCAibmFtZSIsICJ2YWx1ZSIsICJ0b1VSTCIsICJmbGFzaCIsICJtYXliZUhhc2giLCAiaGFzaCIsICJicm93c2VyX2RlZmF1bHQiLCAiRE9NIiwgImlkIiwgImNsYXNzTmFtZSIsICJub2RlIiwgInF1ZXJ5IiwgImFycmF5IiwgImh0bWwiLCAidGVtcGxhdGUiLCAiaHJlZiIsICJjdXJyZW50TG9jYXRpb24iLCAidXJsIiwgImUyIiwgInBhcmVudElkIiwgInBoeFVwZGF0ZSIsICJ1cGRhdGVUeXBlcyIsICJjaWRzIiwgInBhcmVudENpZHMiLCAiYWNjIiwgInNlbGVjdG9yIiwgImNoaWxkQ0lEIiwgIm5vZGVzIiwgInBhcmVudCIsICJkZWZhdWx0VmFsIiwgInVwZGF0ZUZ1bmMiLCAiZXhpc3RpbmciLCAidGFyZ2V0IiwgInNvdXJjZSIsICJzdHIiLCAidGl0bGVFbCIsICJwcmVmaXgiLCAic3VmZml4IiwgImV2ZW50IiwgInBoeERlYm91bmNlIiwgImRlZmF1bHREZWJvdW5jZSIsICJwaHhUaHJvdHRsZSIsICJkZWZhdWx0VGhyb3R0bGUiLCAiYXN5bmNGaWx0ZXIiLCAiZGVib3VuY2UiLCAidGhyb3R0bGUiLCAidGltZW91dCIsICJ0cmlnZ2VyIiwgImN1cnJlbnRDeWNsZSIsICJuZXdLZXlEb3duIiwgInByZXZLZXkiLCAiZm9ybSIsICJpbnB1dCIsICJjeWNsZSIsICJjb250YWluZXIiLCAicGh4RmVlZGJhY2tGb3IiLCAiZmllbGQiLCAiZmVlZGJhY2tFbCIsICJpbnB1dEVsIiwgIm9wdHMiLCAiZXZlbnRPcHRzIiwgImNsb25lZCIsICJleGNsdWRlIiwgImlzSWdub3JlZCIsICJzb3VyY2VBdHRycyIsICJpIiwgInRhcmdldEF0dHJzIiwgImZvY3VzZWQiLCAic2VsZWN0aW9uU3RhcnQiLCAic2VsZWN0aW9uRW5kIiwgIndhc0ZvY3VzZWQiLCAicGh4VHJpZ2dlckV4dGVybmFsIiwgImZyb21FbCIsICJ0b0VsIiwgImRpc2FibGVXaXRoIiwgInJlZiIsICJyZWZTcmMiLCAidG9SZW1vdmUiLCAiY2hpbGROb2RlIiwgInRhZ05hbWUiLCAiYXR0cnMiLCAicmV0YWluZWRBdHRycyIsICJhdHRyIiwgIm5ld0NvbnRhaW5lciIsICJvcCIsICJleGlzdGluZ05hbWUiLCAiX25hbWUiLCAiX29wIiwgInN0YXNoZWRSZXN1bHQiLCAib3BzIiwgIl8iLCAiZXhpc3RpbmdJbmRleCIsICJfc3Rhc2hlZCIsICJkb21fZGVmYXVsdCIsICJVcGxvYWRFbnRyeSIsICJmaWxlRWwiLCAiZmlsZSIsICJpc05ldyIsICJpc0FjdGl2ZSIsICJMaXZlVXBsb2FkZXIiLCAicHJvZ3Jlc3MiLCAidXBsb2FkZXJzIiwgImxpdmVVcGxvYWRlckZpbGVSZWYiLCAiZmlsZTIiLCAiZm9ybUVsIiwgImFjdGl2ZSIsICJmaWxlcyIsICJmaWxlRGF0YSIsICJ1cGxvYWRSZWYiLCAiZiIsICJkYXRhVHJhbnNmZXIiLCAibmV3RmlsZXMiLCAiZmlsZUlucHV0cyIsICJvbkNvbXBsZXRlIiwgImdyb3VwZWRFbnRyaWVzIiwgIkFSSUEiLCAib3JpZ1RhYkluZGV4IiwgImluc3RhbmNlIiwgImNsYXNzZXMiLCAiaW50ZXJhY3RpdmVPbmx5IiwgImNoaWxkIiwgImFyaWFfZGVmYXVsdCIsICJIb29rcyIsICJuZXdQcmVmbGlnaHRzIiwgImhvb2tzX2RlZmF1bHQiLCAiRE9NUG9zdE1vcnBoUmVzdG9yZXIiLCAiY29udGFpbmVyQmVmb3JlIiwgImNvbnRhaW5lckFmdGVyIiwgInVwZGF0ZVR5cGUiLCAiaWRzQmVmb3JlIiwgImlkc0FmdGVyIiwgImVsZW1lbnRzVG9Nb2RpZnkiLCAicHJldmlvdXNFbGVtZW50SWQiLCAiZWxlbWVudFRvTW9kaWZ5IiwgInByZXZpb3VzRWxlbSIsICJlbGVtIiwgImVsZW1JZCIsICJET0NVTUVOVF9GUkFHTUVOVF9OT0RFIiwgIm1vcnBoQXR0cnMiLCAiZnJvbU5vZGUiLCAidG9Ob2RlIiwgInRvTm9kZUF0dHJzIiwgImF0dHJOYW1lIiwgImF0dHJOYW1lc3BhY2VVUkkiLCAiYXR0clZhbHVlIiwgImZyb21WYWx1ZSIsICJmcm9tTm9kZUF0dHJzIiwgImQiLCAicmFuZ2UiLCAiTlNfWEhUTUwiLCAiZG9jIiwgIkhBU19URU1QTEFURV9TVVBQT1JUIiwgIkhBU19SQU5HRV9TVVBQT1JUIiwgImNyZWF0ZUZyYWdtZW50RnJvbVRlbXBsYXRlIiwgImNyZWF0ZUZyYWdtZW50RnJvbVJhbmdlIiwgImZyYWdtZW50IiwgImNyZWF0ZUZyYWdtZW50RnJvbVdyYXAiLCAidG9FbGVtZW50IiwgImNvbXBhcmVOb2RlTmFtZXMiLCAiZnJvbU5vZGVOYW1lIiwgInRvTm9kZU5hbWUiLCAiZnJvbUNvZGVTdGFydCIsICJ0b0NvZGVTdGFydCIsICJjcmVhdGVFbGVtZW50TlMiLCAibmFtZXNwYWNlVVJJIiwgIm1vdmVDaGlsZHJlbiIsICJjdXJDaGlsZCIsICJuZXh0Q2hpbGQiLCAic3luY0Jvb2xlYW5BdHRyUHJvcCIsICJzcGVjaWFsRWxIYW5kbGVycyIsICJwYXJlbnROb2RlIiwgInBhcmVudE5hbWUiLCAibmV3VmFsdWUiLCAiZmlyc3RDaGlsZCIsICJvbGRWYWx1ZSIsICJzZWxlY3RlZEluZGV4IiwgIm9wdGdyb3VwIiwgIm5vZGVOYW1lIiwgIkVMRU1FTlRfTk9ERSIsICJET0NVTUVOVF9GUkFHTUVOVF9OT0RFJDEiLCAiVEVYVF9OT0RFIiwgIkNPTU1FTlRfTk9ERSIsICJub29wIiwgImRlZmF1bHRHZXROb2RlS2V5IiwgIm1vcnBoZG9tRmFjdG9yeSIsICJtb3JwaEF0dHJzMiIsICJvcHRpb25zIiwgInRvTm9kZUh0bWwiLCAiZ2V0Tm9kZUtleSIsICJvbkJlZm9yZU5vZGVBZGRlZCIsICJvbk5vZGVBZGRlZCIsICJvbkJlZm9yZUVsVXBkYXRlZCIsICJvbkVsVXBkYXRlZCIsICJvbkJlZm9yZU5vZGVEaXNjYXJkZWQiLCAib25Ob2RlRGlzY2FyZGVkIiwgIm9uQmVmb3JlRWxDaGlsZHJlblVwZGF0ZWQiLCAic2tpcEZyb21DaGlsZHJlbiIsICJhZGRDaGlsZCIsICJjaGlsZHJlbk9ubHkiLCAiZnJvbU5vZGVzTG9va3VwIiwgImtleWVkUmVtb3ZhbExpc3QiLCAiYWRkS2V5ZWRSZW1vdmFsIiwgIndhbGtEaXNjYXJkZWRDaGlsZE5vZGVzIiwgInNraXBLZXllZE5vZGVzIiwgInJlbW92ZU5vZGUiLCAiaW5kZXhUcmVlIiwgImhhbmRsZU5vZGVBZGRlZCIsICJuZXh0U2libGluZyIsICJ1bm1hdGNoZWRGcm9tRWwiLCAibW9ycGhFbCIsICJjbGVhbnVwRnJvbUVsIiwgImN1ckZyb21Ob2RlQ2hpbGQiLCAiY3VyRnJvbU5vZGVLZXkiLCAiZnJvbU5leHRTaWJsaW5nIiwgImNoaWxkcmVuT25seTIiLCAidG9FbEtleSIsICJtb3JwaENoaWxkcmVuIiwgInNraXBGcm9tIiwgImN1clRvTm9kZUNoaWxkIiwgImN1clRvTm9kZUtleSIsICJ0b05leHRTaWJsaW5nIiwgIm1hdGNoaW5nRnJvbUVsIiwgIm91dGVyIiwgImN1ckZyb21Ob2RlVHlwZSIsICJpc0NvbXBhdGlibGUiLCAib25CZWZvcmVOb2RlQWRkZWRSZXN1bHQiLCAic3BlY2lhbEVsSGFuZGxlciIsICJtb3JwaGVkTm9kZSIsICJtb3JwaGVkTm9kZVR5cGUiLCAidG9Ob2RlVHlwZSIsICJlbFRvUmVtb3ZlIiwgIm1vcnBoZG9tIiwgIm1vcnBoZG9tX2VzbV9kZWZhdWx0IiwgIkRPTVBhdGNoIiwgImFjdGl2ZUVsZW1lbnQiLCAiZnJvbUVsMiIsICJ0b0VsMiIsICJzdHJlYW1zIiwgInRhcmdldENJRCIsICJhcmdzIiwgInRhcmdldENvbnRhaW5lciIsICJhZGRlZCIsICJ1cGRhdGVzIiwgImFwcGVuZFByZXBlbmRVcGRhdGVzIiwgImV4dGVybmFsRm9ybVRyaWdnZXJlZCIsICJkaWZmSFRNTCIsICJpbnNlcnRzIiwgImRlbGV0ZUlkcyIsICJmcm9tIiwgInN0cmVhbUF0IiwgInNpYmxpbmciLCAicHJldlNlc3Npb24iLCAidXBkYXRlIiwgImNoaWxkcmVuIiwgIm9sZEluZGV4IiwgInBlbmRpbmdSZW1vdmVzIiwgImZpcnN0IiwgInJlc3QiLCAiaXNDSURQYXRjaCIsICJpc0NJRFdpdGhTaW5nbGVSb290IiwgImRpZmZDb250YWluZXIiLCAiZmlyc3RDb21wb25lbnQiLCAiUmVuZGVyZWQiLCAiZGlmZiIsICJyZXBseSIsICJldmVudHMiLCAidGl0bGUiLCAidmlld0lkIiwgInJlbmRlcmVkIiwgIm9ubHlDaWRzIiwgImNvbXBvbmVudHMiLCAib3V0cHV0IiwgIm5ld2MiLCAiY2FjaGUiLCAib2xkYyIsICJjZGlmZiIsICJuZGlmZiIsICJzdGF0IiwgInNjaWQiLCAidGRpZmYiLCAidGFyZ2V0VmFsIiwgIm1lcmdlZCIsICJfX3NwcmVhZFZhbHVlcyIsICJwYXJ0IiwgInRlbXBsYXRlcyIsICJzdGF0aWNzIiwgImR5bmFtaWNzIiwgInN0cmVhbSIsICJfaW5zZXJ0cyIsICJjb21wVGVtcGxhdGVzIiwgImR5bmFtaWMiLCAiY29tcG9uZW50IiwgInNraXAiLCAiaGFzQ2hpbGROb2RlcyIsICJoYXNDaGlsZENvbXBvbmVudHMiLCAiaGFzTm9kZXMiLCAiaGFzQ29tcG9uZW50cyIsICJ0ZXh0IiwgInNwYW4iLCAidmlld0hvb2tJRCIsICJWaWV3SG9vayIsICJjYWxsYmFja3MiLCAicGF5bG9hZCIsICJvblJlcGx5IiwgInBoeFRhcmdldCIsICJ0YXJnZXRDdHgiLCAiY2FsbGJhY2tSZWYiLCAiY3VzdG9tRXZlbnQiLCAiYnlwYXNzIiwgImZvY3VzU3RhY2siLCAiSlMiLCAiZXZlbnRUeXBlIiwgInBoeEV2ZW50IiwgInNvdXJjZUVsIiwgImRlZmF1bHRzIiwgImRlZmF1bHRLaW5kIiwgImRlZmF1bHRBcmdzIiwgImVuY29kZWRKUyIsICJkZXRhaWwiLCAiYnViYmxlcyIsICJkYXRhIiwgInBhZ2VfbG9hZGluZyIsICJsb2FkaW5nIiwgImRpc3BhdGNoZXIiLCAicHVzaE9wdHMiLCAidGFyZ2V0U3JjIiwgInRhcmdldFZpZXciLCAibmV3Q2lkIiwgIl90YXJnZXQiLCAic3VibWl0dGVyIiwgInJlcGxhY2UiLCAibmFtZXMiLCAidHJhbnNpdGlvbiIsICJ0aW1lIiwgImRpc3BsYXkiLCAiaW5zIiwgIm91dHMiLCAiaW5DbGFzc2VzIiwgImluU3RhcnRDbGFzc2VzIiwgImluRW5kQ2xhc3NlcyIsICJvdXRDbGFzc2VzIiwgIm91dFN0YXJ0Q2xhc3NlcyIsICJvdXRFbmRDbGFzc2VzIiwgIm9uU3RhcnQiLCAiY3VycmVudEVsIiwgInN0aWNreURpc3BsYXkiLCAiYWRkcyIsICJyZW1vdmVzIiwgInRyYW5zaXRpb25fcnVuIiwgInRyYW5zaXRpb25fc3RhcnQiLCAidHJhbnNpdGlvbl9lbmQiLCAib25Eb25lIiwgInByZXZBZGRzIiwgInByZXZSZW1vdmVzIiwgImtlZXBBZGRzIiwgImtlZXBSZW1vdmVzIiwgIm5ld0FkZHMiLCAibmV3UmVtb3ZlcyIsICJzZXRzIiwgInByZXZTZXRzIiwgImFsdGVyZWRBdHRycyIsICJfdmFsIiwgIm5ld1NldHMiLCAianNfZGVmYXVsdCIsICJzZXJpYWxpemVGb3JtIiwgIm1ldGFkYXRhIiwgIm9ubHlOYW1lcyIsICJfYSIsICJfX29ialJlc3QiLCAiZm9ybURhdGEiLCAiX2luZGV4IiwgInBhcmFtcyIsICJtZXRhS2V5IiwgIlZpZXciLCAicGFyZW50VmlldyIsICJsaXZlUmVmZXJlciIsICJtYW5pZmVzdCIsICJvbkZpbmlzaGVkIiwgIm1zZ0NhbGxiYWNrIiwgInRhcmdldHMiLCAicmF3RGlmZiIsICJ0YWciLCAiZm9ybXMiLCAibmV3Rm9ybSIsICJyZXNwMiIsICJsaXZlX3BhdGNoIiwgInBoeFN0YXRpYyIsICJob29rRWwiLCAicGF0Y2giLCAiaG9vayIsICJwaHhNb3VudGVkIiwgImhhc0JlZW5JbnZva2VkIiwgImZvcmNlIiwgIm5ld0hvb2siLCAicHJ1bmVDaWRzIiwgInJlbW92ZWRFbHMiLCAicGh4Q2hpbGRyZW5BZGRlZCIsICJ1cGRhdGVkSG9va0lkcyIsICJlbHMiLCAiZWxlbWVudHMiLCAiZGVzdHJveWVkQ0lEcyIsICJob29rcyIsICJjaGlsZElkIiwgIl9jaGlsZCIsICJwYXJlbnRDSUQiLCAiaG9va05hbWUiLCAiY2IiLCAicmVkaXIiLCAicmVmR2VuZXJhdG9yIiwgIm9uTG9hZGluZ0RvbmUiLCAiZmluaXNoIiwgImhvb2tSZXBseSIsICJkaXNhYmxlZFZhbCIsICJkaXNhYmxlUmVzdG9yZSIsICJuZXdSZWYiLCAiZGlzYWJsZVRleHQiLCAiY2lkT3JTZWxlY3RvciIsICJlbnRyeVJlZiIsICJmb3JjZUNpZCIsICJ1cGxvYWRzIiwgIl9lbHMiLCAiX3VwbG9hZHMiLCAiYXdhaXRpbmdTdWJtaXQiLCAiX2VsIiwgIl9yZWYiLCAiX29wdHMiLCAiX2NhbGxiYWNrIiwgImZpbHRlcklnbm9yZWQiLCAiZmlsdGVyRGlzYWJsZXMiLCAiZmlsdGVyQnV0dG9uIiwgImZpbHRlcklucHV0IiwgImZvcm1FbGVtZW50cyIsICJkaXNhYmxlcyIsICJidXR0b25zIiwgImlucHV0cyIsICJidXR0b24iLCAicHVzaCIsICJwcm94eVJlZkdlbiIsICJqb2luQ291bnRBdFVwbG9hZCIsICJpbnB1dEVscyIsICJudW1GaWxlSW5wdXRzSW5Qcm9ncmVzcyIsICJ1cGxvYWRlciIsICJlbnRyeV9yZWYiLCAiZmlsZXNPckJsb2JzIiwgInRhcmdldEVsIiwgImxpbmtSZWYiLCAicmVmR2VuIiwgImZhbGxiYWNrIiwgInBoeENoYW5nZSIsICJ3aWxsRGVzdHJveUNJRHMiLCAiY29tcGxldGVseURlc3Ryb3lDSURzIiwgInBhcmVudFZpZXdFbCIsICJwaHhGZWVkYmFjayIsICJMaXZlU29ja2V0IiwgInBoeFNvY2tldCIsICJUcmFuc2l0aW9uU2V0IiwgIl9lIiwgInVwcGVyQm91bmRNcyIsICJkb0Nvbm5lY3QiLCAidHJhbnNwb3J0IiwgInJlc3VsdCIsICJjaGFubmVsIiwgImxhdGVuY3kiLCAib2xkSm9pbkNvdW50IiwgImZha2VQdXNoIiwgImxvZyIsICJtaW5NcyIsICJtYXhNcyIsICJhZnRlck1zIiwgInRyaWVzIiwgImNvdW50IiwgInRvcGljIiwgImJvZHkiLCAicm9vdHNGb3VuZCIsICJyb290RWwiLCAibmV3TWFpbkVsIiwgImpvaW5Db3VudCIsICJyZW1vdmVBdHRyIiwgImNoaWxkRWwiLCAicm9vdElkIiwgInJvb3QiLCAiY2FuY2VsIiwgImRlYWQiLCAiZXZlbnRUYXJnZXQiLCAibWF0Y2hLZXkiLCAicHJlc3NlZEtleSIsICJkcm9wVGFyZ2V0SWQiLCAidHJ1ZVRhcmdldCIsICJkcm9wVGFyZ2V0IiwgInVwbG9hZFRhcmdldCIsICJldmVudE5hbWUiLCAiYnJvd3NlckV2ZW50TmFtZSIsICJ3aW5kb3dCaW5kaW5nIiwgInRhcmdldFBoeEV2ZW50IiwgImJpbmRpbmdOYW1lIiwgImNhcHR1cmUiLCAiY2xpY2siLCAiY2xpY2tTdGFydGVkQXRUYXJnZXQiLCAiY2xpY2tTdGFydGVkQXQiLCAicGh4Q2xpY2tBd2F5IiwgInNjcm9sbFRpbWVyIiwgInN0YXRlIiwgInNjcm9sbCIsICJsaW5rU3RhdGUiLCAicGh4Q2xpY2siLCAiaW5mbyIsICJkb25lIiwgInByb3RvY29sIiwgImhvc3QiLCAibmV3TG9jYXRpb24iLCAicGF0aG5hbWUiLCAic2VhcmNoIiwgIml0ZXJhdGlvbnMiLCAiZXh0ZXJuYWxGb3JtU3VibWl0dGVkIiwgInBoeFN1Ym1pdCIsICJpbnB1dEV2ZW50IiwgImZvcm1FdmVudCIsICJjdXJyZW50SXRlcmF0aW9ucyIsICJhdCIsICJsYXN0VHlwZSIsICJ0aW1lciIsICJpbXBvcnRfcHJpc20iLCAiYSIsICJpIiwgIkhvb2tzIiwgImV2ZW50TG9nIiwgImNoZWNrYm94IiwgInNvY2tldCIsICJ2YWx1ZUlucHV0IiwgInZhbHVlIiwgInVwZGF0ZVBsYXlncm91bmRUYWJMYWJlbCIsICJpbnB1dCIsICJvbGRWYWx1ZSIsICJpbml0RGVidWdQcm9maWxlIiwgImRlYnVnUHJvZmlsZURpdiIsICJkZWJ1Z1Byb2ZpbGVEaXNhYmxlZERpdiIsICJkZWJ1Z0NoZWNrYm94IiwgInByb2ZpbGVDaGVja2JveCIsICJsYXRlbmN5U2ltQ2hlY2tib3giLCAibGF0ZW5jeVNpbUlucHV0IiwgImxhdGVuY3lTaW1WYWx1ZSIsICJsYWJlbCIsICJtYXliZVBhdGNoU29ja2V0IiwgInBhdGgiLCAiUEhYX0xWX0RFQlVHIiwgIlBIWF9MVl9QUk9GSUxFIiwgIlBIWF9MVl9MQVRFTkNZX1NJTSIsICJ1cHBlckJvdW5kTXMiLCAic3RyIiwgImRlYnVnIiwgInZpZXciLCAia2luZCIsICJtc2ciLCAib2JqIiwgImlmcmFtZSIsICJlIiwgInNlbmRSZXNpemUiLCAic2VsZiIsICJQcmlzbSIsICJ0ZW1wbGF0ZSIsICJjc3JmVG9rZW4iLCAibGl2ZVNvY2tldCIsICJMaXZlU29ja2V0IiwgIlNvY2tldCJdCn0K
